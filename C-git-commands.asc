[[C-git-commands]]
[appendix]
== Comandes Git

Al llarg del llibre hem introduït desenes de comandes Git i hem intentat introduir-les dins d'alguna mena de narrativa, afegint més comandes a la història lentament.
Tanmateix, això ens deixa amb exemples d'ús de les comandes una mica dispersos per tot el llibre.

En aquest apèndix, passarem per totes les comandes Git que vam abordar al llarg del llibre, agrupades aproximadament per al que s'utilitzen.
Parlarem del que fa cada comanda de manera molt general i després assenyalarem on al llibre podeu trobar-nos havent-la utilitzada.

[TIP]
Podeu abreujar opcions llargues. Per exemple, podeu escriure git commit --a, que actua com si haguéssiu escrit git commit --amend. Això només funciona quan les lletres després de -- són úniques per a una opció. Utilitzeu l'opció completa en escriure scripts.
=== Configuració i Configuració

Hi ha dues comandes que s'utilitzen força, des de les primeres invocacions de Git fins a l'ajust i la referència diària comuna, les comandes config i help.

==== git config

Git té una manera predeterminada de fer centenars de coses.
Per a moltes d'aquestes coses, podeu dir a Git que per defecte les faci d'una altra manera, o establir les vostres preferències.
Això inclou tot, des de dir a Git quin és el vostre nom fins a preferències específiques de color del terminal o quin editor utilitzeu.
Hi ha diversos fitxers que aquesta comanda llegirà i escriure per tal que podeu establir valors globalment o fins a repositoris específics.

La comanda git config s'ha utilitzat en gairebé tots els capítols del llibre.

A <<ch01-getting-started#_first_time>> la vam utilitzar per especificar el nostre nom, adreça de correu electrònic i preferència d'editor abans de començar a utilitzar Git.

A <<ch02-git-basics-chapter#_git_aliases>> vam mostrar com podeu utilitzar-la per crear comandes abreujades que s'expandeixen a seqüències llargues d'opcions per no haver de escriure-les cada vegada.

A <<ch03-git-branching#_rebasing>> la vam utilitzar per fer que --rebase fos l'opció per defecte quan executeu git pull.

A <<ch07-git-tools#_credential_caching>> la vam utilitzar per configurar una botiga per defecte per a les vostres contrasenyes HTTP.

A <<ch08-customizing-git#_keyword_expansion>> vam mostrar com configurar filtres de neteja i brutícia en el contingut que entra i surt de Git.

Finalment, bàsicament la totalitat de <<ch08-customizing-git#_git_config>> està dedicada a la comanda.

[[ch_core_editor]]
==== comandes git config core.editor

Acompanyant les instruccions de configuració a <<ch01-getting-started#_editor>>, molts editors es poden configurar de la següent manera:

.Llista exhaustiva de comandes de configuració de core.editor
[cols="1,2",options="header"]
|==============================
|Editor | Comanda de configuració
|Atom |git config --global core.editor "atom --wait"
|BBEdit (macOS, amb eines de línia de comandes) |git config --global core.editor "bbedit -w"
|Emacs |git config --global core.editor emacs
|Gedit (Linux) |git config --global core.editor "gedit --wait --new-window"
|Gvim (Windows 64-bit) |git config --global core.editor "'C:\Program Files\Vim\vim72\gvim.exe' --nofork '%*'" (Vegeu també la nota a continuació)
|Helix |git config --global core.editor "hx"
|Kate (Linux) |git config --global core.editor "kate --block"
|nano |git config --global core.editor "nano -w"
|Notepad (Windows 64-bit) |git config core.editor notepad
|Notepad++ (Windows 64-bit) |git config --global core.editor "'C:\Program Files\Notepad+\+\notepad++.exe' -multiInst -notabbar -nosession -noPlugin" (Vegeu també la nota a continuació)
|Scratch (Linux)|git config --global core.editor "scratch-text-editor"
|Sublime Text (macOS) |git config --global core.editor "/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl --new-window --wait"
|Sublime Text (Windows 64-bit) |git config --global core.editor "'C:\Program Files\Sublime Text 3\sublime_text.exe' -w" (Vegeu també la nota a continuació)
|TextEdit (macOS)|git config --global core.editor "open --wait-apps --new -e"
|Textmate |git config --global core.editor "mate -w"
|Textpad (Windows 64-bit) |git config --global core.editor "'C:\Program Files\TextPad 5\TextPad.exe' -m" (Vegeu també la nota a continuació)
|UltraEdit (Windows 64-bit) | git config --global core.editor Uedit32
|Vim |git config --global core.editor "vim --nofork"
|Visual Studio Code |git config --global core.editor "code --wait"
|VSCodium (Binaris de Programari Lliure de Codi Obert de VSCode) | git config --global core.editor "codium --wait"
|WordPad |git config --global core.editor "'C:\Program Files\Windows NT\Accessories\wordpad.exe'"
|Xi | git config --global core.editor "xi --wait"
|==============================

[NOTE]
Si teniu un editor de 32 bits en un sistema Windows de 64 bits, el programa s'instal·larà a C:\Program Files (x86)\ en lloc de C:\Program Files\ com a la taula anterior.
==== git help

La comanda git help s'utilitza per mostrar-vos tota la documentació enviada amb Git sobre qualsevol comanda.
Tot i que estem donant una visió general aproximada de la majoria de les més populars en aquest apèndix, per a una llista completa de totes les opcions i banderes possibles per a cada comanda, sempre podeu executar git help <command>.

Vam introduir la comanda git help a <<ch01-getting-started#_git_help>> i us vam mostrar com utilitzar-la per trobar més informació sobre el git shell a <<ch04-git-on-the-server#_setting_up_server>>.

=== Obtenció i Creació de Projectes

Hi ha dues maneres d'obtenir un repositori Git.
Una és copiar-lo d'un repositori existent a la xarxa o en un altre lloc i l'altra és crear-ne un de nou en un directori existent.

==== git init

Per prendre un directori i convertir-lo en un nou repositori Git per poder començar a controlar-ne la versió, simplement podeu executar git init.

Primer introduïm això a <<ch02-git-basics-chapter#_getting_a_repo>>, on mostrem la creació d'un repositori completament nou per començar a treballar.

Parlem breument de com podeu canviar el nom de la branca per defecte de "master" a <<ch03-git-branching#_remote_branches>>.

Utilitzem aquesta comanda per crear un repositori buit nu per a un servidor a <<ch04-git-on-the-server#_bare_repo>>.

Finalment, passem per alguns dels detalls del que realment fa darrere de les escenes a <<ch10-git-internals#_plumbing_porcelain>>.

==== git clone

La comanda git clone és realment una mena d'embolcall al voltant de diverses altres comandes.
Crea un nou directori, entra-hi i executa git init per fer-ne un repositori Git buit, afegeix un remot (git remote add) a la URL que li passeu (per defecte anomenat origin), executa un git fetch des d'aquest repositori remot i després comprova l'última confirmació al vostre directori de treball amb git checkout.

La comanda git clone s'utilitza en desenes de llocs al llarg del llibre, però només llistarem alguns llocs interessants.

Bàsicament s'introdueix i s'explica a <<ch02-git-basics-chapter#_git_cloning>>, on passem per alguns exemples.

A <<ch04-git-on-the-server#_getting_git_on_a_server>> mirem l'ús de l'opció --bare per crear una còpia d'un repositori Git sense directori de treball.

A <<ch07-git-tools#_bundling>> l'utilitzem per desfer un repositori Git empaquetat.

Finalment, a <<ch07-git-tools#_cloning_submodules>> aprenem l'opció --recurse-submodules per fer que la clonació d'un repositori amb submodules sigui una mica més senzilla.

Tot i que s'utilitza en molts altres llocs del llibre, aquests són els que són una mica únics o on s'utilitza de maneres una mica diferents.

=== Instantànies bàsiques

Per al flux de treball bàsic de preparar contingut i confirmar-lo a la vostra història, només hi ha unes poques comandes bàsiques.

==== git add

La comanda git add afegeix contingut del directori de treball a l'àrea de preparació (o "índex") per a la propera confirmació.
Quan s'executa la comanda git commit, per defecte només mira aquesta àrea de preparació, així que git add s'utilitza per elaborar exactament com voleu que sigui la vostra propera instantània de confirmació.

Aquesta comanda és una comanda increïblement important a Git i es menciona o s'utilitza desenes de vegades en aquest llibre.
Repassarem ràpidament alguns dels usos únics que es poden trobar.

Primer introduïm i expliquem git add en detall a <<ch02-git-basics-chapter#_tracking_files>>.

Esmentem com utilitzar-lo per resoldre conflictes de fusió a <<ch03-git-branching#_basic_merge_conflicts>>.

Repassem com utilitzar-lo per preparar interactivament només parts específiques d'un fitxer modificat a <<ch07-git-tools#_interactive_staging>>.

Finalment, l'emulem a un nivell baix a <<ch10-git-internals#_tree_objects>>, per tal que us podeu fer una idea del que fa darrere de les escenes.

==== git status

La comanda git status us mostrarà els diferents estats dels fitxers al vostre directori de treball i àrea de preparació.
Quins fitxers estan modificats i no preparats i quins estan preparats però encara no confirmats.
En la seva forma normal, també us mostrarà alguns consells bàsics sobre com moure fitxers entre aquestes etapes.

Primer cobrim status a <<ch02-git-basics-chapter#_checking_status>>, tant en les seves formes bàsiques com simplificades.
Tot i que l'utilitzem al llarg del llibre, gairebé tot el que podeu fer amb la comanda git status està cobert allà.

==== git diff

La comanda git diff s'utilitza quan voleu veure diferències entre qualsevol dos arbres.
Això podria ser la diferència entre el vostre entorn de treball i la vostra àrea de preparació (git diff per si mateix), entre la vostra àrea de preparació i la vostra última confirmació (git diff --staged), o entre dues confirmacions (git diff master branchB).

Primer mirem els usos bàsics de git diff a <<ch02-git-basics-chapter#_git_diff_staged>>, on mostrem com veure quins canvis estan preparats i quins encara no ho estan.

L'utilitzem per buscar possibles problemes d'espais en blanc abans de confirmar amb l'opció --check a <<ch05-distributed-git#_commit_guidelines>>.

Veiem com comprovar les diferències entre branques de manera més efectiva amb la sintaxi git diff A...B a <<ch05-distributed-git#_what_is_introduced>>.

L'utilitzem per filtrar les diferències d'espais en blanc amb -b i com comparar diferents etapes de fitxers en conflicte amb --theirs, --ours i --base a <<ch07-git-tools#_advanced_merging>>.

Finalment, l'utilitzem per comparar efectivament els canvis de submodules amb --submodule a <<ch07-git-tools#_starting_submodules>>.

==== git difftool

La comanda git difftool simplement llança una eina externa per mostrar-vos la diferència entre dos arbres en cas que vulgueu utilitzar alguna cosa diferent de la comanda incorporada git diff.

Només esmentem això breument a <<ch02-git-basics-chapter#_git_diff_staged>>.

==== git commit

La comanda git commit pren tot el contingut dels fitxers que s'han preparat amb git add i registra una nova instantània permanent a la base de dades i després mou el punter de branca a la branca actual fins a ella.

Primer cobrim els fonaments de la confirmació a <<ch02-git-basics-chapter#_committing_changes>>.
Allà també demostrem com utilitzar la bandera -a per saltar el pas git add en els fluxos de treball diaris i com utilitzar la bandera -m per passar un missatge de confirmació a la línia de comandes en lloc d'iniciar un editor.

A <<ch02-git-basics-chapter#_undoing>> cobrim l'ús de l'opció --amend per tornar a fer la confirmació més recent.

A <<ch03-git-branching#_git_branches_overview>>, entrem en molt més detall sobre el que fa git commit i per què ho fa així.

Vam veure com signar confirmacions criptogràficament amb la bandera -S a <<ch07-git-tools#_signing_commits>>.

Finalment, fem un cop d'ull al que fa la comanda git commit en segon pla i com està implementada realment a <<ch10-git-internals#_git_commit_objects>>.

==== git reset

La comanda git reset s'utilitza principalment per desfer coses, com podeu suposar pel verb.
Mou el punter HEAD i opcionalment canvia l'índex o àrea de preparació i també pot canviar opcionalment el directori de treball si utilitzeu --hard.
Aquesta última opció fa possible que aquesta comanda perdi la vostra feina si s'utilitza incorrectament, així que assegureu-vos d'entendre-la abans d'utilitzar-la.

Primer cobrim efectivament l'ús més simple de git reset a <<ch02-git-basics-chapter#_unstaging>>, on l'utilitzem per desfer la preparació d'un fitxer al qual havíem executat git add.

Llavors la cobrim amb bastant detall a <<ch07-git-tools#_git_reset>>, que està totalment dedicat a explicar aquesta comanda.

Utilitzem git reset --hard per avortar una fusió a <<ch07-git-tools#_abort_merge>>, on també utilitzem git merge --abort, que és una mena d'embolcall per a la comanda git reset.

==== git rm

La comanda git rm s'utilitza per eliminar fitxers de l'àrea de preparació i del directori de treball per a Git.
És similar a git add en el sentit que prepara una eliminació d'un fitxer per a la propera confirmació.

Cobrim la comanda git rm en alguns detalls a <<ch02-git-basics-chapter#_removing_files>>, incloent l'eliminació recursiva de fitxers i només l'eliminació de fitxers de l'àrea de preparació però deixant-los al directori de treball amb --cached.

L'únic altre ús diferent de git rm al llibre és a <<ch10-git-internals#_removing_objects>> on utilitzem i expliquem breument el --ignore-unmatch en executar git filter-branch, que simplement fa que no doni error quan el fitxer que intentem eliminar no existeix.
Això pot ser útil per a finalitats d'escriptura.

==== git mv

La comanda git mv és una comanda de conveniència prima per moure un fitxer i després executar git add al fitxer nou i git rm al fitxer antic.

Només esmentem aquesta comanda breument a <<ch02-git-basics-chapter#_git_mv>>.

==== git clean

La comanda git clean s'utilitza per eliminar fitxers no desitjats del vostre directori de treball.
Això podria incloure eliminar artefactes de compilació temporals o fitxers de conflicte de fusió.

Cobrim moltes de les opcions i escenaris en els quals podríeu utilitzar la comanda de neteja a <<ch07-git-tools#_git_clean>>.

=== Branques i Fusió

Hi ha només un grapat de comandes que implementen la majoria de la funcionalitat de branques i fusió a Git.

==== git branch

La comanda git branch és realment una mena d'eina de gestió de branques.
Pot llistar les branques que teniu, crear una nova branca, eliminar branques i canviar el nom de les branques.

La majoria de <<ch03-git-branching#ch03-git-branching>> està dedicada a la comanda branch i s'utilitza al llarg de tot el capítol.
Primer la introduïm a <<ch03-git-branching#_create_new_branch>> i passem per la majoria de les seves altres característiques (llistat i eliminació) a <<ch03-git-branching#_branch_management>>.

A <<ch03-git-branching#_tracking_branches>> utilitzem l'opció git branch -u per configurar una branca de seguiment.

Finalment, passem per alguns del que fa en segon pla a <<ch10-git-internals#_git_refs>>.

==== git checkout

La comanda git checkout s'utilitza per canviar de branques i treure contingut al vostre directori de treball.

Ens trobem per primera vegada amb la comanda a <<ch03-git-branching#_switching_branches>> juntament amb la comanda git branch.

Veiem com utilitzar-la per començar a fer seguiment de branques amb la bandera --track a <<ch03-git-branching#_tracking_branches>>.

L'utilitzem per reintroduir conflictes de fitxers amb --conflict=diff3 a <<ch07-git-tools#_checking_out_conflicts>>.

Entren en més detall sobre la seva relació amb git reset a <<ch07-git-tools#_git_reset>>.

Finalment, entrem en alguns detalls d'implementació a <<ch10-git-internals#ref_the_ref>>.

==== git merge

L'eina git merge s'utilitza per fusionar una o més branques a la branca que heu tret.
Llavors avançarà la branca actual al resultat de la fusió.

La comanda git merge es va introduir per primera vegada a <<ch03-git-branching#_basic_branching>>.
Tot i que s'utilitza en diversos llocs del llibre, hi ha molt poques variants de la comanda merge -- generalment només git merge <branch> amb el nom de la branca única que voleu fusionar.

Vam cobrir com fer una fusió esmagada (on Git fusiona el treball però fa com si només fos una nova confirmació sense registrar la història de la branca que esteu fusionant) al final de <<ch05-distributed-git#_public_project>>.

Vam repassar molt sobre el procés de fusió i la comanda, incloent la comanda -Xignore-space-change i la bandera --abort per avortar una fusió problemàtica a <<ch07-git-tools#_advanced_merging>>.

Vam aprendre com verificar les signatures abans de fusionar si el vostre projecte està utilitzant la signatura GPG a <<ch07-git-tools#_signing_commits>>.

Finalment, vam aprendre sobre la fusió de subarbres a <<ch07-git-tools#_subtree_merge>>.

==== git mergetool

La comanda git mergetool simplement llança un ajudant de fusió extern en cas que tingueu problemes amb una fusió a Git.

L'esmentem ràpidament a <<ch03-git-branching#_basic_merge_conflicts>> i entrem en detall sobre com implementar la vostra pròpia eina de fusió externa a <<ch08-customizing-git#_external_merge_tools>>.

==== git log

La comanda git log s'utilitza per mostrar la història registrada accessible d'un projecte des de l'instantània de confirmació més recent cap enrere.
Per defecte només mostrarà la història de la branca en la qual esteu actualment, però se li poden donar diferents o fins i tot múltiples caps o branques des de les quals recórrer.
També s'utilitza sovint per mostrar diferències entre dues o més branques al nivell de confirmació.

Aquesta comanda s'utilitza en gairebé cada capítol del llibre per demostrar la història d'un projecte.

Introduïm la comanda i la cobrim en alguns detalls a <<ch02-git-basics-chapter#_viewing_history>>.
Allà mirem l'opció -p i --stat per fer-nos una idea del que es va introduir en cada confirmació i les opcions --pretty i --oneline per veure la història de manera més concisa, juntament amb algunes opcions simples de filtratge de data i autor.

A <<ch03-git-branching#_create_new_branch>> l'utilitzem amb l'opció --decorate per visualitzar fàcilment on es troben els nostres punters de branca i també utilitzem l'opció --graph per veure com són les històries divergents.

A <<ch05-distributed-git#_private_team>> i <<ch07-git-tools#_commit_ranges>> cobrim la sintaxi branchA..branchB per utilitzar la comanda git log per veure quines confirmacions són úniques d'una branca en relació a una altra branca.
A <<ch07-git-tools#_commit_ranges>> passem per això bastant extensament.

A <<ch07-git-tools#_merge_log>> i <<ch07-git-tools#_triple_dot>> cobrim l'ús del format branchA...branchB i la sintaxi --left-right per veure el que està en una branca o l'altra però no en ambdues.
A <<ch07-git-tools#_merge_log>> també mirem com utilitzar l'opció --merge per ajudar amb la depuració de conflictes de fusió així com utilitzar l'opció --cc per mirar els conflictes de confirmació de fusió a la vostra història.

A <<ch07-git-tools#_git_reflog>> utilitzem l'opció -g per veure el reflog de Git a través d'aquesta eina en lloc de fer traversal de branca.

A <<ch07-git-tools#_searching>> mirem com utilitzar les opcions -S i -L per fer cerques bastant sofisticades de alguna cosa que va passar històricament al codi com veure la història d'una funció.

A <<ch07-git-tools#_signing_commits>> veiem com utilitzar --show-signature per afegir una cadena de validació a cada confirmació a la sortida de git log basada en si estava signada vàlidament o no.

==== git stash

La comanda git stash s'utilitza per emmagatzemar temporalment el treball no confirmat per netejar el vostre directori de treball sense haver de confirmar el treball inacabat en una branca.

Això està bàsicament cobert completament a <<ch07-git-tools#_git_stashing>>.

==== git tag

La comanda git tag s'utilitza per donar un marcador permanent a un punt específic a la història del codi.
Generalment això s'utilitza per a coses com llançaments.

Aquesta comanda s'introdueix i es cobreix en detall a <<ch02-git-basics-chapter#_git_tagging>> i l'utilitzem a la pràctica a <<ch05-distributed-git#_tagging_releases>>.

També cobrim com crear una etiqueta signada amb GPG amb la bandera -s i verificar-ne una amb la bandera -v a <<ch07-git-tools#_signing>>.

=== Compartir i Actualitzar Projectes

No hi ha moltes comandes a Git que accedeixin a la xarxa, gairebé totes les comandes operen a la base de dades local.
Quan esteu preparats per compartir la vostra feina o obtenir canvis d'un altre lloc, hi ha un grapat de comandes que tracten amb repositoris remots.

==== git fetch

La comanda git fetch es comunica amb un repositori remot i obté tota la informació que hi ha en aquest repositori que no està al vostre actual i l'emmagatzema a la vostra base de dades local.

Primer mirem aquesta comanda a <<ch02-git-basics-chapter#_fetching_and_pulling>> i continuem veient exemples del seu ús a <<ch03-git-branching#_remote_branches>>.

També l'utilitzem en diversos dels exemples a <<ch05-distributed-git#_contributing_project>>.

L'utilitzem per obtenir una referència específica única que està fora de l'espai per defecte a <<ch06-github#_pr_refs>> i veiem com obtenir d'un paquet a <<ch07-git-tools#_bundling>>.

Configurem refspecs altament personalitzats per fer que git fetch faci alguna cosa una mica diferent del per defecte a <<ch10-git-internals#_refspec>>.

==== git pull

La comanda git pull és bàsicament una combinació de les comandes git fetch i git merge, on Git obtindrà del remot que especifiqueu i després intentarà fusionar-lo immediatament a la branca en la qual esteu.

La introduïm ràpidament a <<ch02-git-basics-chapter#_fetching_and_pulling>> i mostrem com veure el que fusionarà si l'executeu a <<ch02-git-basics-chapter#_inspecting_remote>>.

També veiem com utilitzar-la per ajudar amb les dificultats de rebase a <<ch03-git-branching#_rebase_rebase>>.

Mostrem com utilitzar-la amb una URL per obtenir canvis de manera puntual a <<ch05-distributed-git#_checking_out_remotes>>.

Finalment, esmentem ràpidament que podeu utilitzar l'opció --verify-signatures per verificar que les confirmacions que esteu obtenint han estat signades amb GPG a <<ch07-git-tools#_signing_commits>>.

==== git push

La comanda git push s'utilitza per comunicar-se amb un altre repositori, calcular el que la vostra base de dades local té que l'altre no, i després empeny la diferència a l'altre repositori.
Requereix accés d'escriptura a l'altre repositori i per tant normalment està autenticada d'alguna manera.

Primer mirem la comanda git push a <<ch02-git-basics-chapter#_pushing_remotes>>.
Aquí cobrim els fonaments d'empenyer una branca a un repositori remot.
A <<ch03-git-branching#_pushing_branches>> entrem una mica més en profunditat en l'empenyiment de branques específiques i a <<ch03-git-branching#_tracking_branches>> veiem com configurar branques de seguiment per empenyer automàticament.
A <<ch03-git-branching#_delete_branches>> utilitzem la bandera --delete per eliminar una branca al servidor amb git push.

Al llarg de <<ch05-distributed-git#_contributing_project>> veiem diversos exemples d'utilitzar git push per compartir treball en branques a través de diversos remots.

Veiem com utilitzar-la per compartir etiquetes que heu creat amb l'opció --tags a <<ch02-git-basics-chapter#_sharing_tags>>.

A <<ch07-git-tools#_publishing_submodules>> utilitzem l'opció --recurse-submodules per verificar que tot el nostre treball de submòduls s'ha publicat abans d'empenyer el superprojecte, el qual pot ser realment útil quan s'utilitzen submòduls.

A <<ch08-customizing-git#_other_client_hooks>> parlem breument sobre el ganxo pre-push, que és un script que podem configurar per executar abans que es completi un push per verificar que s'ha de permetre el push.

Finalment, a <<ch10-git-internals#_pushing_refspecs>> mirem l'empenyiment amb un refspec complet en lloc dels dreceres generals que normalment s'utilitzen.
Això us pot ajudar a ser molt específics sobre quina feina voleu compartir.

==== git remote

La comanda git remote és una eina de gestió per al vostre registre de repositoris remots.
Us permet desar URLs llargues com a identificadors curts, com "origin" per no haver de escriure-les cada vegada.
Podeu tenir diversos d'aquests i la comanda git remote s'utilitza per afegir, canviar i eliminar-los.

Aquesta comanda està coberta en detall a <<ch02-git-basics-chapter#_remote_repos>>, incloent llistar, afegir, eliminar i canviar el nom.

També s'utilitza en gairebé cada capítol posterior del llibre, però sempre en el format estàndard git remote add <name> <url>.

==== git archive

La comanda git archive s'utilitza per crear un fitxer d'arxiu d'una instantània específica del projecte.

Utilitzem git archive per crear un tarball d'un projecte per compartir a <<ch05-distributed-git#_preparing_release>>.

==== git submodule

La comanda git submodule s'utilitza per gestionar repositoris externs dins de repositoris normals.
Això podria ser per a biblioteques o altres tipus de recursos compartits.
La comanda submodule té diverses subcomandes (add, update, sync, etc) per gestionar aquests recursos.

Aquesta comanda només s'esmenta i es cobreix completament a <<ch07-git-tools#_git_submodules>>.

=== Inspecció i Comparació

==== git show

La comanda git show pot mostrar un objecte Git d'una manera simple i llegible per humans.
Normalment utilitzaries això per mostrar la informació sobre una etiqueta o una confirmació.

Primer l'utilitzem per mostrar informació d'etiquetes anotades a <<ch02-git-basics-chapter#_annotated_tags>>.

Més tard l'utilitzem força a <<ch07-git-tools#_revision_selection>> per mostrar les confirmacions a les quals es resolen les nostres diverses seleccions de revisions.

Una de les coses més interessants que fem amb git show és a <<ch07-git-tools#_manual_remerge>> per extreure continguts de fitxers específics de diverses etapes durant un conflicte de fusió.

==== git shortlog

La comanda git shortlog s'utilitza per resumir la sortida de git log.
Prendrà moltes de les mateixes opcions que la comanda git log però en lloc de llistar totes les confirmacions presentarà un resum de les confirmacions agrupades per autor.

Vam mostrar com utilitzar-lo per crear un bon registre de canvis a <<ch05-distributed-git#_the_shortlog>>.

==== git describe

La comanda git describe s'utilitza per prendre qualsevol cosa que es resolgui a una confirmació i produeixi una cadena que sigui una mica llegible per humans i que no canviï.
És una manera d'obtenir una descripció d'una confirmació que sigui tan inequívoca com un SHA-1 de confirmació però més comprensible.

Utilitzem git describe a <<ch05-distributed-git#_build_number>> i <<ch05-distributed-git#_preparing_release>> per obtenir una cadena per nomenar el nostre fitxer de llançament.

=== Depuració

Git té unes quantes comandes que s'utilitzen per ajudar a depurar un problema al vostre codi.
Això va des de descobrir on es va introduir alguna cosa fins a descobrir qui la va introduir.

==== git bisect

L'eina git bisect és una eina de depuració increïblement útil utilitzada per trobar quina confirmació específica va ser la primera a introduir un error o problema fent una cerca binària automàtica.

Està completament coberta a <<ch07-git-tools#_binary_search>> i només s'esmenta en aquesta secció.

==== git blame

La comanda git blame anota les línies de qualsevol fitxer amb quina confirmació va ser l'última a introduir un canvi a cada línia del fitxer i quina persona va autoritzar aquesta confirmació.
Això és útil per trobar la persona a qui preguntar per més informació sobre una secció específica del vostre codi.

Està coberta a <<ch07-git-tools#_file_annotation>> i només s'esmenta en aquesta secció.

==== git grep

La comanda git grep us pot ajudar a trobar qualsevol cadena o expressió regular en qualsevol dels fitxers del vostre codi font, fins i tot versions més antigues del vostre projecte.

Està coberta a <<ch07-git-tools#_git_grep>> i només s'esmenta en aquesta secció.

=== Parcheig

Unes quantes comandes a Git estan centrades al voltant del concepte de pensar en les confirmacions en termes dels canvis que introdueixen, com si la sèrie de confirmacions fos una sèrie de pegats.
Aquestes comandes us ajuden a gestionar les vostres branques d'aquesta manera.

==== git cherry-pick

La comanda git cherry-pick s'utilitza per prendre el canvi introduït en una única confirmació Git i intentar reintroduir-lo com una nova confirmació a la branca en la qual esteu actualment.
Això pot ser útil per prendre només una o dues confirmacions d'una branca individualment en lloc de fusionar la branca que pren tots els canvis.

El cherry picking es descriu i demostra a <<ch05-distributed-git#_rebase_cherry_pick>>.

==== git rebase

La comanda git rebase és bàsicament un cherry-pick automatitzat.
Determina una sèrie de confirmacions i després les cherry-pick una per una en el mateix ordre en un altre lloc.

El rebase es cobreix en detall a <<ch03-git-branching#_rebasing>>, incloent els problemes col·laboratius involucrats en el rebase de branques que ja són públiques.

L'utilitzem a la pràctica durant un exemple de dividir la vostra història en dos repositoris separats a <<ch07-git-tools#_replace>>, utilitzant també la bandera --onto.

Passem per trobar un conflicte de fusió durant el rebase a <<ch07-git-tools#ref_rerere>>.

També l'utilitzem en un mode d'escriptura interactiu amb l'opció -i a <<ch07-git-tools#_changing_multiple>>.

==== git revert

La comanda git revert és essencialment un git cherry-pick invers.
Crea una nova confirmació que aplica l'oposat exacte del canvi introduït a la confirmació que esteu apuntant, essencialment desfer o revertir-lo.

L'utilitzem a <<ch07-git-tools#_reverse_commit>> per desfer una confirmació de fusió.

=== Correu electrònic

Molts projectes Git, incloent Git mateix, es mantenen completament a través de llistes de correu.
Git té una sèrie d'eines incorporades que ajuden a fer aquest procés més fàcil, des de generar pegats que podeu enviar per correu electrònic fàcilment fins a aplicar aquests pegats des d'una bústia de correu.

==== git apply

La comanda git apply aplica un pegat creat amb la comanda git diff o fins i tot la comanda GNU diff.
És similar al que la comanda patch podria fer amb algunes petites diferències.

Mostrem com utilitzar-la i les circumstàncies en les quals podríeu fer-ho a <<ch05-distributed-git#_patches_from_email>>.

==== git am

La comanda git am s'utilitza per aplicar pegats d'una bústia de correu, específicament una que està en format mbox.
Això és útil per rebre pegats per correu electrònic i aplicar-los al vostre projecte fàcilment.

Vam cobrir l'ús i el flux de treball al voltant de git am a <<ch05-distributed-git#_git_am>> incloent l'ús de les opcions --resolved, -i i -3.

També hi ha una sèrie de ganxos que podeu utilitzar per ajudar amb el flux de treball al voltant de git am i tots estan coberts a <<ch08-customizing-git#_email_hooks>>.

També l'utilitzem per aplicar canvis de sol·licitud de tirada de GitHub en format de pegat a <<ch06-github#_email_notifications>>.

==== git format-patch

La comanda git format-patch s'utilitza per generar una sèrie de pegats en format mbox que podeu utilitzar per enviar a una llista de correu correctament formatada.

Passem per un exemple de contribució a un projecte utilitzant l'eina git format-patch a <<ch05-distributed-git#_project_over_email>>.

==== git imap-send

La comanda git imap-send puja una bústia generada amb git format-patch a una carpeta d'esborranys IMAP.

Passem per un exemple de contribució a un projecte enviant pegats amb l'eina git imap-send a <<ch05-distributed-git#_project_over_email>>.

==== git send-email

La comanda git send-email s'utilitza per enviar pegats que es generen amb git format-patch per correu electrònic.

Passem per un exemple de contribució a un projecte enviant pegats amb l'eina git send-email a <<ch05-distributed-git#_project_over_email>>.

==== git request-pull

La comanda git request-pull simplement s'utilitza per generar un cos de missatge d'exemple per enviar per correu electrònic a algú.
Si teniu una branca en un servidor públic i voleu fer saber a algú com integrar aquests canvis sense enviar els pegats per correu electrònic, podeu executar aquesta comanda i enviar la sortida a la persona a qui voleu que obtingui els canvis.

Mostrem com utilitzar git request-pull per generar un missatge de pull a <<ch05-distributed-git#_public_project>>.

=== Sistemes Externs

Git ve amb unes quantes comandes per integrar-se amb altres sistemes de control de versions.

==== git svn

La comanda git svn s'utilitza per comunicar-se amb el sistema de control de versions Subversion com a client.
Això significa que podeu utilitzar Git per fer checkout i commit a un servidor Subversion.

Aquesta comanda està coberta en profunditat a <<ch09-git-and-other-systems#_git_svn>>.

==== git fast-import

Per a altres sistemes de control de versions o importar des de gairebé qualsevol format, podeu utilitzar git fast-import per mapear ràpidament l'altre format a alguna cosa que Git pugui registrar fàcilment.

Aquesta comanda està coberta en profunditat a <<ch09-git-and-other-systems#_custom_importer>>.

=== Administració

Si esteu administrant un repositori Git o necessiteu corregir alguna cosa de manera important, Git proporciona una sèrie de comandes administratives per ajudar-vos.

==== git gc

La comanda git gc executa la "recol·lecció de brossa" al vostre repositori, eliminant fitxers innecessaris a la vostra base de dades i empaquetant els fitxers restants en un format més eficient.

Aquesta comanda normalment s'executa en segon pla per a vosaltres, tot i que podeu executar-la manualment si ho desitgeu.
Passem per alguns exemples d'això a <<ch10-git-internals#_git_gc>>.

==== git fsck

La comanda git fsck s'utilitza per comprovar la base de dades interna en busca de problemes o inconsistències.

Només utilitzem això ràpidament una vegada a <<ch10-git-internals#_data_recovery>> per buscar objectes penjants.

==== git reflog

La comanda git reflog passa per un registre de on han estat tots els caps de les vostres branques mentre treballeu per trobar confirmacions que podríeu haver perdut a través de la reescriptura d'històries.

Cobrim aquesta comanda principalment a <<ch07-git-tools#_git_reflog>>, on mostrem l'ús normal i com utilitzar git log -g per veure la mateixa informació amb la sortida de git log.

També passem per un exemple pràctic de recuperar una branca perduda d'aquesta manera a <<ch10-git-internals#_data_recovery>>.

==== git filter-branch

La comanda git filter-branch s'utilitza per reescriure moltes confirmacions segons certs patrons, com eliminar un fitxer a tot arreu o filtrar tot el repositori fins a un únic subdirectori per extreure un projecte.

A <<ch07-git-tools#_removing_file_every_commit>> expliquem la comanda i explorem diverses opcions diferents com --commit-filter, --subdirectory-filter i --tree-filter.

A <<ch09-git-and-other-systems#_git_p4>> l'utilitzem per corregir repositoris externs importats.

=== Comandes de Fontaneria

També hi havia bastants comandes de fontaneria de nivell inferior que vam trobar al llibre.

La primera que trobem és ls-remote a <<ch06-github#_pr_refs>> que utilitzem per mirar les referències en brut al servidor.

Utilitzem ls-files a <<ch07-git-tools#_manual_remerge>>, <<ch07-git-tools#ref_rerere>> i <<ch07-git-tools#_the_index>> per fer una mirada més en brut a com és la vostra àrea de preparació.

També esmentem rev-parse a <<ch07-git-tools#_branch_references>> per prendre gairebé qualsevol cadena i convertir-la en un SHA-1 d'objecte.

Tanmateix, la majoria de les comandes de fontaneria de nivell baix que cobrim estan a <<ch10-git-internals#ch10-git-internals>>, que és més o menys en què es centra el capítol.
Vam intentar evitar el seu ús al llarg de la resta del llibre.