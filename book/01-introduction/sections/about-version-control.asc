=== Sobre el control de versions

(((version control)))
Què és el "control de versions" i per què hauria d’importar-te?
El control de versions és un sistema que registra els canvis fets a un fitxer o conjunt de fitxers al llarg del temps, de manera que puguis recuperar versions específiques més endavant.
En els exemples d’aquest llibre, faràs servir codi font de programari com a fitxers sota control de versions, tot i que en realitat pots fer-ho amb gairebé qualsevol tipus de fitxer en un ordinador.

Si ets dissenyador gràfic o web i vols conservar cada versió d’una imatge o disseny (cosa que gairebé segur que voldràs fer), un Sistema de Control de Versions (VCS) és una eina molt encertada.
Et permet revertir fitxers seleccionats a un estat anterior, tornar tot el projecte a un estat anterior, comparar els canvis al llarg del temps, veure qui va modificar alguna cosa que pot estar causant un problema, qui va introduir un error i quan, i molt més.
Fer servir un VCS també sol significar que si espatlles alguna cosa o perds fitxers, els pots recuperar fàcilment.
A més, obtens tot això amb molt poc cost afegit.

==== Sistemes de control de versions locals

(((version control,local)))
El mètode de control de versions que molta gent utilitza és copiar els fitxers en un altre directori (potser amb una marca de temps, si són enginyosos).
Aquest mètode és molt comú perquè és molt senzill, però també és increïblement propens a errors.
És fàcil oblidar en quin directori ets i sobreescriure fitxers accidentalment o copiar sobre fitxers que no volies modificar.

Per solucionar aquest problema, fa temps que els programadors van desenvolupar sistemes VCS locals que disposaven d’una base de dades senzilla per registrar tots els canvis dels fitxers sota control de versions.

.Diagrama de control de versions local
image::images/local.png[Local version control diagram]

Una de les eines VCS més populars era un sistema anomenat RCS, que encara avui s’inclou en molts ordinadors.
https://www.gnu.org/software/rcs/[RCS^] funciona desant conjunts de pedaços (és a dir, les diferències entre fitxers) en un format especial al disc; després pot recrear com era qualsevol fitxer en un moment determinat aplicant tots els pedaços.

==== Sistemes de control de versions centralitzats

(((version control,centralized)))
El següent gran problema amb què es troben les persones és la necessitat de col·laborar amb desenvolupadors en altres sistemes.
Per solucionar aquest problema, es van desenvolupar els Sistemes de Control de Versions Centralitzats (CVCS).
Aquests sistemes (com CVS, Subversion i Perforce) tenen un únic servidor que conté tots els fitxers versionats, i diversos clients que descarreguen fitxers des d’aquest lloc central.(((CVS)))(((Subversion)))(((Perforce)))
Durant molts anys, aquest ha estat l’estàndard en el control de versions.

.Diagrama de control de versions centralitzat
image::images/centralized.png[Centralized version control diagram]

Aquesta configuració ofereix molts avantatges, especialment comparada amb els VCS locals.
Per exemple, tothom sap, fins a cert punt, què està fent la resta de l’equip.
Els administradors tenen un control molt precís sobre qui pot fer què, i és molt més fàcil administrar un CVCS que no pas bases de dades locals en cada client.

Tanmateix, aquesta configuració també té inconvenients importants.
El més evident és que el servidor central és un únic punt de fallada.
Si aquest servidor deixa de funcionar durant una hora, durant aquesta hora ningú pot col·laborar ni desar canvis versionats de cap mena.
Si el disc dur amb la base de dades central es corromp i no s’han fet còpies de seguretat adequades, es perd absolutament tot: tot l’historial del projecte, llevat dels instantanis que algunes persones tinguin localment.
Els VCS locals tenen el mateix problema: sempre que l’historial complet del projecte es trobi en un únic lloc, es corre el risc de perdre-ho tot.

==== Sistemes de control de versions distribuïts

(((version control,distributed)))
Aquí és on entren en joc els Sistemes de Control de Versions Distribuïts (DVCS).
En un DVCS (com Git, Mercurial o Darcs), els clients no només descarreguen l’última instantània dels fitxers; més aviat, repliquen completament el repositori, incloent-hi tot l’historial.
Així, si un servidor falla, i aquests sistemes col·laboraven mitjançant aquell servidor, qualsevol dels repositoris client pot ser copiat de nou al servidor per restaurar-lo.
Cada clon és, en realitat, una còpia de seguretat completa de totes les dades.

.Diagrama de control de versions distribuït
image::images/distributed.png[Distributed version control diagram]

A més, molts d’aquests sistemes gestionen força bé tenir diversos repositoris remots amb els quals poden treballar, de manera que pots col·laborar amb diferents grups de persones de diferents maneres al mateix projecte.
Això permet configurar diversos tipus de fluxos de treball que no són possibles amb sistemes centralitzats, com ara models jeràrquics.