=== Sobre el control de versions

(((version control)))
Què és el "`control de versions`", i per què t'hauria d'importar?
El control de versions és un sistema que registra els canvis en un fitxer o conjunt de fitxers al llarg del temps perquè puguis recuperar versions específiques més tard.
Per als exemples d'aquest llibre, utilitzaràs codi font com a fitxers sota control de versions, tot i que en realitat pots fer-ho amb gairebé qualsevol tipus de fitxer en un ordinador.

Si ets dissenyador gràfic o web i vols conservar cada versió d'una imatge o disseny (cosa que gairebé segur voldràs fer), un sistema de control de versions (VCS) és una eina molt intel·ligent d'utilitzar.
Et permet revertir fitxers seleccionats a un estat anterior, revertir tot el projecte, comparar canvis al llarg del temps, veure qui va modificar per última vegada alguna cosa que pot estar causant un problema, qui va introduir un problema i quan, i molt més.
Utilitzar un VCS també sol significar que, si espatllem alguna cosa o perdem fitxers, podem recuperar-los fàcilment.
A més, tot això amb un cost molt baix.

==== Sistemes locals de control de versions

(((version control,local)))
El mètode de control de versions que molta gent utilitza consisteix a copiar fitxers a un altre directori (potser amb data i hora, si són llestos).
Aquest enfocament és molt comú perquè és molt simple, però també és increïblement propens a errors.
És fàcil oblidar en quin directori estàs i escriure accidentalment en el fitxer incorrecte o sobreescriure fitxers per error.

Per resoldre aquest problema, fa temps que els programadors van desenvolupar sistemes locals de control de versions amb una base de dades senzilla que registrava tots els canvis als fitxers sota control.

.Diagrama de control de versions local
image::images/local.png[Local version control diagram]

Una de les eines de control de versions més populars va ser un sistema anomenat RCS, que encara avui es distribueix amb molts ordinadors.
https://www.gnu.org/software/rcs/[RCS^] funciona mantenint conjunts de canvis (és a dir, les diferències entre fitxers) en un format especial al disc; després pot recrear com era qualsevol fitxer en qualsevol moment afegint tots els canvis.

==== Sistemes centralitzats de control de versions

(((version control,centralized)))
El següent gran problema que es troben les persones és la necessitat de col·laborar amb desenvolupadors d'altres sistemes.
Per resoldre aquest problema es van desenvolupar els sistemes centralitzats de control de versions (CVCS).
Aquests sistemes (com CVS, Subversion i Perforce) tenen un únic servidor que conté tots els fitxers versionats i un conjunt de clients que obtenen fitxers d'aquest lloc central.(((CVS)))(((Subversion)))(((Perforce)))
Durant molts anys, aquest ha estat l'estàndard en el control de versions.

.Diagrama de control de versions centralitzat
image::images/centralized.png[Centralized version control diagram]

Aquesta configuració ofereix molts avantatges, especialment comparat amb els sistemes locals.
Per exemple, tothom sap en certa manera què estan fent els altres membres del projecte.
Els administradors tenen control detallat sobre qui pot fer què, i és molt més fàcil administrar un CVCS que gestionar bases de dades locals a cada client.

Tanmateix, aquesta configuració també té desavantatges importants.
El més evident és el punt únic de fallada que representa el servidor centralitzat.
Si aquest servidor deixa de funcionar durant una hora, durant aquella hora ningú podrà col·laborar ni desar canvis versionats.
Si el disc dur que conté la base de dades central es corromp i no s’han fet còpies de seguretat, es perd absolutament tot — tota la història del projecte excepte les còpies locals que algunes persones puguin tenir.
Els sistemes locals pateixen aquest mateix problema — cada cop que tens tota la història del projecte en un sol lloc, corres el risc de perdre-ho tot.

==== Sistemes distribuïts de control de versions

(((version control,distributed)))
Aquí és on entren en joc els sistemes distribuïts de control de versions (DVCS).
En un DVCS (com Git, Mercurial o Darcs), els clients no només obtenen l'última versió dels fitxers; en realitat, repliquen completament el repositori, incloent-hi tota la seva història.
Així, si un servidor mor, i aquests sistemes col·laboraven mitjançant aquell servidor, qualsevol dels repositoris clients es pot copiar al servidor per restaurar-lo.
Cada clon és realment una còpia de seguretat completa de totes les dades.

.Diagrama de control de versions distribuït
image::images/distributed.png[Distributed version control diagram]

A més, molts d'aquests sistemes gestionen bé tenir diversos repositoris remots amb què poden treballar, de manera que pots col·laborar amb diferents grups de persones de maneres diferents simultàniament dins del mateix projecte.
Això et permet establir diversos tipus de fluxos de treball que no són possibles amb sistemes centralitzats, com ara models jeràrquics.
