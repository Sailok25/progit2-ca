[[what_is_git_section]]
=== Què és Git?

Doncs, què és Git en poques paraules?
Aquesta és una secció important per assimilar, perquè si entens què és Git i els fonaments de com funciona, llavors utilitzar Git de manera efectiva probablement serà molt més fàcil per a tu.
Mentre aprens Git, intenta buidar la ment de les coses que puguis saber d’altres sistemes de control de versions (VCS), com CVS, Subversion o Perforce — fer-ho t’ajudarà a evitar confusions subtils quan utilitzis aquesta eina.
Tot i que la interfície d’usuari de Git és força similar a la d’aquests altres VCS, Git emmagatzema i pensa la informació d’una manera molt diferent, i entendre aquestes diferències t’ajudarà a no confondre’t mentre l’utilitzes.(((Subversion)))(((Perforce)))

==== Instantànies, no diferències

La principal diferència entre Git i qualsevol altre VCS (incloent-hi Subversion i companyia) és la manera com Git pensa en les seves dades.
Conceptualment, la majoria d’altres sistemes emmagatzemen informació com una llista de canvis basats en fitxers.
Aquests altres sistemes (CVS, Subversion, Perforce, etc.) consideren la informació que emmagatzemen com un conjunt de fitxers i els canvis fets a cada fitxer al llarg del temps (això es descriu comunament com a control de versions basat en _deltas_).

.Emmagatzemar dades com canvis respecte a una versió base de cada fitxer
image::images/deltas.png[Emmagatzemar dades com canvis respecte a una versió base de cada fitxer]

Git no pensa ni emmagatzema les seves dades així.
En canvi, Git pensa les seves dades més com una sèrie d’instantànies d’un mini sistema de fitxers.
Amb Git, cada vegada que fas un commit, o guardes l’estat del teu projecte, Git bàsicament fa una foto de com són tots els teus fitxers en aquell moment i emmagatzema una referència a aquesta instantània.
Per ser eficient, si els fitxers no han canviat, Git no els emmagatzema de nou, només un enllaç al fitxer idèntic anterior que ja té guardat.
Git pensa en les seves dades més com un *flux d’instantànies*.

.Emmagatzemar dades com instantànies del projecte al llarg del temps
image::images/snapshots.png[Git emmagatzema dades com instantànies del projecte al llarg del temps]

Aquesta és una distinció important entre Git i gairebé tots els altres VCS.
Fa que Git reconsideri gairebé tots els aspectes del control de versions que la majoria d’altres sistemes han copiat de la generació anterior.
Això fa que Git sigui més com un mini sistema de fitxers amb eines molt potents construïdes a sobre, més que un simple VCS.
Explorarem alguns dels avantatges d’aquest enfocament quan cobrim el ramificat de Git a <<ch03-git-branching#ch03-git-branching>>.

==== Gairebé totes les operacions són locals

La majoria d’operacions en Git només necessiten fitxers i recursos locals per funcionar — generalment no es necessita cap informació d’un altre ordinador a la xarxa.
Si estàs acostumat a un sistema centralitzat (CVCS) on la majoria d’operacions tenen la latència de xarxa, aquest aspecte de Git et farà pensar que els déus de la velocitat han beneït Git amb poders sobrenaturals.
Com que tens tota la història del projecte a la teva unitat local, la majoria d’operacions semblen gairebé instantànies.

Per exemple, per navegar per la història del projecte, Git no ha d’anar al servidor a buscar la història i mostrar-la — simplement la llegeix directament de la teva base de dades local.
Això vol dir que veus la història del projecte gairebé al moment.
Si vols veure els canvis introduïts entre la versió actual d’un fitxer i la d’un mes enrere, Git pot recuperar el fitxer d’un mes enrere i fer un càlcul de diferències local, en comptes d’haver de demanar a un servidor remot que ho faci o baixar una versió antiga del fitxer des del servidor per fer-ho localment.

Això també significa que gairebé no hi ha res que no puguis fer si estàs sense connexió o sense VPN.
Si agafes un avió o tren i vols fer una mica de feina, pots fer commits tranquil·lament (a la teva còpia _local_, recorda) fins que tinguis connexió per pujar.
Si arribes a casa i no pots fer funcionar el client VPN, encara pots treballar.
En molts altres sistemes, això és impossible o molest.
A Perforce, per exemple, no pots fer gaire cosa si no estàs connectat al servidor; a Subversion i CVS, pots editar fitxers, però no pots fer commits perquè la base de dades està fora de línia.
Pot semblar un detall menor, però et sorprendrà la gran diferència que fa.

==== Git té integritat

Tot a Git es comprova amb un checksum abans d’emmagatzemar-se i després s’hi fa referència per aquest checksum.
Això significa que és impossible canviar el contingut d’un fitxer o directori sense que Git s’adoni.
Aquesta funcionalitat està integrada a Git a un nivell molt baix i forma part integral de la seva filosofia.
No es pot perdre informació durant la transmissió ni tenir corrupció de fitxers sense que Git pugui detectar-ho.

El mecanisme que Git usa per a aquest checksum és anomenat hash SHA-1.(((SHA-1)))
És una cadena de 40 caràcters formada per caràcters hexadecimals (0–9 i a–f) i es calcula basant-se en el contingut d’un fitxer o estructura de directori en Git.
Un hash SHA-1 és una cosa així:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Veureu aquests valors de hash a tot arreu en Git perquè s’utilitzen molt.
De fet, Git emmagatzema tot a la seva base de dades no pel nom del fitxer sinó pel valor hash del seu contingut.

==== Git generalment només afegeix dades

Quan fas accions a Git, gairebé totes només _afegeixen_ dades a la base de dades de Git.
És difícil fer que el sistema faci alguna cosa que no es pugui desfer o que esborri dades d’alguna manera.
Com qualsevol VCS, pots perdre o malmetre canvis que encara no hagis fet commit, però un cop fas commit d’una instantània a Git, és molt difícil perdre-la, especialment si habitualment fas push de la base de dades a un altre repositori.

Això fa que usar Git sigui un plaer perquè sabem que podem experimentar sense el perill de fer un desastre greu.
Per una mirada més profunda a com Git emmagatzema les seves dades i com pots recuperar dades que semblen perdudes, consulta <<ch02-git-basics-chapter#_undoing>>.

==== Els tres estats

Atén ara — aquesta és la cosa principal que cal recordar sobre Git si vols que la resta de l’aprenentatge vagi bé.
Git té tres estats principals en què poden estar els teus fitxers: _modificat_, _preparat_ (staged) i _committed_:

* Modificat significa que has canviat el fitxer però encara no l’has compromès a la base de dades.
* Preparat significa que has marcat un fitxer modificat en la seva versió actual perquè entri a la teva propera instantània de commit.
* Commitat significa que les dades estan segures i emmagatzemades a la teva base de dades local.

Això ens porta a les tres seccions principals d’un projecte Git: l’arbre de treball, l’àrea d’indexació i el directori Git.

.Arbre de treball, àrea d’indexació i directori Git
image::images/areas.png["Arbre de treball, àrea d’indexació i directori Git"]

L’arbre de treball és una única còpia d’una versió del projecte.
Aquests fitxers es treuen de la base de dades comprimida del directori Git i es posen al disc perquè els puguis usar o modificar.

L’àrea d’indexació és un fitxer, generalment dins del directori Git, que emmagatzema informació sobre què anirà a la teva propera instantània de commit.
El seu nom tècnic en la terminologia de Git és el "`index`", però la frase "`àrea d’indexació`" funciona igual de bé.

El directori Git és on Git guarda les metadades i la base de dades d’objectes del projecte.
Aquesta és la part més important de Git, i és el que es copia quan _clone_ un repositori d’un altre ordinador.

El flux bàsic de treball a Git va més o menys així:

1. Modifiques fitxers a l’arbre de treball.
2. Seleccionadament prepares només aquells canvis que vols que formin part del teu proper commit, que afegeix _només_ aquests canvis a l’àrea d’indexació.
3. Fas un commit, que agafa els fitxers tal com són a l’àrea d’indexació i emmagatzema permanentment aquesta instantània al directori Git.

Si una versió concreta d’un fitxer està al directori Git, es considera _committed_.
Si ha estat modificat i afegit a l’àrea d’indexació, està _preparat_.
I si ha canviat des que es va fer el checkout però no està preparat, està _modificat_.
A <<ch02-git-basics-chapter#ch02-git-basics-chapter>>, aprendràs més sobre aquests estats i com pots aprofitar-los o saltar completament la part de preparar.