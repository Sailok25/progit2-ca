[[_first_time]]
=== Configuració inicial de Git

Ara que tens Git al teu sistema, voldràs fer algunes coses per personalitzar el teu entorn Git.
Aquestes accions només les hauràs de fer una vegada per ordinador; es mantindran entre actualitzacions.
També pots canviar-les en qualsevol moment tornant a executar les comandes.

Git inclou una eina anomenada `git config` que et permet obtenir i establir variables de configuració que controlen tots els aspectes de com es veu i opera Git.(((git commands, config)))
Aquestes variables poden emmagatzemar-se en tres llocs diferents:

1. Fitxer `[path]/etc/gitconfig`: Conté valors aplicats a tots els usuaris del sistema i a tots els seus repositoris.
  Si passes l'opció `--system` a `git config`, llegirà i escriurà específicament en aquest fitxer.
  Com que és un fitxer de configuració del sistema, necessites privilegis administratius o de superusuari per fer-hi canvis.
2. Fitxer `~/.gitconfig` o `~/.config/git/config`: Valors específicament teus, com a usuari.
  Pots fer que Git llegeixi i escrigui aquest fitxer específicament passant l'opció `--global`, i això afecta _tots_ els repositoris amb què treballis al teu sistema.
3. Fitxer `config` dins del directori Git (és a dir, `.git/config`) del repositori que estiguis utilitzant actualment: Específic per a aquest únic repositori.
  Pots forçar Git a llegir i escriure aquest fitxer amb l'opció `--local`, però aquest és el valor predeterminat.
  Com era d'esperar, cal que estiguis ubicat dins d’un repositori Git perquè aquesta opció funcioni correctament.

Cada nivell sobreescriu els valors del nivell anterior, així que els valors de `.git/config` tenen prioritat sobre els de `[path]/etc/gitconfig`.

En sistemes Windows, Git busca el fitxer `.gitconfig` al directori `$HOME` (`C:\Users\$USER` per a la majoria de gent).
També busca `[path]/etc/gitconfig`, tot i que és relatiu a l'arrel de MSys, que és on decideixis instal·lar Git al teu sistema Windows quan executis l'instal·lador.
Si estàs utilitzant la versió 2.x o posterior de Git per a Windows, també hi ha un fitxer de configuració a nivell de sistema a `C:\Documents and Settings\All Users\Application Data\Git\config` a Windows XP, i a `C:\ProgramData\Git\config` a Windows Vista i versions posteriors.
Aquest fitxer de configuració només es pot modificar amb `git config -f <file>` com a administrador.

Pots veure totes les teves configuracions i d'on provenen utilitzant:

[source,console]
----
$ git config --list --show-origin
----

==== La teva identitat

La primera cosa que has de fer quan instal·lis Git és establir el teu nom d'usuari i adreça electrònica.
Això és important perquè cada *commit* de Git utilitza aquesta informació, i queda immutablement registrada en els *commits* que comencis a crear:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Un altre cop, només cal fer-ho una vegada si passes l'opció `--global`, perquè aleshores Git sempre utilitzarà aquesta informació per a l'usuari al sistema.
Si vols sobreescriure això amb un nom o adreça electrònica diferent per a projectes concrets, pots executar la comanda sense l'opció `--global` quan estiguis dins d'aquest projecte.

Moltes eines gràfiques t’ajudaran a fer això la primera vegada que les executis.

[[_editor]]
==== El teu editor

Ara que la teva identitat està configurada, pots configurar l’editor de text per defecte que s’utilitzarà quan Git necessiti que escriguis un missatge.
Si no el configures, Git utilitzarà l'editor per defecte del sistema.

Si vols utilitzar un editor diferent, com per exemple Emacs, pots fer el següent:

[source,console]
----
$ git config --global core.editor emacs
----

En un sistema Windows, si vols utilitzar un editor de text diferent, has d’especificar la ruta completa de l’executable.
Això pot variar segons com s'hagi empaquetat l'editor.

En el cas de Notepad++, un editor popular entre programadors, és probable que vulguis utilitzar la versió de 32 bits, ja que en el moment d'escriure això la versió de 64 bits no admet tots els *plug-ins*.
Si estàs en un sistema Windows de 32 bits, o tens un editor de 64 bits en un sistema de 64 bits, escriuràs una cosa així:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOTE]
====
Vim, Emacs i Notepad++ són editors de text populars sovint utilitzats per desenvolupadors en sistemes Unix com Linux i macOS o en sistemes Windows.
Si estàs utilitzant un altre editor, o una versió de 32 bits, consulta les instruccions específiques per configurar el teu editor preferit amb Git a <<C-git-commands#ch_core_editor>>.
====

[WARNING]
====
Si no configures el teu editor d’aquesta manera, pots acabar en una situació molt confusa quan Git intenti obrir-lo.
Un exemple en un sistema Windows podria ser una operació Git que es cancel·la prematurament durant una edició iniciada per Git.
====

[[_new_default_branch]]
==== El teu nom de branca per defecte

Per defecte, Git crearà una branca anomenada _master_ quan creïs un nou repositori amb `git init`.
Des de la versió 2.28 de Git, pots establir un nom diferent per a la branca inicial.

Per establir _main_ com a nom de branca per defecte, fes:

[source,console]
----
$ git config --global init.defaultBranch main
----

==== Comprovació de la configuració

Si vols comprovar la configuració, pots utilitzar la comanda `git config --list` per veure tots els paràmetres que Git troba en aquell moment:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

És possible que vegis claus més d'una vegada, perquè Git pot llegir la mateixa clau des de fitxers diferents (`[path]/etc/gitconfig` i `~/.gitconfig`, per exemple).
En aquest cas, Git utilitza l’últim valor per a cada clau única que troba.

També pots comprovar quin valor assigna Git a una clau específica escrivint `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Com que Git pot llegir el valor d’una variable de configuració des de més d’un fitxer, és possible que obtinguis un valor inesperat i no sàpigues per què.
En aquests casos, pots demanar a Git que t’indiqui l’_origen_ del valor, i et dirà quin fitxer de configuració va tenir l’última paraula:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
