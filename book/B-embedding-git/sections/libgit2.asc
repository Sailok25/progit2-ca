=== Libgit2

(((libgit2)))((("C")))
Una altra opció a la vostra disposició és utilitzar Libgit2.
Libgit2 és una implementació de Git sense dependències, amb un enfocament en tenir una bona API per a l'ús dins d'altres programes.
El podeu trobar a https://libgit2.org[^].

Primer, fem un cop d'ull a com és l'API de C.
Aquí teniu un tour ràpid:

[source,c]
----
// Open a repository
git_repository *repo;
int error = git_repository_open(&repo, "/path/to/repository");

// Dereference HEAD to a commit
git_object *head_commit;
error = git_revparse_single(&head_commit, repo, "HEAD^{commit}");
git_commit *commit = (git_commit*)head_commit;

// Print some of the commit's properties
printf("%s", git_commit_message(commit));
const git_signature *author = git_commit_author(commit);
printf("%s <%s>\n", author->name, author->email);
const git_oid *tree_id = git_commit_tree_id(commit);

// Cleanup
git_commit_free(commit);
git_repository_free(repo);
----

Les primeres línies obren un repositori Git.
El tipus `git_repository` representa un gestor d'un repositori amb una memòria cau a la memòria.
Això és el mètode més simple, per quan coneixeu el camí exacte a un directori de treball del repositori o a la carpeta `.git`.
També hi ha el `git_repository_open_ext` que inclou opcions per a la cerca, `git_clone` i similars per fer un clon local d'un repositori remot, i `git_repository_init` per crear un repositori completament nou.

El segon tros de codi utilitza la sintaxi rev-parse (vegeu <<ch07-git-tools#_branch_references>> per a més informació sobre això) per obtenir el commit al qual finalment apunta HEAD.
El tipus retornat és un punter `git_object`, que representa alguna cosa que existeix a la base de dades d'objectes Git per a un repositori.
`git_object` és en realitat un tipus "`pare`" per a diversos tipus diferents d'objectes; la disposició de memòria per a cadascun dels tipus "`fill`" és la mateixa que per a `git_object`, així que podeu fer un cast segur al correcte.
En aquest cas, `git_object_type(commit)` retornaria `GIT_OBJ_COMMIT`, així que és segur fer un cast a un punter `git_commit`.

El següent tros mostra com accedir a les propietats del commit.
L'última línia aquí utilitza un tipus `git_oid`; aquesta és la representació de Libgit2 per a un hash SHA-1.

D'aquest exemple, han començat a sorgir alguns patrons:

* Si declareu un punter i passeu una referència a ell a una crida de Libgit2, aquesta crida probablement retornarà un codi d'error enter.
  Un valor `0` indica èxit; qualsevol cosa menys és un error.
* Si Libgit2 omple un punter per a vosaltres, sou responsables d'alliberar-lo.
* Si Libgit2 retorna un punter `const` d'una crida, no heu d'alliberar-lo, però es tornarà invàlid quan l'objecte al qual pertany sigui alliberat.
* Escriure en C és una mica dolorós.

Aquest últim significa que no és molt probable que esteu escrivint en C quan utilitzeu Libgit2.
Afortunadament, hi ha una sèrie d'enllaços específics de llenguatge disponibles que fan que sigui bastant fàcil treballar amb repositoris Git des del vostre llenguatge i entorn específics.
Fem un cop d'ull a l'exemple anterior escrit utilitzant els enllaços de Ruby per a Libgit2, que es diuen Rugged, i es poden trobar a https://github.com/libgit2/rugged[^].

[source,ruby]
----
repo = Rugged::Repository.new('path/to/repository')
commit = repo.head.target
puts commit.message
puts "#{commit.author[:name]} <#{commit.author[:email]}>"
tree = commit.tree
----

Com podeu veure, el codi està molt menys desordenat.
En primer lloc, Rugged utilitza excepcions; pot llançar coses com `ConfigError` o `ObjectError` per senyalitzar condicions d'error.
En segon lloc, no hi ha alliberament explícit de recursos, ja que Ruby està subjecte a recollida de fem.
Fem un cop d'ull a un exemple una mica més complicat: crear un commit des de zero.

[source,ruby]
----
blob_id = repo.write("Blob contents", :blob) # <1>

index = repo.index
index.read_tree(repo.head.target.tree)
index.add(:path => 'newfile.txt', :oid => blob_id) # <2>

sig = {
    :email => "bob@example.com",
    :name => "Bob User",
    :time => Time.now,
}

commit_id = Rugged::Commit.create(repo,
    :tree => index.write_tree(repo), # <3>
    :author => sig,
    :committer => sig, # <4>
    :message => "Add newfile.txt", # <5>
    :parents => repo.empty? ? [] : [ repo.head.target ].compact, # <6>
    :update_ref => 'HEAD', # <7>
)
commit = repo.lookup(commit_id) # <8>
----

<1> Crea un nou blob, que conté els continguts d'un nou fitxer.
<2> Omple l'índex amb l'arbre del commit cap, i afegeix el nou fitxer al camí `newfile.txt`.
<3> Això crea un nou arbre a l'ODB, i l'utilitza per al nou commit.
<4> Utilitzem la mateixa signatura per als camps d'autor i committer.
<5> El missatge del commit.
<6> En crear un commit, heu d'especificar els pares del nou commit.
    Això utilitza la punta de HEAD per al pare únic.
<7> Rugged (i Libgit2) poden actualitzar opcionalment una referència en fer un commit.
<8> El valor de retorn és el hash SHA-1 d'un nou objecte commit, que després podeu utilitzar per obtenir un objecte `Commit`.

El codi Ruby és net i clar, però com que Libgit2 està fent la feina pesada, aquest codi també s'executarà bastant ràpid.
Si no sou un rubista, tractarem alguns altres enllaços a <<_libgit2_bindings>>.

==== Funcionalitat Avançada

Libgit2 té algunes capacitats que estan fora de l'abast del Git principal.
Un exemple és la capacitat de connectar: Libgit2 us permet proporcionar "`backends`" personalitzats per a diversos tipus d'operació, així que podeu emmagatzemar les coses d'una manera diferent a com ho fa Git per defecte.
Libgit2 permet backends personalitzats per a la configuració, l'emmagatzematge de referències i la base de dades d'objectes, entre altres coses.

Fem un cop d'ull a com funciona això.
El codi següent està pres de l'exemple de backends proporcionat per l'equip de Libgit2 (que es pot trobar a https://github.com/libgit2/libgit2-backends[^]).
Aquí teniu com es configura un backend personalitzat per a la base de dades d'objectes:

[source,c]
----
git_odb *odb;
int error = git_odb_new(&odb); // <1>

git_odb_backend *my_backend;
error = git_odb_backend_mine(&my_backend, /*…*/); // <2>

error = git_odb_add_backend(odb, my_backend, 1); // <3>

git_repository *repo;
error = git_repository_open(&repo, "some-path");
error = git_repository_set_odb(repo, odb); // <4>
----

_Nota que els errors es capturen, però no es gestionen. Esperem que el vostre codi sigui millor que el nostre._

<1> Inicialitza una base de dades d'objectes (ODB) "`frontend`" buida, que actuarà com a contenidor per als "`backends`" que són els que fan la feina real.
<2> Inicialitza un backend ODB personalitzat.
<3> Afegeix el backend al frontend.
<4> Obri un repositori i el configura per utilitzar el nostre ODB per buscar objectes.

Però què és aquesta cosa `git_odb_backend_mine`?
Bé, això és el constructor per a la vostra pròpia implementació ODB, i podeu fer el que vulgueu allà, sempre que ompliu l'estructura `git_odb_backend` correctament.
Aquí teniu com podria semblar:

[source,c]
----
typedef struct {
    git_odb_backend parent;

    // Some other stuff
    void *custom_context;
} my_backend_struct;

int git_odb_backend_mine(git_odb_backend **backend_out, /*…*/)
{
    my_backend_struct *backend;

    backend = calloc(1, sizeof (my_backend_struct));

    backend->custom_context = …;

    backend->parent.read = &my_backend__read;
    backend->parent.read_prefix = &my_backend__read_prefix;
    backend->parent.read_header = &my_backend__read_header;
    // …

    *backend_out = (git_odb_backend *) backend;

    return GIT_SUCCESS;
}
----

La restricció més subtil aquí és que el primer membre de `my_backend_struct` ha de ser una estructura `git_odb_backend`; això assegura que la disposició de memòria sigui la que el codi de Libgit2 espera que sigui.
La resta és arbitrària; aquesta estructura pot ser tan gran o petita com necessiteu que sigui.

La funció d'inicialització assigna alguna memòria per a l'estructura, configura el context personalitzat, i després omple els membres de l'estructura `parent` que suporta.
Feu un cop d'ull al fitxer `include/git2/sys/odb_backend.h` al codi font de Libgit2 per obtenir un conjunt complet de signatures de crida; el vostre cas d'ús particular us ajudarà a determinar quins d'aquests voleu suportar.

[[_libgit2_bindings]]
==== Altres Enllaços

Libgit2 té enllaços per a molts llenguatges.
Aquí mostrem un petit exemple utilitzant alguns dels paquets d'enllaços més complets en el moment d'escriure això; hi ha llibreries per a molts altres llenguatges, incloent C++, Go, Node.js, Erlang, i la JVM, tots en diversos estats de maduresa.
La col·lecció oficial d'enllaços es pot trobar navegant pels repositoris a https://github.com/libgit2[^].
El codi que escriurem retornarà el missatge de commit del commit al qual finalment apunta HEAD (una mica com `git log -1`).

===== LibGit2Sharp

(((.NET)))(((C#)))(((Mono)))
Si esteu escrivint una aplicació .NET o Mono, LibGit2Sharp (https://github.com/libgit2/libgit2sharp[^]) és el que esteu buscant.
Els enllaços estan escrits en C#, i s'ha tingut molt de cura per embolicar les crides brutes de Libgit2 amb API de CLR natiu.
Aquí teniu com es veu el nostre programa d'exemple:

[source,csharp]
----
new Repository(@"C:\path\to\repo").Head.Tip.Message;
----

Per a aplicacions de Windows de sobretaula, fins i tot hi ha un paquet NuGet que us ajudarà a començar ràpidament.

===== objective-git

(((Apple)))(((Objective-C)))(((Cocoa)))
Si la vostra aplicació s'executa en una plataforma Apple, probablement esteu utilitzant Objective-C com a llenguatge d'implementació.
Objective-Git (https://github.com/libgit2/objective-git[^]) és el nom dels enllaços de Libgit2 per a aquest entorn.
El programa d'exemple es veu així:

[source,objc]
----
GTRepository *repo =
    [[GTRepository alloc] initWithURL:[NSURL fileURLWithPath: @"/path/to/repo"] error:NULL];
NSString *msg = [[[repo headReferenceWithError:NULL] resolvedTarget] message];
----

Objective-git és totalment interoperable amb Swift, així que no us preocupeu si heu deixat enrere Objective-C.

===== pygit2

(((Python)))
Els enllaços per a Libgit2 en Python es diuen Pygit2, i es poden trobar a https://www.pygit2.org[^].
El nostre programa d'exemple:

[source,python]
----
pygit2.Repository("/path/to/repo") # open repository
    .head                          # get the current branch
    .peel(pygit2.Commit)           # walk down to the commit
    .message                       # read the message
----

==== Lectura Addicional

Per descomptat, un tractament complet de les capacitats de Libgit2 està fora de l'abast d'aquest llibre.
Si voleu més informació sobre Libgit2, hi ha documentació de l'API a https://libgit2.github.com/libgit2[^], i un conjunt de guies a https://libgit2.github.com/docs[^].
Per als altres enllaços, consulteu el README inclòs i les proves; sovint hi ha petits tutorials i punters per a més lectura allà.