=== go-git

(((go-git)))(((Go)))
En cas que vulgueu integrar Git en un servei escrit en Golang, també hi ha una implementació de biblioteca pura en Go.
Aquesta implementació no té cap dependència nativa i, per tant, no és propensa a errors de gestió manual de memòria.
També és transparent per a les eines estàndard d'anàlisi de rendiment de Golang com els perfiladors de CPU, memòria, detector de condicions de carrera, etc.

go-git està enfocat en l'extensibilitat, la compatibilitat i suporta la majoria de les API de plumbing, les quals estan documentades a https://github.com/go-git/go-git/blob/master/COMPATIBILITY.md[^].

Aquí teniu un exemple bàsic d'ús de les API de Go:

[source, go]
----
import "github.com/go-git/go-git/v5"

r, err := git.PlainClone("/tmp/foo", false, &git.CloneOptions{
    URL:      "https://github.com/go-git/go-git",
    Progress: os.Stdout,
})
----

Un cop teniu una instància de `Repository`, podeu accedir a la informació i realitzar mutacions en ella:

[source, go]
----
// recupera la branca apuntada per HEAD
ref, err := r.Head()

// obté l'objecte commit, apuntat per ref
commit, err := r.CommitObject(ref.Hash())

// recupera l'historial de commits
history, err := commit.History()

// itera sobre els commits i imprimeix cadascun
for _, c := range history {
    fmt.Println(c)
}
----

==== Funcionalitat Avançada

go-git té algunes característiques avançades notables, una de les quals és un sistema d'emmagatzematge connectable, que és similar als backends de Libgit2.
La implementació per defecte és l'emmagatzematge en memòria, que és molt ràpid.

[source, go]
----
r, err := git.Clone(memory.NewStorage(), nil, &git.CloneOptions{
    URL: "https://github.com/go-git/go-git",
})
----

L'emmagatzematge connectable proporciona moltes opcions interessants.
Per exemple, https://github.com/go-git/go-git/tree/master/_examples/storage[^] us permet emmagatzemar referències, objectes i configuració en una base de dades Aerospike.

Una altra característica és una abstracció flexible del sistema de fitxers.
Utilitzant https://pkg.go.dev/github.com/go-git/go-billy/v5?tab=doc#Filesystem[^] és fàcil emmagatzemar tots els fitxers de diferents maneres, per exemple, empaquetant-los tots en un únic arxiu al disc o mantenint-los tots en memòria.

Un altre cas d'ús avançat inclou un client HTTP ajustable, com el que es troba a https://github.com/go-git/go-git/blob/master/_examples/custom_http/main.go[^].

[source, go]
----
customClient := &http.Client{
    Transport: &http.Transport{ // accepta qualsevol certificat (pot ser útil per a proves)
        TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
    },
    Timeout: 15 * time.Second,  // temps d'espera de 15 segons
        CheckRedirect: func(req *http.Request, via []*http.Request) error {
        return http.ErrUseLastResponse // no seguir la redirecció
    },
}

// Substitueix el protocol http(s) per defecte per utilitzar el nostre client personalitzat
client.InstallProtocol("https", githttp.NewClient(customClient))

// Clona el repositori utilitzant el nou client si el protocol és https://
r, err := git.Clone(memory.NewStorage(), nil, &git.CloneOptions{URL: url})
----

==== Lectura Addicional

Un tractament complet de les capacitats de go-git està fora de l'abast d'aquest llibre.
Si voleu més informació sobre go-git, hi ha documentació de l'API a https://pkg.go.dev/github.com/go-git/go-git/v5[^], i un conjunt d'exemples d'ús a https://github.com/go-git/go-git/tree/master/_examples[^].