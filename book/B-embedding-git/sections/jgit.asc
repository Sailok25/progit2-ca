=== JGit

(((jgit)))(((Java)))
Si voleu utilitzar Git des d'un programa Java, hi ha una biblioteca Git completa anomenada JGit.
JGit és una implementació relativament completa de Git escrita nativament en Java, i és àmpliament utilitzada a la comunitat Java.
El projecte JGit està sota l'ombrella d'Eclipse, i la seva pàgina principal es pot trobar a https://www.eclipse.org/jgit/[^].

==== Configuració Inicial

Hi ha diverses maneres de connectar el vostre projecte amb JGit i començar a escriure codi.
Probablement la més fàcil és utilitzar Maven: la integració s'aconsegueix afegint el següent fragment al tag `<dependencies>` al vostre fitxer `pom.xml`:

[source,xml]
----
<dependency>
    <groupId>org.eclipse.jgit</groupId>
    <artifactId>org.eclipse.jgit</artifactId>
    <version>3.5.0.201409260305-r</version>
</dependency>
----

La `version` probablement haurà avançat quan llegiu això; consulteu https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit[^] per obtenir informació actualitzada del repositori.
Un cop fet aquest pas, Maven adquirirà i utilitzarà automàticament les llibreries JGit que necessiteu.

Si preferiu gestionar les dependències binàries vosaltres mateixos, hi ha binaris preconstruïts de JGit disponibles a https://www.eclipse.org/jgit/download[^].
Podeu construir-los al vostre projecte executant un comandament com aquest:

[source,console]
----
javac -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App.java
java -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App
----

==== Plumbing

JGit té dos nivells bàsics d'API: plumbing i porcelain.
La terminologia per a aquests ve de Git mateix, i JGit està dividit en àrees aproximadament similars: les API de porcelain són una interfície amigable per a accions comunes a nivell d'usuari (el tipus de coses que un usuari normal utilitzaria l'eina de línia de comandos Git), mentre que les API de plumbing són per interactuar directament amb objectes de repositori de baix nivell.

El punt de partida per a la majoria de sessions de JGit és la classe `Repository`, i la primera cosa que voldreu fer és crear una instància d'aquesta.
Per a un repositori basat en el sistema de fitxers (sí, JGit permet altres models d'emmagatzematge), això s'aconsegueix utilitzant `FileRepositoryBuilder`:

[source,java]
----
// Create a new repository
Repository newlyCreatedRepo = FileRepositoryBuilder.create(
    new File("/tmp/new_repo/.git"));
newlyCreatedRepo.create();

// Open an existing repository
Repository existingRepo = new FileRepositoryBuilder()
    .setGitDir(new File("my_repo/.git"))
    .build();
----

El constructor té una API fluida per proporcionar tot el necessari per trobar un repositori Git, ja sigui que el vostre programa sàpiga exactament on es troba o no.
Pot utilitzar variables d'entorn (`.readEnvironment()`), començar des d'un lloc al directori de treball i buscar (`.setWorkTree(…).findGitDir()`), o simplement obrir un directori `.git` conegut com a l'anterior.

Un cop teniu una instància de `Repository`, podeu fer moltes coses amb ella.
Aquí teniu una petita mostra:

[source,java]
----
// Get a reference
Ref master = repo.getRef("master");

// Get the object the reference points to
ObjectId masterTip = master.getObjectId();

// Rev-parse
ObjectId obj = repo.resolve("HEAD^{tree}");

// Load raw object contents
ObjectLoader loader = repo.open(masterTip);
loader.copyTo(System.out);

// Create a branch
RefUpdate createBranch1 = repo.updateRef("refs/heads/branch1");
createBranch1.setNewObjectId(masterTip);
createBranch1.update();

// Delete a branch
RefUpdate deleteBranch1 = repo.updateRef("refs/heads/branch1");
deleteBranch1.setForceUpdate(true);
deleteBranch1.delete();

// Config
Config cfg = repo.getConfig();
String name = cfg.getString("user", null, "name");
----

Hi ha força coses passant aquí, així que anem a veure-ho secció per secció.

La primera línia obté un punter a la referència `master`.
JGit automàticament agafa la referència _real_ `master`, que viu a `refs/heads/master`, i retorna un objecte que us permet obtenir informació sobre la referència.
Podeu obtenir el nom (`.getName()`), i o bé l'objecte de destinació d'una referència directa (`.getObjectId()`) o la referència apuntada per una referència simbòlica (`.getTarget()`).
Els objectes Ref també s'utilitzen per representar referències i objectes d'etiquetes, així que podeu preguntar si l'etiqueta està "`pelada`", cosa que significa que apunta a la destinació final d'una cadena (potencialment llarga) d'objectes d'etiquetes.

La segona línia obté la destinació de la referència `master`, que es retorna com una instància d'ObjectId.
ObjectId representa el hash SHA-1 d'un objecte, que pot existir o no a la base de dades d'objectes de Git.
La tercera línia és similar, però mostra com JGit gestiona la sintaxi rev-parse (per a més informació sobre això, vegeu <<ch07-git-tools#_branch_references>>); podeu passar qualsevol especificador d'objecte que Git entén, i JGit retornarà o bé un ObjectId vàlid per a aquest objecte, o `null`.

Les següents dues línies mostren com carregar els continguts bruts d'un objecte.
En aquest exemple, cridem `ObjectLoader.copyTo()` per transmetre els continguts de l'objecte directament a stdout, però ObjectLoader també té mètodes per llegir el tipus i la mida d'un objecte, així com retornar-lo com a array de bytes.
Per a objectes grans (on `.isLarge()` retorna `true`), podeu cridar `.openStream()` per obtenir un objecte similar a InputStream que pot llegir les dades brutes de l'objecte sense carregar-les totes a la memòria alhora.

Les següents línies mostren què cal fer per crear una nova branca.
Creem una instància de RefUpdate, configurem alguns paràmetres, i cridem `.update()` per activar el canvi.
Directament després d'això hi ha el codi per eliminar aquesta mateixa branca.
Noteu que `.setForceUpdate(true)` és necessari perquè això funcioni; d'altra manera la crida `.delete()` retornarà `REJECTED`, i no passarà res.

L'últim exemple mostra com obtenir el valor `user.name` dels fitxers de configuració de Git.
Aquesta instància de Config utilitza el repositori que vam obrir abans per a la configuració local, però detectarà automàticament els fitxers de configuració global i del sistema i llegirà valors d'ells també.

Això és només una petita mostra de l'API completa de plumbing; hi ha molts més mètodes i classes disponibles.
També no es mostra aquí la manera com JGit gestiona els errors, que és mitjançant l'ús d'excepcions.
Les API de JGit de vegades llancen excepcions estàndard de Java (com `IOException`), però també hi ha una sèrie de tipus d'excepcions específics de JGit que es proporcionen (com `NoRemoteRepositoryException`, `CorruptObjectException`, i `NoMergeBaseException`).

==== Porcelain

Les API de plumbing són bastant completes, però pot ser una mica engorrós encadenar-les per aconseguir objectius comuns, com afegir un fitxer a l'índex, o fer un nou commit.
JGit proporciona un conjunt d'API de nivell superior per ajudar amb això, i el punt d'entrada a aquestes API és la classe `Git`:

[source,java]
----
Repository repo;
// construct repo...
Git git = new Git(repo);
----

La classe Git té un bon conjunt de mètodes d'estil _constructor_ que es poden utilitzar per construir alguns comportaments bastant complexos.
Vegem un exemple: fer alguna cosa com `git ls-remote`:

[source,java]
----
CredentialsProvider cp = new UsernamePasswordCredentialsProvider("username", "p4ssw0rd");
Collection<Ref> remoteRefs = git.lsRemote()
    .setCredentialsProvider(cp)
    .setRemote("origin")
    .setTags(true)
    .setHeads(false)
    .call();
for (Ref ref : remoteRefs) {
    System.out.println(ref.getName() + " -> " + ref.getObjectId().name());
}
----

Això és un patró comú amb la classe Git; els mètodes retornen un objecte de comandament que us permet encadenar crides de mètodes per establir paràmetres, que s'executen quan crideu `.call()`.
En aquest cas, estem demanant al remot `origin` per etiquetes, però no per caps.
També noteu l'ús d'un objecte `CredentialsProvider` per a l'autenticació.

Molts altres comandaments estan disponibles a través de la classe Git, incloent però no limitats a `add`, `blame`, `commit`, `clean`, `push`, `rebase`, `revert`, i `reset`.

==== Lectura Addicional

Això és només una petita mostra de les capacitats completes de JGit.
Si esteu interessat i voleu aprendre més, aquí teniu on buscar informació i inspiració:

* La documentació oficial de l'API de JGit es pot trobar a https://www.eclipse.org/jgit/documentation[^].
  Aquestes són Javadoc estàndard, així que el vostre IDE JVM favorit podrà instal·lar-les localment també.
* El JGit Cookbook a https://github.com/centic9/jgit-cookbook[^] té molts exemples de com fer tasques específiques amb JGit.
