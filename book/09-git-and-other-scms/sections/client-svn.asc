[[_git_svn]]
==== Git i Subversion

(((Subversion)))(((Interoperació amb altres VCS, Subversion)))
Una gran fracció de projectes de desenvolupament de codi obert i una bona quantitat de projectes corporatius utilitzen Subversion per gestionar el seu codi font.
Porta més d'una dècada entre nosaltres, i durant la major part d'aquest temps va ser l'elecció de VCS de facto per als projectes de codi obert.
A més, és molt similar en molts aspectes a CVS, que va ser el gran sistema de control de versions abans que Subversion.

(((git commands, svn)))(((git-svn)))
Una de les grans característiques de Git és un pont bidireccional a Subversion anomenat `git svn`.
Aquesta eina us permet utilitzar Git com a client vàlid per a un servidor Subversion, de manera que podeu utilitzar totes les característiques locals de Git i després pujar a un servidor Subversion com si estiguéssiu utilitzant Subversion localment.
Això significa que podeu fer branques i fusions locals, utilitzar l'àrea d'staging, utilitzar rebase i cherry-picking, i així successivament, mentre els vostres col·laboradors continuen treballant de les seves maneres antigues i obscures.
És una bona manera d'introduir Git a l'entorn corporatiu i ajudar els vostres companys desenvolupadors a ser més eficients mentre feu campanya per canviar la infraestructura per donar suport complet a Git.
El pont de Subversion és la droga d'entrada al món dels DVCS.

===== `git svn`

L'ordre base a Git per a totes les ordres de pont amb Subversion és `git svn`.
Acepta bastants ordres, així que mostrarem les més comunes mentre passem per alguns fluxos de treball senzills.

És important tenir en compte que quan esteu utilitzant `git svn`, esteu interactuant amb Subversion, que és un sistema que funciona de manera molt diferent a Git.
Tot i que podeu fer branques i fusions locals, generalment és millor mantenir el vostre historial el més lineal possible rebasant el vostre treball i evitant fer coses com interactuar simultàniament amb un repositori remot de Git.

No reescriviu el vostre historial i intenteu pujar de nou, i no pugeu a un repositori Git paral·lel per col·laborar amb altres desenvolupadors de Git al mateix temps.
Subversion només pot tenir un historial lineal, i confondre'l és molt fàcil.
Si esteu treballant amb un equip, i alguns utilitzen SVN i altres utilitzen Git, assegureu-vos que tots utilitzen el servidor SVN per col·laborar: fer-ho us facilitarà la vida.

===== Configuració

Per demostrar aquesta funcionalitat, necessiteu un repositori SVN típic al qual tingueu accés d'escriptura.
Si voleu copiar aquests exemples, haureu de fer una còpia editable d'un repositori de prova SVN.
Per fer-ho fàcilment, podeu utilitzar una eina anomenada `svnsync` que ve amb Subversion.

Per seguir aquest exemple, primer heu de crear un nou repositori Subversion local:

[source,console]
----
$ mkdir /tmp/test-svn
$ svnadmin create /tmp/test-svn
----

A continuació, habiliteu tots els usuaris per canviar revprops: la manera fàcil és afegir un script `pre-revprop-change` que sempre surti amb 0:

[source,console]
----
$ cat /tmp/test-svn/hooks/pre-revprop-change
#!/bin/sh
exit 0;
$ chmod +x /tmp/test-svn/hooks/pre-revprop-change
----

Ara podeu sincronitzar aquest projecte a la vostra màquina local cridant `svnsync init` amb els repositoris de destí i origen.

[source,console]
----
$ svnsync init file:///tmp/test-svn \
  http://your-svn-server.example.org/svn/
----

Això configura les propietats per executar la sincronització.
Després, podeu clonar el codi executant:

[source,console]
----
$ svnsync sync file:///tmp/test-svn
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .............................[...]
Committed revision 2.
Copied properties for revision 2.
[…]
----

Tot i que aquesta operació pot trigar només uns minuts, si intenteu copiar el repositori original a un altre repositori remot en lloc d'un de local, el procés trigarà gairebé una hora, tot i que hi ha menys de 100 confirmacions.
Subversion ha de clonar una revisió cada vegada i després pujar-la a un altre repositori: és ridículament ineficient, però és l'única manera fàcil de fer-ho.

===== Començant

Ara que teniu un repositori Subversion al qual teniu accés d'escriptura, podeu passar per un flux de treball típic.
Començareu amb l'ordre `git svn clone`, que importa un repositori Subversion complet en un repositori Git local.
Recordeu que si esteu important des d'un repositori Subversion allotjat real, heu de reemplaçar el `file:///tmp/test-svn` aquí amb la URL del vostre repositori Subversion:

[source,console]
----
$ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
Initialized empty Git repository in /private/tmp/progit/test-svn/.git/
r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)
    A	m4/acx_pthread.m4
    A	m4/stl_hash.m4
    A	java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java
    A	java/src/test/java/com/google/protobuf/WireFormatTest.java
…
r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk)
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/my-calc-branch, 75
Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae
Following parent with do_switch
Successfully followed parent
r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch)
Checked out HEAD:
  file:///tmp/test-svn/trunk r75
----

Això executa l'equivalent de dues ordres: `git svn init` seguit de `git svn fetch` a la URL que proporcioneu.
Això pot trigar una estona.
Si, per exemple, el projecte de prova només té uns 75 commits i la base de codi no és tan gran, Git ha de revisar cada versió, una cada vegada, i confirmar-la individualment.
Per a un projecte amb centenars o milers de commits, això pot trigar literalment hores o fins i tot dies a acabar.

La part `-T trunk -b branches -t tags` diu a Git que aquest repositori Subversion segueix les convencions bàsiques de branques i etiquetes.
Si anomeneu el vostre trunk, branques o etiquetes de manera diferent, podeu canviar aquestes opcions.
Com que això és tan comú, podeu reemplaçar tota aquesta part amb `-s`, que significa disposició estàndard i implica totes aquestes opcions.
L'ordre següent és equivalent:

[source,console]
----
$ git svn clone file:///tmp/test-svn -s
----

En aquest punt, hauríeu de tenir un repositori Git vàlid que ha importat les vostres branques i etiquetes:

[source,console]
----
$ git branch -a
* master
  remotes/origin/my-calc-branch
  remotes/origin/tags/2.0.2
  remotes/origin/tags/release-2.0.1
  remotes/origin/tags/release-2.0.2
  remotes/origin/tags/release-2.0.2rc1
  remotes/origin/trunk
----

Observeu com aquesta eina gestiona les etiquetes de Subversion com a referències remotes.
(((git commands, show-ref)))
Fem una ullada més de prop amb l'ordre de plomería de Git `show-ref`:

[source,console]
----
$ git show-ref
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master
0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch
bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2
285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1
cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2
a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk
----

Git no fa això quan clona des d'un servidor Git; així és com es veu un repositori amb etiquetes després d'un clon fresc:

[source,console]
----
$ git show-ref
c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master
32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1
75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2
23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0
7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0
6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0
----

Git obté les etiquetes directament a `refs/tags`, en lloc de tractar-les com a branques remotes.

===== Confirmant de nou a Subversion

Ara que teniu un directori de treball, podeu fer alguna feina al projecte i pujar els vostres commits de nou a l'amunt, utilitzant Git efectivament com a client SVN.
Si editeu un dels fitxers i el confirmeu, teniu un commit que existeix localment a Git que no existeix al servidor Subversion:

[source,console]
----
$ git commit -am 'Afegint instruccions git-svn al README'
[master 4af61fd] Afegint instruccions git-svn al README
 1 file changed, 5 insertions(+)
----

A continuació, heu de pujar el vostre canvi a l'amunt.
Observeu com això canvia la manera com treballeu amb Subversion: podeu fer diversos commits sense connexió i després pujar-los tots a la vegada al servidor Subversion.
Per pujar a un servidor Subversion, executeu l'ordre `git svn dcommit`:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r77
    M	README.txt
r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk)
No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Això pren tots els commits que heu fet sobre el codi del servidor Subversion, fa un commit de Subversion per a cadascun i després reescriu el vostre commit local de Git per incloure un identificador únic.
Això és important perquè significa que tots els checksums SHA-1 per als vostres commits canvien.
En part per aquesta raó, treballar amb versions remotes basades en Git dels vostres projectes concurrentment amb un servidor Subversion no és una bona idea.
Si mireu l'últim commit, podeu veure el nou `git-svn-id` que s'ha afegit:

[source,console]
----
$ git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>
Date:   Thu Jul 24 03:08:36 2014 +0000

    Afegint instruccions git-svn al README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68
----

Observeu que el checksum SHA-1 que originalment començava amb `4af61fd` quan vau confirmar ara comença amb `95e0222`.
Si voleu pujar tant a un servidor Git com a un servidor Subversion, heu de pujar (`dcommit`) al servidor Subversion primer, perquè aquesta acció canvia les vostres dades de confirmació.

===== Obtenint nous canvis

Si esteu treballant amb altres desenvolupadors, llavors en algun moment un de vosaltres pujarà, i després l'altre intentarà pujar un canvi que conflictiva.
Aquest canvi serà rebutjat fins que fusioneu el seu treball.
A `git svn`, sembla així:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M	README.txt
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

Per resoldre aquesta situació, podeu executar `git svn rebase`, que baixa qualsevol canvi al servidor que encara no teniu i rebaseja qualsevol treball que tingueu sobre el que hi ha al servidor:

[source,console]
----
$ git svn rebase
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M	README.txt
First, rewinding head to replay your work on top of it...
Applying: update foo
Using index info to reconstruct a base tree...
M	README.txt
Falling back to patching base and 3-way merge...
Auto-merging README.txt
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

Ara, tot el vostre treball està sobre el que hi ha al servidor Subversion, així que podeu fer `dcommit` amb èxit:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r85
    M	README.txt
r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk)
No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Observeu que, a diferència de Git, que us requereix fusionar el treball a l'amunt que encara no teniu localment abans de poder pujar, `git svn` us fa fer això només si els canvis entren en conflicte (molt semblant a com funciona Subversion).
Si algú altre puja un canvi a un fitxer i després pugeu un canvi a un altre fitxer, el vostre `dcommit` funcionarà bé:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	configure.ac
Committed r87
    M	autogen.sh
r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk)
    M	configure.ac
r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk)
W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase:
:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M	autogen.sh
First, rewinding head to replay your work on top of it...
----

Això és important de recordar, perquè el resultat és un estat del projecte que no existia en cap dels vostres ordinadors quan vau pujar.
Si els canvis són incompatibles però no entren en conflicte, podeu obtenir problemes que són difícils de diagnosticar.
Això és diferent d'utilitzar un servidor Git: en Git, podeu provar completament l'estat al vostre sistema client abans de publicar-lo, mentre que en SVN, mai podeu estar segurs que els estats immediatament abans i després del commit són idèntics.

També hauríeu d'executar aquesta ordre per obtenir canvis del servidor Subversion, fins i tot si no esteu llest per confirmar.
Podeu executar `git svn fetch` per agafar les noves dades, però `git svn rebase` fa el fetch i després actualitza els vostres commits locals.

[source,console]
----
$ git svn rebase
    M	autogen.sh
r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/origin/trunk.
----

Executar `git svn rebase` de tant en tant assegura que el vostre codi sempre està actualitzat.
Heu d'assegurar-vos que el vostre directori de treball està net quan executeu això, però.
Si teniu canvis locals, heu d'emmagatzemar el vostre treball o confirmar-lo temporalment abans d'executar `git svn rebase`; d'altra manera, l'ordre s'aturarà si veu que el rebase resultarà en un conflicte de fusió.

===== Problemes de branques de Git

Quan us heu familiaritzat amb un flux de treball de Git, probablement creareu branques temàtiques, hi fareu feina i després les fusionareu.
Si esteu pujant a un servidor Subversion mitjançant `git svn`, potser voldreu rebasejar el vostre treball en una sola branca cada vegada en lloc de fusionar branques.
La raó per preferir el rebase és que Subversion té un historial lineal i no gestiona les fusions com ho fa Git, així que `git svn` només segueix el primer pare quan converteix les instantànies en commits de Subversion.

Suposem que el vostre historial sembla el següent: heu creat una branca `experiment`, heu fet dos commits i després els heu fusionat de nou a `master`.
Quan feu `dcommit`, veieu una sortida com aquesta:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	CHANGES.txt
Committed r89
    M	CHANGES.txt
r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk)
    M	COPYING.txt
    M	INSTALL.txt
Committed r90
    M	INSTALL.txt
    M	COPYING.txt
r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk)
No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Executar `dcommit` en una branca amb un historial fusionat funciona bé, excepte que quan mireu l'historial del projecte Git, no ha reescrit cap dels commits que vau fer a la branca `experiment`; en lloc d'això, tots aquests canvis apareixen a la versió SVN del commit de fusió únic.

Quan algú altre clona aquesta feina, tot el que veuen és el commit de fusió amb tota la feina aplanada, com si haguéssiu executat `git merge --squash`; no veuen les dades del commit sobre d'on venia o quan es va confirmar.

===== Branques de Subversion

Les branques a Subversion no són el mateix que les branques a Git; si podeu evitar utilitzar-les molt, probablement sigui el millor.
No obstant això, podeu crear i confirmar a branques a Subversion utilitzant `git svn`.

===== Creant una nova branca SVN

Per crear una nova branca a Subversion, executeu `git svn branch [new-branch]`:

[source,console]
----
$ git svn branch opera
Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90
Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0
Following parent with do_switch
Successfully followed parent
r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera)
----

Això fa l'equivalent de l'ordre `svn copy trunk branches/opera` a Subversion i opera al servidor Subversion.
És important tenir en compte que no us revisa aquesta branca; si confirmeu en aquest punt, aquesta confirmació anirà a `trunk` al servidor, no a `opera`.

===== Canviant de branques actives

Git descobreix a quina branca van els vostres dcommits buscant la punta de qualsevol de les vostres branques Subversion al vostre historial: hauríeu de tenir-ne només una, i hauria de ser l'última amb un `git-svn-id` al vostre historial de branques actual.

Si voleu treballar en més d'una branca simultàniament, podeu configurar branques locals per fer `dcommit` a branques Subversion específiques començant-les al commit Subversion importat per a aquesta branca.
Si voleu una branca `opera` amb la qual pugueu treballar per separat, podeu executar:

[source,console]
----
$ git branch opera remotes/origin/opera
----

Ara, si voleu fusionar la vostra branca `opera` a `trunk` (la vostra branca `master`), podeu fer-ho amb una fusió `git merge` normal.
Però heu de proporcionar un missatge de confirmació descriptiu (via `-m`), o la fusió dirà "`Merge branch opera`" en lloc de alguna cosa útil.

Recordeu que, tot i que esteu utilitzant `git merge` per fer aquesta operació, i la fusió probablement serà molt més fàcil que a Subversion (perquè Git detectarà automàticament la base de fusió adequada per a vosaltres), això no és una confirmació de fusió normal de Git.
Heu de pujar aquestes dades a un servidor Subversion que no pot gestionar una confirmació que segueixi més d'un pare; així que, després de pujar-la, semblarà un únic commit que ha aplanat tota la feina d'una altra branca sota un únic commit.
Després de fusionar una branca a una altra, no podeu tornar enrere i continuar treballant en aquesta branca fàcilment, com normalment podeu fer a Git.
L'ordre `dcommit` que executeu esborra qualsevol informació que digui quina branca es va fusionar, així que els càlculs posteriors de la base de fusió seran incorrectes: el `dcommit` fa que el resultat del vostre `git merge` sembli com si haguéssiu executat `git merge --squash`.
Malgrat tot, no hi ha una bona manera d'evitar aquesta situació: Subversion no pot emmagatzemar aquesta informació, així que sempre estareu limitats per les seves limitacions mentre l'utilitzeu com a servidor.
Per evitar problemes, hauríeu d'eliminar la branca local (en aquest cas, `opera`) després de fusionar-la a trunk.

===== Comandes de Subversion

L'eina `git svn` proporciona una sèrie de comandes per ajudar a facilitar la transició a Git proporcionant alguna funcionalitat similar a la que teníeu a Subversion.
Aquí teniu algunes comandes que us donen el que Subversion solia fer.

====== Historial en estil SVN

Si esteu acostumats a Subversion i voleu veure el vostre historial en format de sortida SVN, podeu executar `git svn log` per veure el vostre historial de commits en format SVN:

[source,console]
----
$ git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines

Merge branch 'experiment'

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines

updated the changelog
----

Heu de saber dues coses importants sobre `git svn log`.
En primer lloc, funciona sense connexió, a diferència de l'ordre real `svn log`, que demana al servidor Subversion les dades.
En segon lloc, només us mostra els commits que s'han confirmat al servidor Subversion.
Els commits locals de Git que no heu confirmat no apareixen; tampoc no ho fan els commits que les persones han fet al servidor Subversion mentrestant.
És més com l'últim estat conegut dels commits al servidor Subversion.

====== Anotació SVN

De la mateixa manera que l'ordre `git svn log` simula l'ordre `svn log` sense connexió, podeu obtenir l'equivalent de `svn annotate` executant `git svn blame [FILE]`.
La sortida sembla així:

[source,console]
----
$ git svn blame README.txt
 2   temporal Protocol Buffers - Google's data interchange format
 2   temporal Copyright 2008 Google Inc.
 2   temporal http://code.google.com/apis/protocolbuffers/
 2   temporal
22   temporal C++ Installation - Unix
22   temporal =======================
 2   temporal
79    schacon Committing in git-svn.
78    schacon
 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
 2   temporal Buffer compiler (protoc) execute the following:
 2   temporal
----

Un cop més, no mostra els commits que heu fet localment a Git o que s'han pujat a Subversion mentrestant.

====== Informació del servidor SVN

També podeu obtenir el mateix tipus d'informació que us dona `svn info` executant `git svn info`:

[source,console]
----
$ git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)
----

Això és com `blame` i `log` en el sentit que s'executa sense connexió i està actualitzat només des de l'última vegada que us vau comunicar amb el servidor Subversion.

====== Ignorant el que Subversion ignora

Si cloneu un repositori Subversion que té propietats `svn:ignore` establertes en algun lloc, probablement voldreu establir fitxers `.gitignore` corresponents per no confirmar accidentalment fitxers que no hauríeu de fer.
`git svn` té dues ordres per ajudar amb aquest problema.
La primera és `git svn create-ignore`, que crea automàticament fitxers `.gitignore` corresponents per a vosaltres perquè la vostra propera confirmació pugui incloure'ls.

La segona ordre és `git svn show-ignore`, que imprimeix a stdout les línies que heu de posar en un fitxer `.gitignore` perquè pugueu redirigir la sortida al vostre fitxer d'exclusió del projecte:

[source,console]
----
$ git svn show-ignore > .git/info/exclude
----

D'aquesta manera, no ompliu el projecte amb fitxers `.gitignore`.
Això és una bona opció si sou l'únic usuari de Git en un equip de Subversion, i els vostres companys no volen fitxers `.gitignore` al projecte.

===== Resum de Git-Svn

Les eines `git svn` són útils si esteu atrapats amb un servidor Subversion, o esteu en un entorn de desenvolupament que necessita executar un servidor Subversion.
No obstant això, hauríeu de considerar-ho com a Git limitat, o us trobareu amb problemes de traducció que us poden confondre a vosaltres i als vostres col·laboradors.
Per mantenir-vos fora de problemes, intenteu seguir aquestes directrius:

* Manteniu un historial Git lineal que no contingui commits de fusió fets per `git merge`.
  Rebaseu qualsevol treball que feu fora de la vostra branca principal; no el fusioneu.
* No configureu i col·laboreu en un servidor Git separat.
  Potser en tingueu un per accelerar els clons per a nous desenvolupadors, però no hi pugeu res que no tingui una entrada `git-svn-id`.
  Fins i tot podeu voler afegir un ganxo `pre-receive` que comprovi cada missatge de commit per a un `git-svn-id` i rebutgi les pujades que continguin commits sense ell.

Si seguiu aquestes directrius, treballar amb un servidor Subversion pot ser més suportable.
No obstant això, si és possible canviar a un servidor Git real, fer-ho pot guanyar molt més per al vostre equip.
