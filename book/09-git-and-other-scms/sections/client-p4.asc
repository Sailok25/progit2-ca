==== Git i Perforce

(((Interoperació amb altres VCS, Perforce)))
(((Perforce)))
Perforce és un sistema de control de versions molt popular en entorns corporatius.
Existeix des del 1995, cosa que el converteix en el sistema més antic cobert en aquest capítol.
Com a tal, està dissenyat amb les limitacions del seu temps; assumeix que sempre esteu connectat a un servidor central únic i només es conserva una versió al disc local.
Per descomptat, les seves característiques i limitacions són molt adequades per a diversos problemes específics, però hi ha molts projectes que utilitzen Perforce on Git funcionaria realment millor.

Hi ha dues opcions si voleu combinar l'ús de Perforce i Git.
La primera que tractarem és el "pont Git Fusion" dels creadors de Perforce, que us permet exposar subarbres del vostre dipòsit Perforce com a repositoris Git de lectura-escriptura.
La segona és git-p4, un pont del costat del client que us permet utilitzar Git com a client de Perforce, sense necessitat de reconfigurar el servidor Perforce.

[[_p4_git_fusion]]
===== Git Fusion

(((Perforce, Git Fusion)))
Perforce proporciona un producte anomenat Git Fusion (disponible a https://www.perforce.com/manuals/git-fusion/[^]), que sincronitza un servidor Perforce amb repositoris Git al costat del servidor.

====== Configuració

Per als nostres exemples, utilitzarem el mètode d'instal·lació més senzill per a Git Fusion, que és descarregar una màquina virtual que executa el dimoni Perforce i Git Fusion.
Podeu obtenir la imatge de la màquina virtual des de https://www.perforce.com/downloads[^], i un cop finalitzada la descàrrega, importeu-la al vostre programari de virtualització preferit (nosaltres utilitzarem VirtualBox).

En iniciar la màquina per primera vegada, us demana que personalitzeu la contrasenya per a tres usuaris de Linux (`root`, `perforce` i `git`), i proporcioneu un nom d'instància, que es pot utilitzar per distingir aquesta instal·lació d'altres a la mateixa xarxa.
Un cop tot això hagi finalitzat, veureu això:

.La pantalla d'arrencada de la màquina virtual Git Fusion
image::images/git-fusion-boot.png[La pantalla d'arrencada de la màquina virtual Git Fusion]

Hauríeu de prendre nota de l'adreça IP que es mostra aquí, la utilitzarem més endavant.
A continuació, crearem un usuari de Perforce.
Seleccioneu l'opció "`Login`" a la part inferior i premeu intro (o feu SSH a la màquina), i inicieu la sessió com a `root`.
Després, utilitzeu aquestes ordres per crear un usuari:

[source,console]
----
$ p4 -p localhost:1666 -u super user -f john
$ p4 -p localhost:1666 -u john passwd
$ exit
----

El primer obrirà un editor VI per personalitzar l'usuari, però podeu acceptar els valors per defecte escrivint `:wq` i premant intro.
El segon us demanarà que introduïu una contrasenya dues vegades.
Això és tot el que hem de fer amb un prompt de shell, així que sortiu de la sessió.

El següent que haureu de fer per seguir aquest exemple és dir a Git que no verifiqui els certificats SSL.
La imatge de Git Fusion ve amb un certificat, però és per a un domini que no coincidirà amb l'adreça IP de la vostra màquina virtual, així que Git rebutjarà la connexió HTTPS.
Si això serà una instal·lació permanent, consulteu el manual de Perforce Git Fusion per instal·lar un certificat diferent; per als nostres propòsits d'exemple, això serà suficient:

[source,console]
----
$ export GIT_SSL_NO_VERIFY=true
----

Ara podem provar que tot funciona.

[source,console]
----
$ git clone https://10.0.1.254/Talkhouse
Cloning into 'Talkhouse'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 630, done.
remote: Compressing objects: 100% (581/581), done.
remote: Total 630 (delta 172), reused 0 (delta 0)
Receiving objects: 100% (630/630), 1.22 MiB | 0 bytes/s, done.
Resolving deltas: 100% (172/172), done.
Checking connectivity... done.
----

La imatge de la màquina virtual ve equipada amb un projecte de mostra que podeu clonar.
Aquí estem clonant sobre HTTPS, amb l'usuari `john` que vam crear anteriorment; Git demana credencials per a aquesta connexió, però la memòria cau de credencials ens permetrà saltar-nos aquest pas per a qualsevol sol·licitud posterior.

====== Configuració de Fusion

Un cop tingueu Git Fusion instal·lat, voldreu ajustar la configuració.
Això és realment bastant fàcil de fer utilitzant el vostre client Perforce preferit; simplement mapeu el directori `//.git-fusion` al servidor Perforce al vostre espai de treball.
L'estructura de fitxers sembla així:

[source,console]
----
$ tree
.
├── objects
│   ├── repos
│   │   └── [...]
│   └── trees
│       └── [...]
│
├── p4gf_config
├── repos
│   └── Talkhouse
│       └── p4gf_config
└── users
    └── p4gf_usermap

498 directoris, 287 fitxers
----

El directori `objects` és utilitzat internament per Git Fusion per mapear objectes Perforce a Git i viceversa, no haureu de manipular res allà.
Hi ha un fitxer `p4gf_config` global en aquest directori, així com un per a cada repositori: aquests són els fitxers de configuració que determinen com es comporta Git Fusion.
Fem una ullada al fitxer a l'arrel:

[source,ini]
----
[repo-creation]
charset = utf8

[git-to-perforce]
change-owner = author
enable-git-branch-creation = yes
enable-swarm-reviews = yes
enable-git-merge-commits = yes
enable-git-submodules = yes
preflight-commit = none
ignore-author-permissions = no
read-permission-check = none
git-merge-avoidance-after-change-num = 12107

[perforce-to-git]
http-url = none
ssh-url = none

[@features]
imports = False
chunked-push = False
matrix2 = False
parallel-push = False

[authentication]
email-case-sensitivity = no
----

No entrarem en els significats d'aquests indicadors aquí, però tingueu en compte que això és simplement un fitxer de text en format INI, molt semblant al que Git utilitza per a la configuració.
Aquest fitxer especifica les opcions globals, que després poden ser anul·lades per fitxers de configuració específics del repositori, com `repos/Talkhouse/p4gf_config`.
Si obriu aquest fitxer, veureu una secció `[@repo]` amb algunes configuracions que són diferents dels valors per defecte globals.
També veureu seccions que semblen així:

[source,ini]
----
[Talkhouse-master]
git-branch-name = master
view = //depot/Talkhouse/main-dev/... ...
----

Això és un mapeig entre una branca Perforce i una branca Git.
La secció pot anomenar-se com vulgueu, sempre que el nom sigui únic.
`git-branch-name` us permet convertir una ruta de dipòsit que seria incòmoda sota Git a un nom més amigable.
La configuració `view` controla com els fitxers Perforce es mapegen al repositori Git, utilitzant la sintaxi de mapeig de vistes estàndard.
Es pot especificar més d'un mapeig, com en aquest exemple:

[source,ini]
----
[multi-project-mapping]
git-branch-name = master
view = //depot/project1/main/... project1/...
       //depot/project2/mainline/... project2/...
----

D'aquesta manera, si el vostre mapeig d'espai de treball normal inclou canvis en l'estructura dels directoris, podeu replicar això amb un repositori Git.

L'últim fitxer que discutirem és `users/p4gf_usermap`, que mapeja usuaris de Perforce a usuaris de Git, i que potser ni tan sols necessiteu.
En convertir d'un conjunt de canvis de Perforce a un commit de Git, el comportament per defecte de Git Fusion és buscar l'usuari de Perforce i utilitzar l'adreça de correu electrònic i el nom complet emmagatzemats allà per al camp autor/committer a Git.
En convertir l'altra manera, el valor per defecte és buscar l'usuari de Perforce amb l'adreça de correu electrònic emmagatzemada al camp autor del commit de Git i enviar el conjunt de canvis com aquest usuari (amb els permisos aplicats).
En la majoria dels casos, aquest comportament funcionarà bé, però considereu el següent fitxer de mapeig:

[source]
----
john john@example.com "John Doe"
john johnny@appleseed.net "John Doe"
bob employeeX@example.com "Anon X. Mouse"
joe employeeY@example.com "Anon Y. Mouse"
----

Cada línia és del format `<usuari> <correu electrònic> "<nom complet>"`, i crea un únic mapeig d'usuari.
Les dues primeres línies mapegen dues adreces de correu electrònic diferents al mateix compte d'usuari de Perforce.
Això és útil si heu creat commits de Git sota diverses adreces de correu electrònic (o canvieu d'adreça de correu electrònic), però voleu que es mapegin al mateix usuari de Perforce.
En crear un commit de Git a partir d'un conjunt de canvis de Perforce, s'utilitza la primera línia que coincideixi amb l'usuari de Perforce per a la informació d'autoria de Git.

Les dues últimes línies amaguen els noms i adreces de correu electrònic reals de Bob i Joe dels commits de Git que es creen.
Això és útil si voleu obrir el codi d'un projecte intern, però no voleu publicar el vostre directori d'empleats a tot el món.
Tingueu en compte que les adreces de correu electrònic i els noms complets haurien de ser únics, a menys que vulgueu que tots els commits de Git s'atribueixin a un únic autor fictici.

====== Flux de treball

Perforce Git Fusion és un pont bidireccional entre el control de versions Perforce i Git.
Fem una ullada a com se sent treballar des del costat de Git.
Suposarem que hem mapejat el projecte "`Jam`" utilitzant un fitxer de configuració com es mostra anteriorment, que podem clonar així:

[source,console]
----
$ git clone https://10.0.1.254/Jam
Cloning into 'Jam'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 2070, done.
remote: Compressing objects: 100% (1704/1704), done.
Receiving objects: 100% (2070/2070), 1.21 MiB | 0 bytes/s, done.
remote: Total 2070 (delta 1242), reused 0 (delta 0)
Resolving deltas: 100% (1242/1242), done.
Checking connectivity... done.
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/rel2.1
\$ git log --oneline --decorate --graph --all
* 0a38c33 (origin/rel2.1) Create Jam 2.1 release branch.
| * d254865 (HEAD, origin/master, origin/HEAD, master) Upgrade to latest metrowerks on Beos -- the Intel one.
| * bd2f54a Put in fix for jam's NT handle leak.
| * c0f29e7 Fix URL in a jam doc
| * cc644ac Radstone's lynx port.
[...]
----

La primera vegada que feu això, pot trigar una estona.
El que està passant és que Git Fusion està convertint tots els conjunts de canvis aplicables a l'historial de Perforce en commits de Git.
Això passa localment al servidor, així que és relativament ràpid, però si teniu molta història, encara pot trigar una estona.
Les recuperacions posteriors fan una conversió incremental, així que semblarà més com la velocitat nativa de Git.

Com podeu veure, el nostre repositori sembla exactament com qualsevol altre repositori Git amb el qual pugueu treballar.
Hi ha tres branques, i Git ha creat amablement una branca local `master` que segueix `origin/master`.
Fem una mica de feina i creem un parell de nous commits:

[source,console]
----
# ...
\$ git log --oneline --decorate --graph --all
* cfd46ab (HEAD, master) Add documentation for new feature
* a730d77 Whitespace
* d254865 (origin/master, origin/HEAD) Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

Tenim dos nous commits.
Ara comprovem si algú més ha estat treballant:

[source,console]
----
$ git fetch
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://10.0.1.254/Jam
   d254865..6afeb15  master     -> origin/master
$ git log --oneline --decorate --graph --all
* 6afeb15 (origin/master, origin/HEAD) Update copyright
| * cfd46ab (HEAD, master) Add documentation for new feature
| * a730d77 Whitespace
|/
* d254865 Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

Sembla que algú ho va fer!
No ho sabríeu des d'aquesta vista, però el commit `6afeb15` va ser creat realment utilitzant un client Perforce.
Només sembla un altre commit des del punt de vista de Git, que és exactament el punt.
Vegem com gestiona el servidor Perforce un commit de fusió:

[source,console]
----
$ git merge origin/master
Auto-merging README
Merge made by the 'recursive' strategy.
 README | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git push
Counting objects: 9, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.
Total 9 (delta 6), reused 0 (delta 0)
remote: Perforce: 100% (3/3) Loading commit tree into memory...
remote: Perforce: 100% (5/5) Finding child commits...
remote: Perforce: Running git fast-export...
remote: Perforce: 100% (3/3) Checking commits...
remote: Processing will continue even if connection is closed.
remote: Perforce: 100% (3/3) Copying changelists...
remote: Perforce: Submitting new Git commit objects to Perforce: 4
To https://10.0.1.254/Jam
   6afeb15..89cba2b  master -> master
----

Git pensa que ha funcionat.
Fem una ullada a l'historial del fitxer `README` des del punt de vista de Perforce, utilitzant la característica de gràfic de revisions de `p4v`:

.Gràfic de revisions de Perforce resultant de la pujada de Git
image::images/git-fusion-perforce-graph.png[Gràfic de revisions de Perforce resultant de la pujada de Git]

Si mai no heu vist aquesta vista abans, pot semblar confusa, però mostra els mateixos conceptes que un visualitzador gràfic per a l'historial de Git.
Estem mirant l'historial del fitxer `README`, així que l'arbre de directoris a la part superior esquerra només mostra aquest fitxer a mesura que apareix en diverses branques.
A la part superior dreta, tenim un gràfic visual de com les diferents revisions del fitxer estan relacionades, i la vista general d'aquest gràfic està a la part inferior dreta.
La resta de la vista es dedica a la vista de detalls per a la revisió seleccionada (`2` en aquest cas).

Una cosa a observar és que el gràfic sembla exactament com el de l'historial de Git.
Perforce no tenia una branca amb nom per emmagatzemar els commits `1` i `2`, així que va fer una branca "`anònima`" al directori `.git-fusion` per contenir-la.
Això també passarà per a branques Git amb nom que no corresponguin a una branca Perforce amb nom (i més endavant podeu mapear-les a una branca Perforce utilitzant el fitxer de configuració).

La majoria d'això passa entre bastidors, però el resultat final és que una persona de l'equip pot estar utilitzant Git, una altra pot estar utilitzant Perforce, i cap dels dos sabrà l'elecció de l'altre.

====== Resum de Git-Fusion

Si teniu (o podeu obtenir) accés al vostre servidor Perforce, Git Fusion és una bona manera de fer que Git i Perforce es parlin entre si.
Hi ha una mica de configuració implicada, però la corba d'aprenentatge no és molt pronunciada.
Aquesta és una de les poques seccions d'aquest capítol on no apareixeran advertències sobre l'ús de tot el poder de Git.
Això no vol dir que Perforce estigui content amb tot el que li llanceu: si intenteu reescriure la història que ja s'ha pujat, Git Fusion la rebutjarà, però Git Fusion intenta molt dur sentir-se natiu.
Fins i tot podeu utilitzar submòduls de Git (tot i que semblaran estranys als usuaris de Perforce), i fusionar branques (això es registrarà com una integració al costat de Perforce).

Si no podeu convèncer l'administrador del vostre servidor per configurar Git Fusion, encara hi ha una manera d'utilitzar aquestes eines juntes.

[[_git_p4_client]]
===== Git-p4

(((git commands, p4)))
Git-p4 és un pont bidireccional entre Git i Perforce.
S'executa completament dins del vostre repositori Git, així que no necessitareu cap tipus d'accés al servidor Perforce (a part de les credencials d'usuari, per descomptat).
Git-p4 no és tan flexible ni una solució tan completa com Git Fusion, però us permet fer la majoria del que voldríeu fer sense ser invasiu a l'entorn del servidor.

[NOTE]
======
Haurà de tenir l'eina `p4` en algun lloc del vostre `PATH` per treballar amb git-p4.
En el moment d'escriure això, està disponible gratuïtament a https://www.perforce.com/downloads/helix-command-line-client-p4[^].
======

====== Configuració

Per als nostres exemples, estarem executant el servidor Perforce des de l'OVA de Git Fusion com es mostra anteriorment, però saltarem el servidor Git Fusion i anirem directament al control de versions Perforce.

Per utilitzar el client de línia d'ordres `p4` (del qual depèn git-p4), haureu de definir unes quantes variables d'entorn:

[source,console]
----
$ export P4PORT=10.0.1.254:1666
$ export P4USER=john
----

====== Començant

Com amb qualsevol cosa a Git, la primera ordre és clonar:

[source,console]
----
\$ git p4 clone //depot/www/live www-shallow
Importing from //depot/www/live into www-shallow
Initialized empty Git repository in /private/tmp/www-shallow/.git/
Doing initial import of //depot/www/live/ from revision #head into refs/remotes/p4/master
----

Això crea el que en termes de Git és un clon "superficial"; només s'importa la revisió més recent de Perforce a Git; recordeu, Perforce no està dissenyat per donar cada revisió a cada usuari.
Això és suficient per utilitzar Git com a client de Perforce, però per a altres propòsits no és suficient.

Un cop finalitzat, tenim un repositori Git totalment funcional:

[source,console]
----
\$ cd myproject
\$ git log --oneline --all --graph --decorate
* 70eaf78 (HEAD, p4/master, p4/HEAD, master) Initial import of //depot/www/live/ from the state at revision #head
----

Observeu com hi ha un "remot" `p4` per al servidor Perforce, però tot la resta sembla un clon estàndard.
De fet, això és una mica enganyós; no hi ha realment un remot allà.

[source,console]
----
\$ git remote -v
----

No hi ha remots en aquest repositori en absolut.
Git-p4 ha creat algunes referències per representar l'estat del servidor, i semblen referències remotes a `git log`, però no són gestionades per Git mateix, i no hi podeu pujar.

====== Flux de treball

D'acord, fem una mica de feina.
Suposem que heu fet alguns progressos en una característica molt important, i esteu llest per mostrar-la a la resta del vostre equip.

[source,console]
----
\$ git log --oneline --all --graph --decorate
* 018467c (HEAD, master) Change page title
* c0fb617 Update link
* 70eaf78 (p4/master, p4/HEAD) Initial import of //depot/www/live/ from the state at revision #head
----

Hem fet dos nous commits que estem llests per enviar al servidor Perforce.
Comprovem si algú més ha estat treballant avui:

[source,console]
----
\$ git p4 sync
git p4 sync
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12142 (100%)
\$ git log --oneline --all --graph --decorate
* 75cd059 (p4/master, p4/HEAD) Update copyright
| * 018467c (HEAD, master) Change page title
| * c0fb617 Update link
|/
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Sembla que sí, i `master` i `p4/master` han divergit.
El sistema de branques de Perforce no és res semblant al de Git, així que enviar commits de fusió no té sentit.
Git-p4 recomana que rebaseu els vostres commits, i fins i tot ve amb una dreçera per fer-ho:

[source,console]
----
\$ git p4 rebase
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
No changes to import!
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
Applying: Update link
Applying: Change page title
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
----

Probablement podeu dir per la sortida, però `git p4 rebase` és una dreçera per a `git p4 sync` seguit de `git rebase p4/master`.
És una mica més intel·ligent que això, especialment quan es treballa amb múltiples branques, però aquesta és una bona aproximació.

Ara el nostre historial és lineal de nou, i estem llests per contribuir els nostres canvis de nou a Perforce.
L'ordre `git p4 submit` intentarà crear una nova revisió de Perforce per a cada commit de Git entre `p4/master` i `master`.
En executar-lo, ens porta al nostre editor preferit, i el contingut del fitxer sembla alguna cosa així:

[source,console]
----
# A Perforce Change Specification.
#
#  Change:      The change number. 'new' on a new changelist.
#  Date:        The date this specification was last modified.
#  Client:      The client on which the changelist was created.  Read-only.
#  User:        The user who created the changelist.
#  Status:      Either 'pending' or 'submitted'. Read-only.
#  Type:        Either 'public' or 'restricted'. Default is 'public'.
#  Description: Comments about the changelist.  Required.
#  Jobs:        What opened jobs are to be closed by this changelist.
#               You may delete jobs from this list.  (New changelists only.)
#  Files:       What opened files from the default changelist are to be added
#               to this changelist.  You may delete files from this list.
#               (New changelists only.)

Change:  new

Client:  john_bens-mbp_8487

User: john

Status:  new

Description:
   Update link

Files:
   //depot/www/live/index.html   # edit


######## git author ben@straub.cc does not match your p4 account.
######## Use option --preserve-user to modify authorship.
######## Variable git-p4.skipUserNameCheck hides this message.
######## everything below this line is just the diff #######
--- //depot/www/live/index.html  2014-08-31 18:26:05.000000000 0000
+++ /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/index.html   2014-08-31 18:26:05.000000000 0000
@@ -60,7 +60,7 @@
 </td>
 <td valign=top>
 Source and documentation for
-<a href="http://www.perforce.com/jam/jam.html">
+<a href="jam.html">
 Jam/MR</a>,
 a software build tool.
 </td>
----

Això és majoritàriament el mateix contingut que veuríeu executant `p4 submit`, excepte el contingut al final que git-p4 ha inclòs amablement.
Git-p4 intenta honorar les vostres configuracions de Git i Perforce individualment quan ha de proporcionar un nom per a un commit o un conjunt de canvis, però en alguns casos voleu anul·lar-ho.
Per exemple, si el commit de Git que esteu important va ser escrit per un col·laborador que no té un compte d'usuari de Perforce, encara podeu voler que el conjunt de canvis resultant sembli que ell el va escriure (i no vosaltres).

Git-p4 ha importat amablement el missatge del commit de Git com a contingut per a aquest conjunt de canvis de Perforce, així que tot el que hem de fer és desar i sortir, dues vegades (una per a cada commit).
La sortida resultant de la shell semblarà alguna cosa així:

[source,console]
----
\$ git p4 submit
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Synchronizing p4 checkout...
... - file(s) up-to-date.
Applying dbac45b Update link
//depot/www/live/index.html#4 - opened for edit
Change 12143 created with 1 open file(s).
Submitting change 12143.
Locking 1 files ...
edit //depot/www/live/index.html#5
Change 12143 submitted.
Applying 905ec6a Change page title
//depot/www/live/index.html#5 - opened for edit
Change 12144 created with 1 open file(s).
Submitting change 12144.
Locking 1 files ...
edit //depot/www/live/index.html#6
Change 12144 submitted.
All commits applied!
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12144 (100%)
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
\$ git log --oneline --all --graph --decorate
* 775a46f (HEAD, p4/master, p4/HEAD, master) Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

El resultat és com si acabéssim de fer un `git push`, que és l'analogia més propera al que realment va passar.

Observeu que durant aquest procés cada commit de Git es converteix en un conjunt de canvis de Perforce; si voleu aplanar-los en un únic conjunt de canvis, podeu fer-ho amb un rebase interactiu abans d'executar `git p4 submit`.
També observeu que els hashes SHA-1 de tots els commits que es van enviar com a conjunts de canvis han canviat; això és perquè git-p4 afegeix una línia al final de cada commit que converteix:

[source,console]
----
$ git log -1
commit 775a46f630d8b46535fc9983cf3ebe6b9aa53145
Author: John Doe <john@example.com>
Date:   Sun Aug 31 10:31:44 2014 -0800

    Change page title

    [git-p4: depot-paths = "//depot/www/live/": change = 12144]
----

Què passa si intenteu enviar un commit de fusió?
Proveu-ho.
Aquí teniu la situació en què ens hem ficat:

[source,console]
----
$ git log --oneline --all --graph --decorate
* 3be6fd8 (HEAD, master) Correct email address
*   1dcbf21 Merge remote-tracking branch 'p4/master'
|\
| * c4689fc (p4/master, p4/HEAD) Grammar fix
* | cbacd0a Table borders: yes please
* | b4959b6 Trademark
|/
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

L'historial de Git i Perforce divergeix després de `775a46f`.
El costat de Git té dos commits, després un commit de fusió amb el cap de Perforce, i després un altre commit.
Intentarem enviar aquests sobre un únic conjunt de canvis al costat de Perforce.
Vegem què passaria si intentéssim enviar ara:

[source,console]
----
$ git p4 submit -n
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would synchronize p4 checkout in /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would apply
  b4959b6 Trademark
  cbacd0a Table borders: yes please
  3be6fd8 Correct email address
----

L'indicador `-n` és curt per a `--dry-run`, que intenta informar del que passaria si l'ordre d'enviament s'executés de veritat.
En aquest cas, sembla que crearíem tres conjunts de canvis de Perforce, que corresponen als tres commits no fusionats que encara no existeixen al servidor Perforce.
Això sembla exactament el que volem, vegem com resulta:

[source,console]
----
$ git p4 submit
[…]
\$ git log --oneline --all --graph --decorate
* dadbd89 (HEAD, p4/master, p4/HEAD, master) Correct email address
* 1b79a80 Table borders: yes please
* 0097235 Trademark
* c4689fc Grammar fix
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

El nostre historial es va tornar lineal, com si haguéssim fet un rebase abans d'enviar (que de fet és exactament el que va passar).
Això significa que podeu crear, treballar, descartar i fusionar branques al costat de Git sense por que el vostre historial es tornin d'alguna manera incompatible amb Perforce.
Si podeu fer un rebase, podeu contribuir a un servidor Perforce.

[[_git_p4_branches]]
====== Branques

Si el vostre projecte Perforce té múltiples branques, no esteu sense sort; git-p4 pot gestionar això d'una manera que sembla Git.
Suposem que el vostre dipòsit Perforce està organitzat així:

[source]
----
//depot
  └── project
      ├── main
      └── dev
----

I suposem que teniu una branca `dev`, que té una especificació de vista que sembla així:

[source]
----
//depot/project/main/... //depot/project/dev/...
----

Git-p4 pot detectar automàticament aquesta situació i fer el correcte:

[source,console]
----
\$ git p4 clone --detect-branches //depot/project@all
Importing from //depot/project@all into project
Initialized empty Git repository in /private/tmp/project/.git/
Importing revision 20 (50%)
    Importing new branch project/dev

    Resuming with change 20
Importing revision 22 (100%)
Updated branches: main dev
$ cd project; git log --oneline --all --graph --decorate
* eae77ae (HEAD, p4/master, p4/HEAD, master) main
| * 10d55fb (p4/project/dev) dev
| * a43cfae Populate //depot/project/main/... //depot/project/dev/....
|/
* 2b83451 Project init
----

Observeu l'especificador "`@all`" a la ruta del dipòsit; això diu a git-p4 que cloni no només l'últim conjunt de canvis per a aquell subarbre, sinó tots els conjunts de canvis que hagin tocat mai aquestes rutes.
Això és més proper al concepte de clon de Git, però si esteu treballant en un projecte amb una llarga història, podria trigar una estona.

L'indicador `--detect-branches` diu a git-p4 que utilitzi les especificacions de branca de Perforce per mapear les branques a referències de Git.
Si aquests mapejos no estan presents al servidor Perforce (el que és una manera perfectament vàlida d'utilitzar Perforce), podeu dir a git-p4 quins són els mapejos de branques, i obteniu el mateix resultat:

[source,console]
----
$ git init project
Initialized empty Git repository in /tmp/project/.git/
$ cd project
$ git config git-p4.branchList main:dev
\$ git clone --detect-branches //depot/project@all .
----

Establir la variable de configuració `git-p4.branchList` a `main:dev` diu a git-p4 que "`main`" i "`dev`" són totes dues branques, i la segona és una filla de la primera.

Si ara fem `git checkout -b dev p4/project/dev` i fem alguns commits, git-p4 és prou intel·ligent per apuntar a la branca correcta quan fem `git p4 submit`.
Malgrat tot, git-p4 no pot barrejar clons superficials i múltiples branques; si teniu un projecte enorme i voleu treballar en més d'una branca, haureu de fer `git p4 clone` una vegada per a cada branca a la qual voleu enviar.

Per a la creació o integració de branques, haureu d'utilitzar un client Perforce.
Git-p4 només pot sincronitzar i enviar a branques existents, i només pot fer-ho un conjunt de canvis lineal cada vegada.
Si fusiona dues branques a Git i intenta enviar el nou conjunt de canvis, tot el que es registrarà serà un munt de canvis de fitxers; les metadades sobre quines branques estan involucrades en la integració es perdran.

===== Resum de Git i Perforce

Git-p4 fa possible utilitzar un flux de treball de Git amb un servidor Perforce, i és bastant bo en això.
No obstant això, és important recordar que Perforce està al càrrec de la font, i només esteu utilitzant Git per treballar localment.
Simplement tingueu molt de compte en compartir commits de Git; si teniu un remot que altres persones utilitzen, no hi pugeu cap commit que encara no s'hagi enviat al servidor Perforce.

Si voleu barrejar lliurement l'ús de Perforce i Git com a clients per al control de versions, i podeu convèncer l'administrador del servidor per instal·lar-lo, Git Fusion fa que l'ús de Git sigui un client de control de versions de primera classe per a un servidor Perforce.
