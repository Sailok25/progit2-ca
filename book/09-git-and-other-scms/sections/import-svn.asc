==== Subversion

(((Subversion)))
(((Importing, from Subversion)))
Si heu llegit la secció anterior sobre l'ús de `git svn`, podeu utilitzar fàcilment aquestes instruccions per a `git svn clone` un repositori; després, deixeu d'utilitzar el servidor Subversion, envieu a un nou servidor Git i comenceu a utilitzar-lo.
Si voleu l'historial, podeu aconseguir-ho tan ràpid com podeu extreure les dades del servidor Subversion (el que pot trigar una estona).

No obstant això, la importació no és perfecta; i com trigarà tant, podríeu fer-ho bé.
El primer problema és la informació de l'autor.
A Subversion, cada persona que fa una confirmació té un usuari al sistema que es registra a la informació de la confirmació.
Els exemples de la secció anterior mostren `schacon` en alguns llocs, com ara la sortida de `blame` i el `git svn log`.
Si voleu mapear això a dades d'autor de Git més adequades, necessiteu un mapeig dels usuaris de Subversion als autors de Git.
Creeu un fitxer anomenat `users.txt` que tingui aquest mapeig en un format com aquest:

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

Per obtenir una llista dels noms d'autor que utilitza SVN, podeu executar això:

[source,console]
----
$ svn log --xml --quiet | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

Això genera la sortida del registre en format XML, després manté només les línies amb informació de l'autor, descarta els duplicats, elimina les etiquetes XML.
Òbviament això només funciona en una màquina amb `grep`, `sort` i `perl` instal·lats.
Després, redirigiu aquesta sortida al vostre fitxer `users.txt` per poder afegir les dades d'usuari de Git equivalents al costat de cada entrada.

[NOTE]
====
Si esteu intentant això en una màquina Windows, aquest és el punt on trobareu problemes.
Microsoft ha proporcionat alguns bons consells i exemples a https://learn.microsoft.com/en-us/azure/devops/repos/git/perform-migration-from-svn-to-git[^].
====

Podeu proporcionar aquest fitxer a `git svn` per ajudar-lo a mapear les dades de l'autor amb més precisió.
També podeu dir a `git svn` que no inclogui les metadades que Subversion normalment importa, passant `--no-metadata` a l'ordre `clone` o `init`.
Les metadades inclouen un `git-svn-id` dins de cada missatge de confirmació que Git generarà durant la importació.
Això pot inflar el vostre registre Git i podria fer-lo una mica poc clar.

[NOTE]
====
Heu de mantenir les metadades quan voleu reflectir les confirmacions fetes al repositori Git al repositori SVN original.
Si no voleu la sincronització al vostre registre de confirmacions, no us cal incloure el paràmetre `--no-metadata`.
====

Això fa que la vostra ordre d'`import` sembli així:

[source,console]
----
$ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata --prefix "" -s my_project
$ cd my_project
----

Ara hauríeu de tenir una importació de Subversion més neta al vostre directori `my_project`.
En lloc de confirmacions que semblin així:

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

semblen així:

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

No només el camp Autor sembla molt millor, sinó que el `git-svn-id` ja no hi és.

També hauríeu de fer una mica de neteja post-importació.
Per una cosa, hauríeu de netejar les referències estranyes que `git svn` va configurar.
Primer moureu les etiquetes perquè siguin etiquetes reals en lloc de branques remotes estranyes, i després moureu la resta de les branques perquè siguin locals.

Per moure les etiquetes per ser etiquetes Git adequades, executeu:

[source,console]
----
$ for t in $(git for-each-ref --format='%(refname:short)' refs/remotes/tags); do git tag ${t/tags\//} $t && git branch -D -r $t; done
----

Això pren les referències que eren branques remotes que començaven amb `refs/remotes/tags/` i les converteix en etiquetes (lleugeres) reals.

A continuació, mou la resta de les referències sota `refs/remotes` per ser branques locals:

[source,console]
----
$ for b in $(git for-each-ref --format='%(refname:short)' refs/remotes); do git branch $b refs/remotes/$b && git branch -D -r $b; done
----

Pot passar que vegeu algunes branques addicionals que tenen el sufix `@xxx` (on xxx és un número), mentre que a Subversion només veieu una branca.
Això és en realitat una característica de Subversion anomenada "`peg-revisions`", que és alguna cosa per a la qual Git simplement no té una contrapart sintàctica.
Per tant, `git svn` simplement afegeix el número de versió SVN al nom de la branca de la mateixa manera que ho hauríeu escrit a SVN per abordar la peg-revision d'aquella branca.
Si ja no us importa les peg-revisions, simplement elimineu-les:

[source,console]
----
$ for p in $(git for-each-ref --format='%(refname:short)' | grep @); do git branch -D $p; done
----

Ara totes les branques antigues són branques Git reals i totes les etiquetes antigues són etiquetes Git reals.

Hi ha una última cosa per netejar.
Malgrat tot, `git svn` crea una branca addicional anomenada `trunk`, que mapeja a la branca per defecte de Subversion, però la referència `trunk` apunta al mateix lloc que `master`.
Com que `master` és més idiomàticament Git, aquí teniu com eliminar la branca addicional:

[source,console]
----
$ git branch -d trunk
----

L'última cosa a fer és afegir el vostre nou servidor Git com a remot i enviar-hi.
Aquí teniu un exemple d'afegir el vostre servidor com a remot:

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

Com que voleu que totes les vostres branques i etiquetes pugin, ara podeu executar això:

[source,console]
----
$ git push origin --all
$ git push origin --tags
----

Totes les vostres branques i etiquetes haurien d'estar al vostre nou servidor Git en una importació neta i ordenada.
