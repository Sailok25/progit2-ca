[[_custom_importer]]
==== Un Importador Personalitzat

(((git commands, fast-import)))
(((Importing, from others)))
Si el vostre sistema no és cap dels anteriors, hauríeu de buscar un importador en línia: hi ha importadors de qualitat disponibles per a molts altres sistemes, incloent CVS, Clear Case, Visual Source Safe, fins i tot un directori d'arxius.
Si cap d'aquestes eines us funciona, teniu una eina més obscura, o necessiteu un procés d'importació més personalitzat, hauríeu d'utilitzar `git fast-import`.
Aquesta ordre llegeix instruccions senzilles des de stdin per escriure dades específiques de Git.
És molt més fàcil crear objectes Git d'aquesta manera que executar les ordres brutes de Git o intentar escriure els objectes bruts (vegeu <<ch10-git-internals#ch10-git-internals>> per a més informació).
D'aquesta manera, podeu escriure un script d'importació que llegeixi la informació necessària del sistema que esteu important i imprimeixi instruccions directes a stdout.
Després, podeu executar aquest programa i canalitzar la seva sortida a través de `git fast-import`.

Per demostrar ràpidament, escriureu un importador senzill.
Suposeu que treballeu a `current`, feu una còpia de seguretat del vostre projecte copiant ocasionalment el directori a un directori de còpia de seguretat amb marca de temps `back_YYYY_MM_DD`, i voleu importar això a Git.
La vostra estructura de directoris sembla així:

[source,console]
----
$ ls /opt/import_from
back_2014_01_02
back_2014_01_04
back_2014_01_14
back_2014_02_03
current
----

Per importar un directori Git, heu de revisar com Git emmagatzema les seves dades.
Com podeu recordar, Git és fonamentalment una llista enllaçada d'objectes de confirmació que apunten a una instantània de contingut.
Tot el que heu de fer és dir a `fast-import` quines són les instantànies de contingut, quines dades de confirmació apunten a elles i l'ordre en què van.
La vostra estratègia serà passar per les instantànies una per una i crear confirmacions amb els continguts de cada directori, enllaçant cada confirmació amb l'anterior.

Com vam fer a <<ch08-customizing-git#_an_example_git_enforced_policy>>, ho escriurem en Ruby, perquè és el que generalment utilitzem i tendim a ser fàcil de llegir.
Podeu escriure aquest exemple bastant fàcilment en qualsevol cosa amb què esteu familiaritzat: només necessita imprimir la informació adequada a `stdout`.
I, si esteu executant en Windows, això significa que heu de tenir cura especial de no introduir retorns de carro al final de les vostres línies: `git fast-import` és molt particular sobre voler només salts de línia (LF) i no els retorns de carro salts de línia (CRLF) que utilitza Windows.

Per començar, canviareu al directori de destí i identificareu cada subdirectori, cadascun dels quals és una instantània que voleu importar com una confirmació.
Canviareu a cada subdirectori i imprimireu les ordres necessàries per exportar-lo.
El vostre bucle principal bàsic sembla així:

[source,ruby]
----
last_mark = nil

# loop through the directories
Dir.chdir(ARGV[0]) do
  Dir.glob("*").each do |dir|
    next if File.file?(dir)

    # move into the target directory
    Dir.chdir(dir) do
      last_mark = print_export(dir, last_mark)
    end
  end
end
----

Executeu `print_export` dins de cada directori, que pren el manifest i la marca de l'instantània anterior i retorna el manifest i la marca d'aquesta; d'aquesta manera, podeu enllaçar-los correctament.
"Marca" és el terme `fast-import` per a un identificador que doneu a una confirmació; a mesura que creeu confirmacions, doneu a cadascuna una marca que podeu utilitzar per enllaçar-hi des d'altres confirmacions.
Per tant, la primera cosa a fer al vostre mètode `print_export` és generar una marca a partir del nom del directori:

[source,ruby]
----
mark = convert_dir_to_mark(dir)
----

Ho fareu creant una matriu de directoris i utilitzant el valor d'índex com a marca, perquè una marca ha de ser un enter.
El vostre mètode sembla així:

[source,ruby]
----
$marks = []
def convert_dir_to_mark(dir)
  if !$marks.include?(dir)
    $marks << dir
  end
  ($marks.index(dir) + 1).to_s
end
----

Ara que teniu una representació entera de la vostra confirmació, necessiteu una data per a les metadades de la confirmació.
Com que la data s'expressa al nom del directori, l'analitzareu.
La següent línia al vostre fitxer `print_export` és:

[source,ruby]
----
date = convert_dir_to_date(dir)
----

on `convert_dir_to_date` es defineix com:

[source,ruby]
----
def convert_dir_to_date(dir)
  if dir == 'current'
    return Time.now().to_i
  else
    dir = dir.gsub('back_', '')
    (year, month, day) = dir.split('_')
    return Time.local(year, month, day).to_i
  end
end
----

Això retorna un valor enter per a la data de cada directori.
L'última peça de metainformació que necessiteu per a cada confirmació són les dades de l'autor, que codifiqueu en una variable global:

[source,ruby]
----
$author = 'John Doe <john@example.com>'
----

Ara esteu llest per començar a imprimir les dades de confirmació per al vostre importador.
La informació inicial indica que esteu definint un objecte de confirmació i en quina branca es troba, seguit de la marca que heu generat, la informació de l'autor i el missatge de confirmació, i després la confirmació anterior, si n'hi ha.
El codi sembla així:

[source,ruby]
----
# print the import information
puts 'commit refs/heads/master'
puts 'mark :' + mark
puts "committer #{$author} #{date} -0700"
export_data('imported from ' + dir)
puts 'from :' + last_mark if last_mark
----

Codifiqueu la zona horària (-0700) perquè és fàcil de fer.
Si esteu important des d'un altre sistema, heu d'especificar la zona horària com a desfasament.
El missatge de confirmació s'ha d'expressar en un format especial:

[source]
----
data (size)\n(contents)
----

El format consisteix en la paraula data, la mida de les dades a llegir, una nova línia i finalment les dades.
Com que heu de utilitzar el mateix format per especificar el contingut dels fitxers més endavant, creeu un mètode auxiliar, `export_data`:

[source,ruby]
----
def export_data(string)
  print "data #{string.size}\n#{string}"
end
----

Tot el que queda és especificar el contingut dels fitxers per a cada instantània.
Això és fàcil, perquè en teniu cadascuna en un directori: podeu imprimir l'ordre `deleteall` seguida del contingut de cada fitxer al directori.
Git registrarà llavors cada instantània adequadament:

[source,ruby]
----
puts 'deleteall'
Dir.glob("**/*").each do |file|
  next if !File.file?(file)
  inline_data(file)
end
----

Nota: Com que molts sistemes pensen en les seves revisions com a canvis d'una confirmació a una altra, fast-import també pot prendre ordres amb cada confirmació per especificar quins fitxers s'han afegit, eliminat o modificat i quins són els nous continguts.
Podeu calcular les diferències entre instantànies i proporcionar només aquestes dades, però fer-ho és més complex: podeu donar a Git totes les dades i deixar que ho descobreixi.
Si això s'adapta millor a les vostres dades, consulteu la pàgina man de `fast-import` per obtenir detalls sobre com proporcionar les vostres dades d'aquesta manera.

El format per llistar els nous continguts dels fitxers o especificar un fitxer modificat amb els nous continguts és el següent:

[source]
----
M 644 inline path/to/file
data (size)
(file contents)
----

Aquí, 644 és el mode (si teniu fitxers executables, heu de detectar i especificar 755 en el seu lloc), i inline diu que llistareu els continguts immediatament després d'aquesta línia.
El vostre mètode `inline_data` sembla així:

[source,ruby]
----
def inline_data(file, code = 'M', mode = '644')
  content = File.read(file)
  puts "#{code} #{mode} inline #{file}"
  export_data(content)
end
----

Reutilitzeu el mètode `export_data` que vau definir anteriorment, perquè és el mateix que la manera com vau especificar les vostres dades de missatges de confirmació.

L'última cosa que heu de fer és retornar la marca actual perquè es pugui passar a la següent iteració:

[source,ruby]
----
return mark
----

[NOTE]
====
Si esteu executant en Windows, haureu de assegurar-vos d'afegir un pas addicional.
Com s'ha esmentat anteriorment, Windows utilitza CRLF per als caràcters de nova línia mentre que `git fast-import` espera només LF.
Per resoldre aquest problema i fer feliç `git fast-import`, heu de dir a ruby que utilitzi LF en lloc de CRLF:

[source,ruby]
----
$stdout.binmode
----
====

Això és tot.
Aquí teniu l'script en la seva totalitat:

[source,ruby]
----
#!/usr/bin/env ruby

$stdout.binmode
$author = "John Doe <john@example.com>"

$marks = []
def convert_dir_to_mark(dir)
    if !$marks.include?(dir)
        $marks << dir
    end
    ($marks.index(dir)+1).to_s
end

def convert_dir_to_date(dir)
    if dir == 'current'
        return Time.now().to_i
    else
        dir = dir.gsub('back_', '')
        (year, month, day) = dir.split('_')
        return Time.local(year, month, day).to_i
    end
end

def export_data(string)
    print "data #{string.size}\n#{string}"
end

def inline_data(file, code='M', mode='644')
    content = File.read(file)
    puts "#{code} #{mode} inline #{file}"
    export_data(content)
end

def print_export(dir, last_mark)
    date = convert_dir_to_date(dir)
    mark = convert_dir_to_mark(dir)

    puts 'commit refs/heads/master'
    puts "mark :#{mark}"
    puts "committer #{$author} #{date} -0700"
    export_data("imported from #{dir}")
    puts "from :#{last_mark}" if last_mark

    puts 'deleteall'
    Dir.glob("**/*").each do |file|
        next if !File.file?(file)
        inline_data(file)
    end
    mark
end

# Loop through the directories
last_mark = nil
Dir.chdir(ARGV[0]) do
    Dir.glob("*").each do |dir|
        next if File.file?(dir)

        # move into the target directory
        Dir.chdir(dir) do
            last_mark = print_export(dir, last_mark)
        end
    end
end
----

Si executeu aquest script, obtindreu un contingut que sembla alguna cosa així:

[source,console]
----
$ ruby import.rb /opt/import_from
commit refs/heads/master
mark :1
committer John Doe <john@example.com> 1388649600 -0700
data 29
imported from back_2014_01_02deleteall
M 644 inline README.md
data 28
# Hello

This is my readme.
commit refs/heads/master
mark :2
committer John Doe <john@example.com> 1388822400 -0700
data 29
imported from back_2014_01_04from :1
deleteall
M 644 inline main.rb
data 34
#!/bin/env ruby

puts "Hey there"
M 644 inline README.md
(...)
----

Per executar l'importador, canalitzeu aquesta sortida a través de `git fast-import` mentre esteu al directori Git on voleu importar.
Podeu crear un nou directori i després executar `git init` en ell com a punt de partida, i després executar el vostre script:

[source,console]
----
$ git init
Initialized empty Git repository in /opt/import_to/.git/
$ ruby import.rb /opt/import_from | git fast-import
git-fast-import statistics:
---------------------------------------------------------------------
Alloc'd objects:       5000
Total objects:           13 (         6 duplicates                  )
      blobs  :            5 (         4 duplicates          3 deltas of          5 attempts)
      trees  :            4 (         1 duplicates          0 deltas of          4 attempts)
      commits:            4 (         1 duplicates          0 deltas of          0 attempts)
      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)
Total branches:           1 (         1 loads     )
      marks:           1024 (         5 unique    )
      atoms:              2
Memory total:          2344 KiB
       pools:          2110 KiB
     objects:           234 KiB
---------------------------------------------------------------------
pack_report: getpagesize()            =       4096
pack_report: core.packedGitWindowSize = 1073741824
pack_report: core.packedGitLimit      = 8589934592
pack_report: pack_used_ctr            =         10
pack_report: pack_mmap_calls          =          5
pack_report: pack_open_windows        =          2 /          2
pack_report: pack_mapped              =       1457 /       1457
---------------------------------------------------------------------
----

Com podeu veure, quan es completa amb èxit, us dona un munt d'estadístiques sobre el que ha aconseguit.
En aquest cas, heu importat 13 objectes en total per a 4 confirmacions en 1 branca.
Ara, podeu executar `git log` per veure el vostre nou historial:

[source,console]
----
$ git log -2
commit 3caa046d4aac682a55867132ccdfbe0d3fdee498
Author: John Doe <john@example.com>
Date:   Tue Jul 29 19:39:04 2014 -0700

    imported from current

commit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def
Author: John Doe <john@example.com>
Date:   Mon Feb 3 01:00:00 2014 -0700

    imported from back_2014_02_03
----

Aquí el teniu: un repositori Git net i ordenat.
És important tenir en compte que res està revisat: no teniu cap fitxer al vostre directori de treball al principi.
Per obtenir-los, heu de restablir la vostra branca on es troba `master` ara:

[source,console]
----
$ ls
$ git reset --hard master
HEAD is now at 3caa046 imported from current
$ ls
README.md main.rb
----

Podeu fer molt més amb l'eina `fast-import`: gestionar diferents modes, dades binàries, múltiples branques i fusions, etiquetes, indicadors de progrés i més.
Hi ha diversos exemples de escenaris més complexos disponibles al directori `contrib/fast-import` del codi font de Git.
