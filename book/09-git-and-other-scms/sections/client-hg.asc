==== Git i Mercurial

(((Interoperació amb altres VCS, Mercurial)))
(((Mercurial)))
L'univers dels DVCS és més gran que només Git. De fet, hi ha molts altres sistemes en aquest espai, cadascun amb el seu propi enfocament sobre com fer el control de versions distribuït correctament. A part de Git, el més popular és Mercurial, i els dos són molt similars en molts aspectes.

La bona notícia és que si preferiu el comportament del costat del client de Git però esteu treballant en un projecte el codi font del qual està controlat amb Mercurial, hi ha una manera d'utilitzar Git com a client per a un repositori allotjat en Mercurial. Com que la manera en què Git parla amb els repositoris del servidor és a través de remots, no hauria de sorprendre que aquest pont s'implementi com un ajudant remot. El nom del projecte és git-remote-hg, i es pot trobar a https://github.com/felipec/git-remote-hg[^].

===== git-remote-hg

Primer, heu d'instal·lar git-remote-hg. Això bàsicament implica deixar el seu fitxer en algun lloc del vostre path, com ara:

[source,console]
----
$ curl -o ~/bin/git-remote-hg \
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
$ chmod +x ~/bin/git-remote-hg
----

...assumint que `~/bin` està al vostre `$PATH`. Git-remote-hg té una altra dependència: la biblioteca `mercurial` per a Python. Si teniu Python instal·lat, això és tan senzill com:

[source,console]
----
$ pip install mercurial
----

Si no teniu Python instal·lat, visiteu https://www.python.org/[^] i obteniu-lo primer.

L'última cosa que necessitareu és el client de Mercurial. Aneu a https://www.mercurial-scm.org/[^] i instaleu-lo si encara no ho heu fet.

Ara esteu llests per començar. Tot el que necessiteu és un repositori Mercurial al qual pugueu fer push. Afortunadament, cada repositori Mercurial pot actuar d'aquesta manera, així que simplement utilitzarem el repositori "hello world" que tots utilitzen per aprendre Mercurial:

[source,console]
----
$ hg clone http://selenic.com/repo/hello /tmp/hello
----

===== Començant

Ara que tenim un repositori "del costat del servidor" adequat, podem passar per un flux de treball típic. Com veureu, aquests dos sistemes són prou similars perquè no hi hagi gaire fricció.

Com sempre amb Git, primer clonem:

[source,console]
----
$ git clone hg::/tmp/hello /tmp/hello-git
$ cd /tmp/hello-git
$ git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

Notareu que treballar amb un repositori Mercurial utilitza l'ordre estàndard `git clone`. Això és perquè git-remote-hg està treballant a un nivell bastant baix, utilitzant un mecanisme similar a com està implementat el protocol HTTP/S de Git (ajudants remots). Com que Git i Mercurial estan dissenyats perquè cada client tingui una còpia completa de l'historial del repositori, aquesta ordre fa un clon complet, incloent tot l'historial del projecte, i ho fa bastant ràpid.

L'ordre `log` mostra dos commits, l'últim dels quals està apuntat per una colla de referències. Resulta que algunes d'aquestes no hi són realment. Fem una ullada al que hi ha realment al directori `.git`:

[source,console]
----
$ tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directoris, 5 fitxers
----

Git-remote-hg està intentant fer que les coses siguin més idiomàtiques de Git, però sota el capó està gestionant el mapeig conceptual entre dos sistemes una mica diferents. El directori `refs/hg` és on s'emmagatzemen les referències remotes reals. Per exemple, `refs/hg/origin/branches/default` és un fitxer de referència de Git que conté el SHA-1 que comença amb "ac7955c", que és el commit al qual apunta `master`. Així que el directori `refs/hg` és una mena de `refs/remotes/origin` fals, però té la distinció afegida entre marcadors i branques.

El fitxer `notes/hg` és el punt de partida de com git-remote-hg mapeja els hashes dels commits de Git als IDs dels conjunts de canvis de Mercurial. Explorem una mica:

[source,console]
----
$ cat notes/hg
d4c10386...

$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -0800
committer remote-hg <> 1408066400 -0800

Notes for master

$ git ls-tree 1781c96...
100644 blob ac9117f... 65bb417...
100644 blob 485e178... ac7955c...

$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9
----

Així que `refs/notes/hg` apunta a un arbre, que a la base de dades d'objectes de Git és una llista d'altres objectes amb noms. `git ls-tree` mostra el mode, tipus, hash de l'objecte i nom del fitxer per als elements dins d'un arbre. Un cop arribem a un dels elements de l'arbre, trobem que dins hi ha un blob anomenat "ac9117f" (el hash SHA-1 del commit al qual apunta `master`), amb contingut "0a04b98" (que és l'ID del conjunt de canvis de Mercurial a la punta de la branca `default`).

La bona notícia és que no hem de preocupar-nos gaire per tot això. El flux de treball típic no serà molt diferent de treballar amb un remot de Git.

Hi ha una cosa més a la qual hem d'atendre abans de continuar: els ignorats. Mercurial i Git utilitzen un mecanisme molt similar per a això, però és probable que no vulgueu confirmar realment un fitxer `.gitignore` en un repositori Mercurial. Afortunadament, Git té una manera d'ignorar fitxers que és local a un repositori al disc, i el format de Mercurial és compatible amb Git, així que només heu de copiar-lo:

[source,console]
----
$ cp .hgignore .git/info/exclude
----

El fitxer `.git/info/exclude` actua igual que un `.gitignore`, però no s'inclou en els commits.

===== Flux de treball

Suposem que hem fet alguna feina i hem fet alguns commits a la branca `master`, i esteu llest per pujar-los al repositori remot. Així és com es veu el nostre repositori ara mateix:

[source,console]
----
$ git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

La nostra branca `master` està dos commits per davant de `origin/master`, però aquests dos commits existeixen només a la nostra màquina local. Vegem si algú més ha estat fent feina important al mateix temps:

[source,console]
----
$ git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -> origin/master
   ac7955c..df85e87  branches/default -> origin/branches/default
$ git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

Com que vam utilitzar l'indicador `--all`, veiem les referències de "notes" que s'utilitzen internament per git-remote-hg, però podem ignorar-les. La resta és el que esperàvem; `origin/master` ha avançat un commit, i el nostre historial ha divergit ara. A diferència dels altres sistemes amb els quals treballem en aquest capítol, Mercurial és capaç de gestionar fusions, així que no farem res sofisticat.

[source,console]
----
$ git merge origin/master
Auto-merging hello.c
Merge made by the 'recursive' strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master'
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

Perfecte. Executem les proves i tot passa, així que estem llests per compartir la nostra feina amb la resta de l'equip:

[source,console]
----
$ git push
To hg::/tmp/hello
   df85e87..0c64627  master -> master
----

Això és tot! Si feu una ullada al repositori Mercurial, veureu que això ha fet el que esperàvem:

[source,console]
----
$ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard 'hello, world' program
----

El conjunt de canvis numerat _2_ va ser fet per Mercurial, i els conjunts de canvis numerats _3_ i _4_ van ser fets per git-remote-hg, pujant commits fets amb Git.

===== Branques i marcadors

Git només té un tipus de branca: una referència que es mou quan es fan commits. A Mercurial, aquest tipus de referència s'anomena "marcador", i es comporta de manera molt similar a una branca de Git.

El concepte de "branca" de Mercurial és una mica més pesant. La branca en la qual es fa un conjunt de canvis es registra amb el conjunt de canvis, cosa que significa que sempre estarà a l'historial del repositori. Aquí teniu un exemple d'un commit que es va fer a la branca `develop`:

[source,console]
----
$ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben@straub.cc>
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation
----

Observeu la línia que comença amb "branch". Git no pot realment replicar això (i no ho necessita; tots dos tipus de branca es poden representar com una referència de Git), però git-remote-hg necessita entendre la diferència, perquè Mercurial se'n preocupa.

Crear marcadors de Mercurial és tan fàcil com crear branques de Git. Des del costat de Git:

[source,console]
----
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -> featureA
----

Això és tot. Des del costat de Mercurial, sembla així:

[source,console]
----
$ hg bookmarks
   featureA                  5:bd5ac26f11f9
$ hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard 'hello, world' program
----

Observeu la nova etiqueta `[featureA]` a la revisió 5. Aquests actuen exactament com les branques de Git al costat de Git, amb una excepció: no podeu eliminar un marcador des del costat de Git (aquesta és una limitació dels ajudants remots).

Podeu treballar en una branca "pesada" de Mercurial també: simplement poseu una branca a l'espai de noms `branches`:

[source,console]
----
$ git checkout -b branches/permanent
Switched to a new branch 'branches/permanent'
$ vi Makefile
$ git commit -am 'A permanent change'
$ git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -> branches/permanent
----

Així és com es veu això des del costat de Mercurial:

[source,console]
----
$ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben@straub.cc>
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben@straub.cc>
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben@straub.cc>
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch 'origin/master'
[...]
----

El nom de la branca "permanent" es va registrar amb el conjunt de canvis marcat _7_.

Des del costat de Git, treballar amb qualsevol d'aquests estils de branca és el mateix: simplement feu checkout, commit, fetch, merge, pull i push com ho faríeu normalment. Una cosa que heu de saber és que Mercurial no suporta reescriure la història, només afegir-hi. Així és com es veu el nostre repositori Mercurial després d'un rebase interactiu i un force-push:

[source,console]
----
$ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch 'origin/master'
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

S'han creat els conjunts de canvis _8_, _9_ i _10_ i pertanyen a la branca `permanent`, però els vells conjunts de canvis encara hi són. Això pot ser molt confús per als vostres companys que utilitzen Mercurial, així que intenteu evitar-ho.

===== Resum de Mercurial

Git i Mercurial són prou similars perquè treballar a través de la frontera sigui bastant indolor. Si eviteu canviar la història que ha sortit del vostre ordinador (com es recomana generalment), potser ni tan sols us adoneu que l'altre extrem és Mercurial.
