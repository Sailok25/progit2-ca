[[_git_config]]
=== Configuració de Git

(((git commands, config)))
Com vas llegir breument a <<ch01-getting-started#ch01-getting-started>>, pots especificar la configuració de Git amb la comanda `git config`.
Una de les primeres coses que vas fer va ser configurar el teu nom i adreça de correu electrònic:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Ara aprendreu algunes de les opcions més interessants que podeu configurar d'aquesta manera per personalitzar l'ús de Git.

Primer, una revisió ràpida: Git utilitza una sèrie de fitxers de configuració per determinar el comportament no predeterminat que podeu voler.
El primer lloc on Git busca aquests valors és al fitxer de configuració de tot el sistema `[path]/etc/gitconfig`, que conté configuracions que s'apliquen a cada usuari del sistema i a tots els seus repositoris.
Si passeu l'opció `--system` a `git config`, llegeix i escriu des d'aquest fitxer específicament.

El següent lloc on Git busca és el fitxer `~/.gitconfig` (o `~/.config/git/config`), que és específic per a cada usuari.
Podeu fer que Git llegeixi i escriu en aquest fitxer passant l'opció `--global`.

Finalment, Git busca valors de configuració al fitxer de configuració al directori Git (`.git/config`) de qualsevol repositori que esteu utilitzant actualment.
Aquests valors són específics d'aquell únic repositori i representen passar l'opció `--local` a `git config`.
Si no especifiqueu amb quin nivell voleu treballar, aquest és el predeterminat.

Cada un d'aquests "`nivells`" (sistema, global, local) sobreescriu els valors del nivell anterior, així que els valors a `.git/config` tenen prioritat sobre els de `[path]/etc/gitconfig`, per exemple.

[NOTE]
====
Els fitxers de configuració de Git són de text pla, així que també podeu establir aquests valors editant manualment el fitxer i inserint la sintaxi correcta.
No obstant això, generalment és més fàcil executar la comanda `git config`.
====

==== Configuració Bàsica del Client

Les opcions de configuració reconegudes per Git es divideixen en dues categories: client i servidor.
La majoria de les opcions són del costat del client: configurar les vostres preferències de treball personals.
Moltes, moltes opcions de configuració són compatibles, però una gran fracció d'elles són útils només en certs casos específics; aquí cobrirem només les opcions més comunes i útils.
Si voleu veure una llista de totes les opcions que reconeix la vostra versió de Git, podeu executar:

[source,console]
----
$ man git-config
----

Aquesta comanda enumera totes les opcions disponibles amb bastant detall.
També podeu trobar aquest material de referència a https://git-scm.com/docs/git-config[^].

[NOTE]
====
Per a casos d'ús avançats, podeu buscar "Inclusió condicional" a la documentació esmentada anteriorment.
====

===== `core.editor`

((($EDITOR)))((($VISUAL, see $EDITOR)))
Per defecte, Git utilitza el que hàgiu establert com a editor de text per defecte mitjançant una de les variables d'entorn de l'intèrpret d'ordres `VISUAL` o `EDITOR`, o bé recorre a l'editor `vi` per crear i editar els vostres missatges de commit i etiquetes.
Per canviar aquest valor per defecte a una altra cosa, podeu utilitzar la configuració `core.editor`:

[source,console]
----
$ git config --global core.editor emacs
----

Ara, independentment del que estigui establert com a editor de l'intèrpret d'ordres per defecte, Git obrirà Emacs per editar els missatges.

===== `commit.template`

(((commit templates)))
Si configureu això amb la ruta d'un fitxer al vostre sistema, Git utilitzarà aquest fitxer com a missatge inicial per defecte quan feu un commit.
El valor de crear una plantilla de commit personalitzada és que podeu utilitzar-la per recordar-vos (o als altres) del format i estil adequats a l'hora de crear un missatge de commit.

Per exemple, considereu un fitxer de plantilla a `~/.gitmessage.txt` que sembli així:

[source,text]
----
Línia de subjecte (intenteu mantenir-la per sota de 50 caràcters)

Descripció multi-línia del commit,
no dubteu a ser detallats.

[Tiquet: X]
----

Observeu com aquesta plantilla de commit recorda a la persona que fa el commit que mantingui la línia de subjecte curta (per a la sortida de `git log --oneline`), que afegisci més detalls sota això, i que faci referència a un número de tiquet de seguiment d'incidències o errors si n'hi ha un.

Per dir a Git que l'utilitzi com a missatge per defecte que apareix a l'editor quan executeu `git commit`, configureu el valor de configuració `commit.template`:

[source,console]
----
$ git config --global commit.template ~/.gitmessage.txt
$ git commit
----

Llavors, el vostre editor s'obrirà amb alguna cosa com això per al vostre missatge de commit provisional quan feu un commit:

[source,text]
----
Línia de subjecte (intenteu mantenir-la per sota de 50 caràcters)

Descripció multi-línia del commit,
no dubteu a ser detallats.

[Tiquet: X]
# Si us plau, introduïu el missatge de commit per als vostres canvis. Les línies que comencen
# amb '#' seran ignorades, i un missatge buit aborta el commit.
# A la branca master
# Canvis a ser commitejats:
# (utilitzeu "git reset HEAD <file>..." per desfer l'estat)
#
# modificat: lib/test.rb
#
~
~
".git/COMMIT_EDITMSG" 14L, 297C
----

Si el vostre equip té una política de missatges de commit, llavors posar una plantilla per a aquesta política al vostre sistema i configurar Git per utilitzar-la per defecte pot ajudar a augmentar la possibilitat que aquesta política es segueixi regularment.

===== `core.pager`

(((pager)))
Aquesta configuració determina quin paginador s'utilitza quan Git pagina la sortida com `log` i `diff`.
Podeu establir-lo a `more` o al vostre paginador preferit (per defecte, és `less`), o podeu desactivar-lo establint-lo a una cadena buida:

[source,console]
----
$ git config --global core.pager ''
----

Si executeu això, Git imprimirà tota la sortida de totes les comandes, independentment de la seva longitud.

===== `user.signingkey`

(((GPG)))
Si esteu fent etiquetes anotades signades (com es va discutir a <<ch07-git-tools#_signing>>), establir la vostra clau de signatura GPG com a configuració facilita les coses.
Estableix la teva ID de clau així:

[source,console]
----
$ git config --global user.signingkey <gpg-key-id>
----

Ara, podeu signar etiquetes sense haver d'especificar la vostra clau cada vegada amb la comanda `git tag`:

[source,console]
----
$ git tag -s <tag-name>
----

===== `core.excludesfile`

(((excludes)))(((.gitignore)))
Podeu posar patrons al fitxer `.gitignore` del vostre projecte per fer que Git no els vegi com a fitxers no seguits o intenti posar-los en escena quan executeu `git add` sobre ells, com es va discutir a <<ch02-git-basics-chapter#_ignoring>>.

Però de vegades voleu ignorar certs fitxers per a tots els repositoris amb els quals treballeu.
Si el vostre ordinador està executant macOS, probablement esteu familiaritzat amb els fitxers `.DS_Store`.
Si el vostre editor preferit és Emacs o Vim, coneixeu els noms de fitxers que acaben amb `~` o `.swp`.

Aquesta configuració us permet escriure una mena de fitxer `.gitignore` global.
Si creeu un fitxer `~/.gitignore_global` amb aquest contingut:

[source,ini]
----
*~
.*.swp
.DS_Store
----

...i executeu `git config --global core.excludesfile ~/.gitignore_global`, Git ja no us molestarà més amb aquests fitxers.

===== `help.autocorrect`

(((autocorrect)))
Si escriviu malament una comanda, us mostra alguna cosa com això:

[source,console]
----
$ git chekcout master
git: 'chekcout' no és una comanda de git. Vegeu 'git --help'.

La comanda més similar és
----

Git intenta esbrinar què volíeu dir, però encara es nega a fer-ho.
Si configureu `help.autocorrect` a 1, Git executarà aquesta comanda per a vosaltres:

[source,console]
----
$ git chekcout master
AVÍS: Heu cridat una comanda de Git anomenada 'chekcout', que no existeix.
Continuant sota la suposició que volíeu dir 'checkout'
en 0.1 segons automàticament...
----

Observeu l'assumpte de "`0.1 segons`".
`help.autocorrect` és en realitat un enter que representa dècimes de segon.
Així que si el configureu a 50, Git us donarà 5 segons per canviar d'opinió abans d'executar la comanda autocorregida.

==== Colors a Git

(((color)))
Git suporta completament la sortida de terminal en color, la qual ajuda molt a analitzar visualment la sortida de les comandes de manera ràpida i fàcil.
Hi ha diverses opcions que us poden ajudar a configurar la coloració segons les vostres preferències.

===== `color.ui`

Git colorea automàticament la majoria de les seves sortides, però hi ha un interruptor mestre si no us agrada aquest comportament.
Per desactivar tota la sortida de terminal en color de Git, feu això:

[source,console]
----
$ git config --global color.ui false
----

La configuració predeterminada és `auto`, que colorea la sortida quan va directament a un terminal, però ometeix els codis de control de color quan la sortida es redirigeix a una canonada o a un fitxer.

També podeu establir-lo a `always` per ignorar la diferència entre terminals i canonades.
Rarament voldreu això; en la majoria d'escenaris, si voleu codis de color a la vostra sortida redirigida, podeu passar una bandera `--color` a la comanda Git per forçar-la a utilitzar codis de color.
La configuració predeterminada és gairebé sempre el que voldreu.

===== `color.*`

Si voleu ser més específics sobre quines comandes es coloregen i com, Git proporciona configuracions de coloració específiques per a cada verb.
Cada una d'aquestes es pot establir a `true`, `false` o `always`:

  color.branch
  color.diff
  color.interactive
  color.status

A més, cadascuna d'aquestes té subconfiguracions que podeu utilitzar per establir colors específics per a parts de la sortida, si voleu substituir cada color.
Per exemple, per establir la informació meta a la vostra sortida de diff amb primer pla blau, fons negre i text en negreta, podeu executar:

[source,console]
----
$ git config --global color.diff.meta "blue black bold"
----

Podeu establir el color a qualsevol dels següents valors: `normal`, `black`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan` o `white`.
Si voleu un atribut com negreta a l'exemple anterior, podeu triar entre `bold`, `dim`, `ul` (subratllat), `blink` i `reverse` (intercanviar primer pla i fons).

[[_external_merge_tools]]
==== Eines Externes de Fusió i Diff

(((mergetool)))(((difftool)))
Tot i que Git té una implementació interna de diff, que és el que hem estat mostrant en aquest llibre, podeu configurar una eina externa en el seu lloc.
També podeu configurar una eina gràfica de resolució de conflictes de fusió en lloc de resoldre els conflictes manualment.
Demostrarem la configuració de l'Eina Visual de Fusió de Perforce (P4Merge) per fer els vostres diffs i resolucions de fusió, perquè és una eina gràfica bonica i és gratuïta.

Si voleu provar això, P4Merge funciona en totes les plataformes principals, així que hauríeu de poder fer-ho.
Utilitzarem noms de ruta a les exemples que funcionen en sistemes macOS i Linux; per a Windows, haureu de canviar `/usr/local/bin` per una ruta executable al vostre entorn.

Per començar, https://www.perforce.com/products/helix-core-apps/merge-diff-tool-p4merge[descarregueu P4Merge de Perforce^].
A continuació, configurareu scripts d'envoltori externs per executar les vostres comandes.
Utilitzarem la ruta de macOS per a l'executable; en altres sistemes, serà on s'instal·li el vostre binari `p4merge`.
Configureu un script d'envoltori de fusió anomenat `extMerge` que cridi el vostre binari amb tots els arguments proporcionats:

[source,console]
----
$ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/p4merge.app/Contents/MacOS/p4merge $*
----

L'envoltori de diff comprova que es proporcionen set arguments i passa dos d'ells al vostre script de fusió.
Per defecte, Git passa els següents arguments al programa de diff:

[source]
----
path old-file old-hex old-mode new-file new-hex new-mode
----

Com que només voleu els arguments `old-file` i `new-file`, utilitzeu l'script d'envoltori per passar els que necessiteu.

[source,console]
----
$ cat /usr/local/bin/extDiff
#!/bin/sh
[ $# -eq 7 ] && /usr/local/bin/extMerge "$2" "$5"
----

També heu d'assegurar-vos que aquestes eines són executables:

[source,console]
----
$ sudo chmod +x /usr/local/bin/extMerge
$ sudo chmod +x /usr/local/bin/extDiff
----

Ara podeu configurar el vostre fitxer de configuració per utilitzar les vostres eines personalitzades de resolució de fusió i diff.
Això requereix diverses configuracions personalitzades: `merge.tool` per dir a Git quina estratègia utilitzar, `mergetool.<tool>.cmd` per especificar com executar la comanda, `mergetool.<tool>.trustExitCode` per dir a Git si el codi de sortida d'aquest programa indica una resolució de fusió exitosa o no, i `diff.external` per dir a Git quina comanda executar per als diffs.
Així que, podeu executar quatre comandes de configuració:

[source,console]
----
$ git config --global merge.tool extMerge
$ git config --global mergetool.extMerge.cmd \
  'extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"'
$ git config --global mergetool.extMerge.trustExitCode false
$ git config --global diff.external extDiff
----

o podeu editar el vostre fitxer `~/.gitconfig` per afegir aquestes línies:

[source,ini]
----
[merge]
  tool = extMerge
[mergetool "extMerge"]
  cmd = extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
  trustExitCode = false
[diff]
  external = extDiff
----

Després de tot això, si executeu comandes de diff com aquesta:

[source,console]
----
$ git diff 32d1776b1^ 32d1776b1
----

En lloc d'obtenir la sortida de diff a la línia de comandes, Git obrirà P4Merge, que semblarà alguna cosa així:

.P4Merge
image::images/p4merge.png[P4Merge]

Si intenteu fusionar dues branques i posteriorment teniu conflictes de fusió, podeu executar la comanda `git mergetool`; inicia P4Merge per permetre-vos resoldre els conflictes a través d'aquesta eina gràfica.

El bonic d'aquesta configuració d'envoltori és que podeu canviar les vostres eines de diff i fusió fàcilment.
Per exemple, per canviar les vostres eines `extDiff` i `extMerge` per executar l'eina KDiff3 en el seu lloc, tot el que heu de fer és editar el vostre fitxer `extMerge`:

[source,console]
----
$ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*
----

Ara, Git utilitzarà l'eina KDiff3 per a la visualització de diffs i la resolució de conflictes de fusió.

Git ve preconfigurat per utilitzar una sèrie d'altres eines de resolució de fusió sense que hàgiu de configurar la comanda de configuració.
Per veure una llista de les eines que admet, proveu això:

[source,console]
----
$ git mergetool --tool-help
'git mergetool --tool=<tool>' pot establir-se a una de les següents:
        emerge
        gvimdiff
        gvimdiff2
        opendiff
        p4merge
        vimdiff
        vimdiff2

Les següents eines són vàlides, però actualment no estan disponibles:
        araxis
        bc3
        codecompare
        deltawalker
        diffmerge
        diffuse
        ecmerge
        kdiff3
        meld
        tkdiff
        tortoisemerge
        xxdiff

Algunes de les eines esmentades anteriorment només funcionen en un entorn amb finestres.
Si s'executen en una sessió només de terminal, fallaran.
----

Si no esteu interessat a utilitzar KDiff3 per a diff sinó que preferiu utilitzar-lo només per a la resolució de fusió, i la comanda kdiff3 està al vostre camí, llavors podeu executar:

[source,console]
----
$ git config --global merge.tool kdiff3
----

Si executeu això en lloc de configurar els fitxers `extMerge` i `extDiff`, Git utilitzarà KDiff3 per a la resolució de fusió i l'eina de diff normal de Git per als diffs.

==== Format i Espais en Blanc

(((whitespace)))
Els problemes de format i espais en blanc són alguns dels problemes més frustrants i subtils que molts desenvolupadors troben quan col·laboren, especialment entre plataformes.
És molt fàcil que els parxos o altres treballs col·laboratius introdueixin canvis subtils d'espais en blanc perquè els editors els introdueixen en silenci, i si els vostres fitxers toquen mai un sistema Windows, els seus finals de línia poden ser reemplaçats.
Git té algunes opcions de configuració per ajudar amb aquests problemes.

===== `core.autocrlf`

(((crlf)))(((line endings)))
Si esteu programant a Windows i treballant amb persones que no ho fan (o a l'inrevés), probablement us trobarieu amb problemes de final de línia en algun moment.
Això és perquè Windows utilitza tant un caràcter de retorn de carro com un caràcter d'avanç de línia per als nous línies als seus fitxers, mentre que els sistemes macOS i Linux utilitzen només el caràcter d'avanç de línia.
Aquest és un fet subtil però increïblement molest del treball entre plataformes; molts editors a Windows reemplacen silenciosament els finals de línia de tipus LF existents amb CRLF, o insereixen tots dos caràcters de final de línia quan l'usuari prem la tecla d'entrada.

Git pot gestionar això convertint automàticament els finals de línia CRLF en LF quan afegiu un fitxer a l'índex, i viceversa quan treu el codi al vostre sistema de fitxers.
Podeu activar aquesta funcionalitat amb la configuració `core.autocrlf`.
Si esteu en una màquina Windows, configureu-la a `true`: això converteix els finals LF en CRLF quan treieu el codi:

[source,console]
----
$ git config --global core.autocrlf true
----

Si esteu en un sistema Linux o macOS que utilitza finals de línia LF, llavors no voleu que Git els converteixi automàticament quan treieu els fitxers; no obstant això, si un fitxer amb finals CRLF s'introdueix accidentalment, llavors potser voleu que Git el corregisca.
Podeu dir a Git que converteixi CRLF a LF en el commit però no a l'inrevés establint `core.autocrlf` a `input`:

[source,console]
----
$ git config --global core.autocrlf input
----

Aquesta configuració hauria de deixar-vos amb finals CRLF a les extraccions de Windows, però finals LF als sistemes macOS i Linux i al repositori.

Si sou un programador de Windows fent un projecte només per a Windows, llavors podeu desactivar aquesta funcionalitat, registrant els retorns de carro al repositori establint el valor de configuració a `false`:

[source,console]
----
$ git config --global core.autocrlf false
----

===== `core.whitespace`

Git ve preconfigurat per detectar i corregir alguns problemes d'espais en blanc.
Pot buscar sis problemes principals d'espais en blanc: tres estan habilitats per defecte i es poden desactivar, i tres estan desactivats per defecte però es poden activar.

Els tres que estan activats per defecte són `blank-at-eol`, que busca espais al final d'una línia; `blank-at-eof`, que nota línies en blanc al final d'un fitxer; i `space-before-tab`, que busca espais abans de tabulacions al començament d'una línia.

Els tres que estan desactivats per defecte però es poden activar són `indent-with-non-tab`, que busca línies que comencen amb espais en lloc de tabulacions (i està controlat per l'opció `tabwidth`); `tab-in-indent`, que vigila les tabulacions a la porció de sangria d'una línia; i `cr-at-eol`, que diu a Git que els retorns de carro al final de les línies estan bé.

Podeu dir a Git quins d'aquests voleu habilitar establint `core.whitespace` als valors que voleu activar o desactivar, separats per comes.
Podeu desactivar una opció afegint un `-` davant del seu nom, o utilitzar el valor per defecte deixant-lo fora de la cadena de configuració completament.
Per exemple, si voleu establir tots excepte `space-before-tab`, podeu fer això (amb `trailing-space` sent una forma abreujada per cobrir tant `blank-at-eol` com `blank-at-eof`):

[source,console]
----
$ git config --global core.whitespace \
    trailing-space,-space-before-tab,indent-with-non-tab,tab-in-indent,cr-at-eol
----

O podeu especificar només la part de personalització:

[source,console]
----
$ git config --global core.whitespace \
    -space-before-tab,indent-with-non-tab,tab-in-indent,cr-at-eol
----

Git detectarà aquests problemes quan executeu una comanda `git diff` i intentarà colorar-los perquè possiblement els corregiu abans de fer el commit.
També utilitzarà aquests valors per ajudar-vos quan apliqueu parxos amb `git apply`.
Quan esteu aplicant parxos, podeu demanar a Git que us avisi si està aplicant parxos amb els problemes d'espais en blanc especificats:

[source,console]
----
$ git apply --whitespace=warn <patch>
----

O podeu fer que Git intenti corregir automàticament el problema abans d'aplicar el parxo:

[source,console]
----
$ git apply --whitespace=fix <patch>
----

Aquestes opcions també s'apliquen a la comanda `git rebase`.
Si heu commitejat problemes d'espais en blanc però encara no heu pujat a l'amunt, podeu executar `git rebase --whitespace=fix` per fer que Git corregisca automàticament els problemes d'espais en blanc mentre està reescriuint els parxos.

==== Configuració del Servidor

No hi ha gairebé tantes opcions de configuració disponibles per al costat del servidor de Git, però hi ha algunes opcions interessants que potser voleu tenir en compte.

===== `receive.fsckObjects`

Git és capaç d'assegurar-se que cada objecte rebut durant un push encara coincideixi amb la seva suma de comprovació SHA-1 i apunti a objectes vàlids.
No obstant això, no ho fa per defecte; és una operació bastant costosa i podria alentir l'operació, especialment en repositoris o pushes grans.
Si voleu que Git comproveu la consistència dels objectes en cada push, podeu forçar-lo a fer-ho establint `receive.fsckObjects` a true:

[source,console]
----
$ git config --system receive.fsckObjects true
----

Ara, Git comprovarà la integritat del vostre repositori abans que cada push sigui acceptat per assegurar-se que els clients defectuosos (o maliciosos) no introdueixin dades corruptes.

===== `receive.denyNonFastForwards`

Si rebaseu commits que ja heu pujat i després intenteu pujar de nou, o intenteu pujar un commit a una branca remota que no conté el commit al qual la branca remota apunta actualment, se us denegarà.
Això generalment és una bona política; però en el cas del rebase, podeu determinar que sabeu el que esteu fent i podeu forçar l'actualització de la branca remota amb una bandera `-f` a la vostra comanda de push.

Per dir a Git que rebutgi els force-pushes, estableix `receive.denyNonFastForwards`:

[source,console]
----
$ git config --system receive.denyNonFastForwards true
----

L'altra manera de fer això és mitjançant els hooks de recepció del costat del servidor, que cobrirem en un moment.
Aquest enfocament us permet fer coses més complexes com denegar non-fast-forwards a un cert subconjunt d'usuaris.

===== `receive.denyDeletes`

Un dels treballs al voltant de la política `denyNonFastForwards` és que l'usuari elimini la branca i després la pugui de nou amb la nova referència.
Per evitar això, estableix `receive.denyDeletes` a true:

[source,console]
----
$ git config --system receive.denyDeletes true
----

Això denega qualsevol eliminació de branques o etiquetes: cap usuari pot fer-ho.
Per eliminar branques remotes, heu d'eliminar els fitxers de referència del servidor manualment.
També hi ha maneres més interessants de fer això per usuari mitjançant ACLs, com aprendreu a <<ch08-customizing-git#_an_example_git_enforced_policy>>.
