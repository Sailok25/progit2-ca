[[_getting_git_on_a_server]]
=== Obtenir Git en un Servidor

Ara tractarem la configuració d'un servei Git que executa aquests protocols en el vostre propi servidor.

[NOTE]
====
Aquí demostrarem els comandaments i passos necessaris per fer instal·lacions bàsiques i simplificades en un servidor basat en Linux, tot i que també és possible executar aquests serveis en servidors macOS o Windows.
La configuració real d'un servidor de producció dins de la vostra infraestructura segurament comportarà diferències en les mesures de seguretat o eines del sistema operatiu, però esperem que això us doni una idea general del que implica.
====

Per configurar inicialment qualsevol servidor Git, heu d'exportar un repositori existent a un nou repositori nu -- un repositori que no conté un directori de treball.
Això és generalment senzill de fer.
Per clonar el vostre repositori i crear un nou repositori nu, executeu l'ordre de clonació amb l'opció `--bare`.
Per convenció, els noms dels directoris dels repositoris nus acaben amb el sufix `.git`, com aquest:

(((git commands, clone, bare)))

[source,console]
----
$ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done.
----

Ara hauries de tenir una còpia de les dades del directori Git al teu directori `my_project.git`.

Això és aproximadament equivalent a alguna cosa com:

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

Hi ha algunes diferències menors en el fitxer de configuració, però, per al vostre propòsit, això és gairebé el mateix.
Prèn el repositori Git per si mateix, sense un directori de treball, i crea un directori específicament per a ell sol.

[[_bare_repo]]
==== Col·locar el Repositori Nu en un Servidor

Ara que tens una còpia nua del teu repositori, tot el que has de fer és posar-la en un servidor i configurar els teus protocols.
Digueu que heu configurat un servidor anomenat `git.example.com` al qual teniu accés SSH, i voleu emmagatzemar tots els vostres repositoris Git sota el directori `/srv/git`.
Suposant que `/srv/git` existeixi en aquest servidor, podeu configurar el vostre nou repositori copiant el vostre repositori nu:

[source,console]
----
$ scp -r my_project.git user@git.example.com:/srv/git
----

En aquest punt, altres usuaris que tinguin accés de lectura basat en SSH al directori `/srv/git` en aquest servidor poden clonar el vostre repositori executant:

[source,console]
----
$ git clone user@git.example.com:/srv/git/my_project.git
----

Si un usuari accedeix per SSH a un servidor i té permisos d'escriptura al directori `/srv/git/my_project.git`, també tindran automàticament accés de push.

Git afegirà automàticament permisos d'escriptura de grup a un repositori correctament si executeu l'ordre `git init` amb l'opció `--shared`.
Noteu que en executar aquesta ordre, no destruireu cap commit, referències, etc. en el procés.

(((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /srv/git/my_project.git
$ git init --bare --shared
----

Veieu com és fàcil prendre un repositori Git, crear una versió nua i col·locar-la en un servidor al qual vosaltres i els vostres col·laboradors tingueu accés SSH.
Ara esteu preparats per col·laborar en el mateix projecte.

És important tenir en compte que això és literalment tot el que heu de fer per executar un servidor Git útil al qual diverses persones tenen accés: simplement afegiu comptes amb accés SSH en un servidor i col·loqueu un repositori nu en algun lloc on tots aquests usuaris tinguin accés de lectura i escriptura.
Esteu preparats per començar, no es necessita res més.

En les següents seccions, veureu com expandir-vos a configuracions més sofisticades.
Aquesta discussió inclourà no haver de crear comptes d'usuari per a cada usuari, afegir accés de lectura pública als repositoris, configurar interfícies d'usuari web i més.
No obstant això, tingueu en compte que per col·laborar amb unes quantes persones en un projecte privat, tot el que necessiteu és un servidor SSH i un repositori nu.

==== Configuracions Petites

Si sou una petita organització o esteu provant Git a la vostra organització i només teniu uns quants desenvolupadors, les coses poden ser senzilles per a vosaltres.
Un dels aspectes més complicats de configurar un servidor Git és la gestió d'usuaris.
Si voleu que alguns repositoris siguin de només lectura per a certs usuaris i de lectura/escriptura per a altres, l'accés i els permisos poden ser una mica més difícils d'organitzar.

===== Accés SSH

(((serving repositories, SSH)))
Si teniu un servidor al qual tots els vostres desenvolupadors ja tenen accés SSH, generalment és més fàcil configurar-hi el vostre primer repositori, perquè gairebé no heu de fer feina (com vam tractar a l'última secció).
Si voleu permisos de control d'accés més complexos als vostres repositoris, podeu gestionar-los amb els permisos normals del sistema de fitxers del sistema operatiu del vostre servidor.

Si voleu col·locar els vostres repositoris en un servidor que no té comptes per a tots els membres del vostre equip als quals voleu concedir accés d'escriptura, llavors heu de configurar l'accés SSH per a ells.
Suposem que si teniu un servidor amb el qual fer això, ja teniu un servidor SSH instal·lat, i així és com esteu accedint al servidor.

Hi ha diverses maneres de donar accés a tots els membres del vostre equip.
La primera és configurar comptes per a tots, cosa que és senzilla però pot ser tediosa.
Potser no voleu executar `adduser` (o l'alternativa possible `useradd`) i haver de establir contrasenyes temporals per a cada nou usuari.

Un segon mètode és crear un únic compte d'usuari 'git' a la màquina, demanar a cada usuari que ha de tenir accés d'escriptura que us enviï una clau pública SSH, i afegir aquesta clau al fitxer `~/.ssh/authorized_keys` d'aquest nou compte 'git'.
En aquest punt, tots podran accedir a aquesta màquina a través del compte 'git'.
Això no afecta les dades de commit de cap manera: l'usuari SSH amb el qual us connecteu no afecta els commits que heu registrat.

Una altra manera de fer-ho és que el vostre servidor SSH s'autentiqui des d'un servidor LDAP o alguna altra font d'autenticació centralitzada que ja pugueu tenir configurada.
Sempre que cada usuari pugui obtenir accés a la shell a la màquina, qualsevol mecanisme d'autenticació SSH que pugueu pensar hauria de funcionar.
