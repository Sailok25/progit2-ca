=== Els Protocols

Git pot utilitzar quatre protocols diferents per transferir dades: Local, HTTP, Secure Shell (SSH) i Git.
Aquí discutirem què són i en quines circumstàncies bàsiques voldries (o no voldries) utilitzar-los.

==== Protocol Local

(((protocols, local)))
El més bàsic és el protocol _Local_, en el qual el repositori remot es troba en un altre directori al mateix host.
Això sovint s'utilitza si tots al teu equip tenen accés a un sistema de fitxers compartit com una muntura https://en.wikipedia.org/wiki/Network_File_System[NFS^], o en el cas menys probable que tots inicien sessió al mateix ordinador.
Aquest últim no seria ideal, perquè totes les instàncies del teu repositori de codi residirien al mateix ordinador, fent que una pèrdua catastròfica sigui molt més probable.

Si tens un sistema de fitxers muntat compartit, llavors pots clonar, fer push i pull des d'un repositori basat en fitxers locals.
Per clonar un repositori com aquest, o per afegir-ne un com a remot a un projecte existent, utilitza la ruta al repositori com a URL.
Per exemple, per clonar un repositori local, pots executar alguna cosa com això:

[source,console]
----
$ git clone /srv/git/project.git
----

O pots fer això:

[source,console]
----
$ git clone file:///srv/git/project.git
----

Git opera una mica diferent si especifiques explícitament `file://` al principi de la URL.
Si simplement especifiques la ruta, Git intenta utilitzar enllaços durs o copiar directament els fitxers que necessita.
Si especifiques `file://`, Git inicia els processos que normalment utilitza per transferir dades a través d'una xarxa, la qual cosa generalment és molt menys eficient.
La raó principal per especificar el prefix `file://` és si vols una còpia neta del repositori amb referències o objectes extrans exclosos, generalment després d'una importació des d'un altre VCS o alguna cosa similar (vegeu <<ch10-git-internals#ch10-git-internals>> per a tasques de manteniment).
Utilitzarem la ruta normal aquí perquè fer-ho és gairebé sempre més ràpid.

Per afegir un repositori local a un projecte Git existent, pots executar alguna cosa com això:

[source,console]
----
$ git remote add local_proj /srv/git/project.git
----

Llavors, pots fer push i pull des d'aquest remot a través del teu nou nom remot `local_proj` com si ho fessis a través d'una xarxa.

===== Els Pros

Els avantatges dels repositoris basats en fitxers són que són senzills i utilitzen els permisos de fitxers i l'accés a la xarxa existents.
Si ja tens un sistema de fitxers compartit al qual tot el teu equip té accés, configurar un repositori és molt fàcil.
Col·loques la còpia del repositori nu en un lloc on tots tenen accés compartit i configures els permisos de lectura/escriptura com ho faries per a qualsevol altre directori compartit.
Discutirem com exportar una còpia de repositori nu per a aquest propòsit a <<ch04-git-on-the-server#_getting_git_on_a_server>>.

Això també és una bona opció per agafar ràpidament la feina del repositori de treball d'algú altre.
Si tu i un company de feina esteu treballant en el mateix projecte i ell vol que revisis alguna cosa, executar un comandament com `git pull /home/john/project` sovint és més fàcil que ell faci push a un servidor remot i tu posteriorment facis fetch des d'ell.

===== Els Contres

Els inconvenients d'aquest mètode són que l'accés compartit generalment és més difícil de configurar i accedir des de múltiples ubicacions que l'accés bàsic a la xarxa.
Si vols fer push des del teu portàtil quan estàs a casa, has de muntar el disc remot, el qual pot ser difícil i lent en comparació amb l'accés basat en xarxa.

És important esmentar que això no és necessàriament l'opció més ràpida si estàs utilitzant una muntura compartida d'algun tipus.
Un repositori local és ràpid només si tens accés ràpid a les dades.
Un repositori a NFS sovint és més lent que el repositori a través de SSH al mateix servidor, permetent que Git funcioni amb discs locals a cada sistema.

Finalment, aquest protocol no protegeix el repositori contra danys accidentals.
Cada usuari té accés complet a la shell al directori "`remot`", i no hi ha res que els impedeixi canviar o eliminar fitxers interns de Git i corrompre el repositori.

==== Els Protocols HTTP

Git pot comunicar-se a través d'HTTP utilitzant dos modes diferents.
Abans de Git 1.6.6, només hi havia una manera de fer-ho que era molt simple i generalment de només lectura.
A la versió 1.6.6, es va introduir un nou protocol més intel·ligent que implicava que Git pogués negociar intel·ligentment la transferència de dades d'una manera similar a com ho fa a través de SSH.
En els últims anys, aquest nou protocol HTTP s'ha tornat molt popular ja que és més senzill per a l'usuari i més intel·ligent en la manera com es comunica.
La versió més nova sovint es refereix com el protocol HTTP _Smart_ i l'antiga manera com HTTP _Dumb_.
Tractarem primer el protocol HTTP Smart més nou.

===== Smart HTTP

(((protocols, smart HTTP)))
Smart HTTP opera de manera molt similar als protocols SSH o Git però funciona a través dels ports HTTPS estàndard i pot utilitzar diversos mecanismes d'autenticació HTTP, cosa que significa que sovint és més fàcil per a l'usuari que alguna cosa com SSH, ja que pots utilitzar coses com autenticació amb nom d'usuari/contrasenya en lloc d'haver de configurar claus SSH.

Probablement s'ha convertit en la manera més popular d'utilitzar Git ara, ja que es pot configurar per servir de manera anònima com el protocol `git://`, i també es pot fer push amb autenticació i xifratge com el protocol SSH.
En lloc d'haver de configurar diferents URLs per a aquestes coses, ara pots utilitzar una única URL per a ambdues.
Si intentes fer push i el repositori requereix autenticació (el qual normalment hauria de fer), el servidor pot demanar un nom d'usuari i contrasenya.
El mateix passa per a l'accés de lectura.

De fet, per a serveis com GitHub, la URL que utilitzes per veure el repositori en línia (per exemple, https://github.com/schacon/simplegit[^]) és la mateixa URL que pots utilitzar per clonar i, si tens accés, fer push.

===== Dumb HTTP

(((protocols, dumb HTTP)))
Si el servidor no respon amb un servei intel·ligent HTTP de Git, el client Git intentarà recórrer al protocol HTTP _Dumb_ més simple.
El protocol Dumb espera que el repositori Git nu es serveixi com a fitxers normals des del servidor web.
La bellesa de Dumb HTTP és la simplicitat de configurar-lo.
Bàsicament, tot el que has de fer és posar un repositori Git nu sota l'arrel de documents HTTP i configurar un ganxo `post-update` específic, i ja estàs fet (vegeu <<ch08-customizing-git#_git_hooks>>).
En aquest punt, qualsevol persona que pugui accedir al servidor web sota el qual vas posar el repositori també pot clonar el teu repositori.
Per permetre l'accés de lectura al teu repositori a través d'HTTP, fes alguna cosa com això:

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

Això és tot.(((hooks, post-update)))
El ganxo `post-update` que ve amb Git per defecte executa el comandament adequat (`git update-server-info`) per fer que la recuperació i clonació HTTP funcionin correctament.
Aquest comandament s'executa quan fas push a aquest repositori (potser a través de SSH); llavors, altres persones poden clonar a través de alguna cosa com:

[source,console]
----
$ git clone https://example.com/gitproject.git
----

En aquest cas particular, estem utilitzant la ruta `/var/www/htdocs` comuna per a configuracions d'Apache, però pots utilitzar qualsevol servidor web estàtic, simplement posa el repositori nu al seu camí.
Les dades de Git es serveixen com a fitxers estàtics bàsics (vegeu el capítol <<ch10-git-internals#ch10-git-internals>> per a detalls sobre com es serveix exactament).

Generalment triaries entre executar un servidor Smart HTTP de lectura/escriptura o simplement tenir els fitxers accessibles com a només lectura de manera Dumb.
És rar executar una barreja dels dos serveis.

===== Els Pros

Ens concentrarem en els avantatges de la versió Smart del protocol HTTP.

La simplicitat de tenir una única URL per a tots els tipus d'accés i que el servidor demani només quan es necessiti autenticació fa que les coses siguin molt fàcils per a l'usuari final.
Poder autenticar-se amb un nom d'usuari i contrasenya també és un gran avantatge sobre SSH, ja que els usuaris no han de generar claus SSH localment i pujar la seva clau pública al servidor abans de poder interactuar amb ell.
Per a usuaris menys sofisticats, o usuaris en sistemes on SSH és menys comú, això és un avantatge major en usabilitat.
També és un protocol molt ràpid i eficient, similar al d'SSH.

També pots servir els teus repositoris només lectura sobre HTTPS, el que significa que pots xifrar la transferència de contingut; o pots arribar tan lluny com a fer que els clients utilitzin certificats SSL signats específics.

Una altra cosa bona és que HTTP i HTTPS són protocols tan comunament utilitzats que els tallafocs corporatius sovint estan configurats per permetre el trànsit a través dels seus ports.

===== Els Contres

Git sobre HTTPS pot ser una mica més complicat de configurar en comparació amb SSH en alguns servidors.
A part d'això, hi ha molt poc avantatge que altres protocols tinguin sobre Smart HTTP per servir contingut Git.

Si estàs utilitzant HTTP per a push autenticats, proporcionar les teves credencials de vegades és més complicat que utilitzar claus sobre SSH.
No obstant això, hi ha diverses eines de caché de credencials que pots utilitzar, incloent l'accés a Keychain a macOS i Credential Manager a Windows, per fer això bastant indolor.
Llegeix <<ch07-git-tools#_credential_caching>> per veure com configurar la caché segura de contrasenyes HTTP al teu sistema.

==== El Protocol SSH

(((protocols, SSH)))
Un protocol de transport comú per a Git quan s'autoallotja és a través de SSH.
Això és perquè l'accés SSH als servidors ja està configurat a la majoria de llocs, i si no ho està, és fàcil de fer.
SSH també és un protocol de xarxa autenticat i, perquè és ubicu, generalment és fàcil de configurar i utilitzar.

Per clonar un repositori Git a través de SSH, pots especificar una URL `ssh://` com aquesta:

[source,console]
----
$ git clone ssh://[user@]server/project.git
----

O pots utilitzar la sintaxi més curta similar a scp per al protocol SSH:

[source,console]
----
$ git clone [user@]server:project.git
----

En ambdós casos anteriors, si no especifiques el nom d'usuari opcional, Git assumeix l'usuari amb el qual estàs connectat actualment.

===== Els Pros

Els avantatges d'utilitzar SSH són molts.
Primer, SSH és relativament fàcil de configurar: els dimonis SSH són comuns, molts administradors de xarxa tenen experiència amb ells, i moltes distribucions de sistemes operatius estan configurades amb ells o tenen eines per gestionar-los.
A continuació, l'accés a través de SSH és segur: totes les transferències de dades estan xifrades i autenticades.
Finalment, com els protocols HTTPS, Git i Local, SSH és eficient, fent les dades tan compactes com sigui possible abans de transferir-les.

===== Els Contres

L'aspecte negatiu de SSH és que no admet l'accés anònim al teu repositori Git.
Si estàs utilitzant SSH, les persones _han_ de tenir accés SSH a la teva màquina, fins i tot en una capacitat de només lectura, la qual cosa no fa que SSH sigui propici per a projectes de codi obert per als quals les persones podrien simplement voler clonar el teu repositori per examinar-lo.
Si l'utilitzes només dins de la teva xarxa corporativa, SSH pot ser l'únic protocol amb el qual hagis de tractar.
Si vols permetre accés anònim de només lectura als teus projectes i també vols utilitzar SSH, hauràs de configurar SSH per fer push, però alguna altra cosa perquè altres puguin fer fetch.

==== El Protocol Git

(((protocols, git)))
Finalment, tenim el protocol Git.
Aquest és un dimoni especial que ve empaquetat amb Git; escolta en un port dedicat (9418) que proporciona un servei similar al protocol SSH, però sense cap autenticació o criptografia.
Perquè un repositori sigui servit a través del protocol Git, has de crear un fitxer `git-daemon-export-ok`: el dimoni no servirà un repositori sense aquest fitxer, però, a part d'això, no hi ha seguretat.
O el repositori Git està disponible per a tots per clonar, o no ho està.
Això significa que generalment no hi ha push a través d'aquest protocol.
Pots habilitar l'accés de push però, donada la manca d'autenticació, qualsevol persona a internet que trobi la URL del teu projecte podria fer push a aquest projecte.
N'hi ha prou amb dir que això és rar.

===== Els Pros

El protocol Git sovint és el protocol de transferència de xarxa més ràpid disponible.
Si estàs servint molt de trànsit per a un projecte públic o servint un projecte molt gran que no requereix autenticació d'usuari per a l'accés de lectura, és probable que vulguis configurar un dimoni Git per servir el teu projecte.
Utilitza el mateix mecanisme de transferència de dades que el protocol SSH però sense la sobrecàrrega de xifratge i autenticació.

===== Els Contres

A causa de la manca de TLS o una altra criptografia, clonar a través de `git://` podria portar a una vulnerabilitat d'execució de codi arbitrari, i per tant s'hauria d'evitar a menys que sàpigues el que estàs fent.

* Si executes `git clone git://example.com/project.git`, un atacant que controla, per exemple, el teu router pot modificar el repositori que acabes de clonar, inserint codi maliciós en ell.
  Si llavors compiles/executes el codi que acabes de clonar, executaràs el codi maliciós.
  Executar `git clone http://example.com/project.git` s'hauria d'evitar per la mateixa raó.
* Executar `git clone https://example.com/project.git` no pateix el mateix problema (a menys que l'atacant pugui proporcionar un certificat TLS per a example.com).
  Executar `git clone git@example.com:project.git` només pateix aquest problema si acceptes una empremta de clau SSH incorrecta.

Tampoc té autenticació, és a dir, qualsevol persona pot clonar el repositori (tot i que això sovint és exactament el que vols).
També és probablement el protocol més difícil de configurar.
Ha de executar el seu propi dimoni, el qual requereix configuració de `xinetd` o `systemd` o similar, la qual cosa no sempre és un passeig pel parc.
També requereix accés al tallafocs al port 9418, el qual no és un port estàndard que els tallafocs corporatius sempre permetin.
Darrere de grans tallafocs corporatius, aquest port obscur sovint està bloquejat.