[[_viewing_history]]
=== Visualització de l'Historial de Commits

Després de crear diversos commits, o si heu clonat un repositori amb un historial de commits existent, probablement voldreu mirar enrere per veure què ha passat.
L'eina més bàsica i potent per fer això és la comanda `git log`.

Aquests exemples utilitzen un projecte molt senzill anomenat "`simplegit`".
Per obtenir el projecte, executeu:

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

Quan executeu `git log` en aquest projecte, hauríeu d'obtenir una sortida que sembla alguna cosa com això:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Canviar número de versió

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Eliminar prova innecesària

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    Commit inicial
----

Per defecte, sense arguments, `git log` llista els commits fets en aquest repositori en ordre cronològic invers; és a dir, els commits més recents apareixen primer.
Com podeu veure, aquesta comanda llista cada commit amb el seu checksum SHA-1, el nom i correu electrònic de l'autor, la data escrita, i el missatge del commit.

Un nombre enorme i varietat d'opcions per a la comanda `git log` estan disponibles per mostrar-vos exactament el que esteu buscant.
Aquí, us mostrarem algunes de les més populars.

Una de les opcions més útils és `-p` o `--patch`, que mostra la diferència (la sortida del _patch_) introduïda en cada commit.
També podeu limitar el nombre d'entrades de log mostrades, com ara utilitzar `-2` per mostrar només les dues últimes entrades.

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Canviar número de versió

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "Una gema senzilla per utilitzar Git en codi Ruby."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Eliminar prova innecesària

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
----

Aquesta opció mostra la mateixa informació però amb un diff directament després de cada entrada.
Això és molt útil per a la revisió de codi o per navegar ràpidament pel que va passar durant una sèrie de commits que un col·laborador ha afegit.
També podeu utilitzar una sèrie d'opcions de resum amb `git log`.
Per exemple, si voleu veure algunes estadístiques abreujades per a cada commit, podeu utilitzar l'opció `--stat`:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Canviar número de versió

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Eliminar prova innecesària

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    Commit inicial

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Com podeu veure, l'opció `--stat` imprimeix sota cada entrada de commit una llista de fitxers modificats, quants fitxers van ser canviats, i quantes línies en aquests fitxers van ser afegides i eliminades.
També posa un resum de la informació al final.

Una altra opció realment útil és `--pretty`.
Aquesta opció canvia la sortida del log a formats diferents del predeterminat.
Hi ha alguns valors d'opció preconstruïts disponibles per a vostè.
El valor `oneline` per a aquesta opció imprimeix cada commit en una sola línia, que és útil si esteu mirant molts commits.
A més, els valors `short`, `full`, i `fuller` mostren la sortida en aproximadament el mateix format però amb menys o més informació, respectivament:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 Canviar número de versió
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Eliminar prova innecesària
a11bef06a3f659402fe7563abf99ad00de2209e6 Commit inicial
----

El valor d'opció més interessant és `format`, que us permet especificar el vostre propi format de sortida de log.
Això és especialment útil quan esteu generant sortida per a l'anàlisi de màquines: perquè especifiqueu el format explícitament, sabeu que no canviarà amb les actualitzacions de Git:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, fa 6 anys : Canviar número de versió
085bb3b - Scott Chacon, fa 6 anys : Eliminar prova innecesària
a11bef0 - Scott Chacon, fa 6 anys : Commit inicial
----

<<pretty_format>> llista alguns dels especificadors més útils que `format` pren.

[[pretty_format]]
.Especificadors útils per a `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Especificador | Descripció de la Sortida
| `%H`      | Checksum del commit
| `%h`      | Checksum del commit abreujat
| `%T`      | Checksum de l'arbre
| `%t`      | Checksum de l'arbre abreujat
| `%P`      | Checksums dels pares
| `%p`      | Checksums dels pares abreujats
| `%an`     | Nom de l'autor
| `%ae`     | Correu electrònic de l'autor
| `%ad`     | Data de l'autor (el format respecte l'opció `--date=option`)
| `%ar`     | Data de l'autor, relativa
| `%cn`     | Nom del committer
| `%ce`     | Correu electrònic del committer
| `%cd`     | Data del committer
| `%cr`     | Data del committer, relativa
| `%s`      | Assumpte
|================================

Potser us esteu preguntant quina és la diferència entre _autor_ i _committer_.
L'autor és la persona que originalment va escriure la feina, mentre que el committer és la persona que va aplicar la feina per última vegada.
Així, si envieu un patch a un projecte i un dels membres principals aplica el patch, tots dos obteniu crèdit: vostè com a autor, i el membre principal com a committer.
Cobrirem aquesta distinció una mica més a <<ch05-distributed-git#ch05-distributed-git>>.

Els valors d'opció `oneline` i `format` són especialment útils amb una altra opció de `log` anomenada `--graph`.
Aquesta opció afegeix un petit gràfic ASCII que mostra la vostra branca i l'historial de fusió:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 Ignorar errors de SIGCHLD a trap
*  5e3ee11 Fusionar branca 'master' de https://github.com/dustin/grit.git
|\
| * 420eac9 Afegir mètode per obtenir la branca actual
* | 30e367c Codi i proves de temps d'espera
* | 5a09431 Afegir protecció de temps d'espera a grit
* | e1193f8 Suport per a caps amb barres inclinades
|/
* d6016bc Requerir temps per a xmlschema
*  11d191e Fusionar branca 'defunkt' a local
----

Aquest tipus de sortida es farà més interessant a mesura que passem per la branca i la fusió al següent capítol.

Aquestes són només algunes opcions de format de sortida senzilles per a `git log`: n'hi ha moltes més.
<<log_options>> llista les opcions que hem cobert fins ara, així com algunes altres opcions de format comunes que poden ser útils, juntament amb com canvien la sortida de la comanda `log`.

[[log_options]]
.Opcions comunes per a `git log`
[cols="1,4",options="header"]
|================================
| Opció            | Descripció
| `-p`              | Mostrar el patch introduït amb cada commit.
| `--stat`          | Mostrar estadístiques per a fitxers modificats en cada commit.
| `--shortstat`     | Mostrar només la línia canviada/insercions/eliminacions de la comanda `--stat`.
| `--name-only`     | Mostrar la llista de fitxers modificats després de la informació del commit.
| `--name-status`   | Mostrar la llista de fitxers afectats amb informació afegida/modificada/eliminada també.
| `--abbrev-commit` | Mostrar només els primers caràcters del checksum SHA-1 en lloc de tots 40.
| `--relative-date` | Mostrar la data en un format relatiu (per exemple, "`fa 2 setmanes`") en lloc d'utilitzar el format de data complet.
| `--graph`         | Mostrar un gràfic ASCII de la branca i l'historial de fusió al costat de la sortida del log.
| `--pretty`        | Mostrar commits en un format alternatiu. Els valors d'opció inclouen `oneline`, `short`, `full`, `fuller`, i `format` (on especifiqueu el vostre propi format).
| `--oneline`       | Taquigrafia per a `--pretty=oneline --abbrev-commit` utilitzats junts.
|================================

==== Limitant la Sortida del Log

A més de les opcions de format de sortida, `git log` pren un nombre d'opcions de limitació útils; és a dir, opcions que us permeten mostrar només un subconjunt de commits.
Ja heu vist una d'aquestes opcions: l'opció `-2`, que mostra només els dos últims commits.
De fet, podeu fer `-<n>`, on `n` és qualsevol enter per mostrar els últims `n` commits.
En realitat, és poc probable que utilitzeu això sovint, perquè Git per defecte canalitza tota la sortida a través d'un paginador perquè només veieu una pàgina de sortida de log cada vegada.

No obstant això, les opcions de limitació de temps com `--since` i `--until` són molt útils.
Per exemple, aquesta comanda obté la llista de commits fets en les dues últimes setmanes:

[source,console]
----
$ git log --since=2.weeks
----

Aquesta comanda funciona amb molts formats: podeu especificar una data específica com "`2008-01-15`", o una data relativa com "`fa 2 anys 1 dia 3 minuts`".

També podeu filtrar la llista per a commits que coincideixin amb alguns criteris de cerca.
L'opció `--author` us permet filtrar per un autor específic, i l'opció `--grep` us permet buscar paraules clau als missatges de commit.

[NOTE]
====
Podeu especificar més d'una instància tant de l'opció de cerca `--author` com `--grep`, que limitarà la sortida de commit a commits que coincideixin amb _qualsevol_ dels patrons `--author` i _qualsevol_ dels patrons `--grep`; no obstant això, afegir l'opció `--all-match` limita encara més la sortida només a aquests commits que coincideixin amb _tots_ els patrons `--grep`.
====

Una altra opció de filtratge realment útil és l'opció `-S` (coloquialment referida com l'opció "`pickaxe`" de Git), que pren una cadena i mostra només aquests commits que van canviar el nombre d'ocurrències d'aquesta cadena.
Per exemple, si volíeu trobar l'últim commit que va afegir o eliminar una referència a una funció específica, podríeu cridar:

[source,console]
----
$ git log -S function_name
----

L'última opció realment útil per passar a `git log` com a filtre és una ruta.
Si especifiqueu un directori o nom de fitxer, podeu limitar la sortida del log a commits que van introduir un canvi a aquests fitxers.
Això sempre és l'última opció i generalment està precedida per dos guions (`--`) per separar les rutes de les opcions:

[source,console]
----
$ git log -- path/to/file
----

A <<limit_options>> llistarem aquestes i algunes altres opcions comunes per a la vostra referència.

[[limit_options]]
.Opcions per limitar la sortida de `git log`
[cols="2,4",options="header"]
|================================
| Opció                | Descripció
| `-<n>`                | Mostrar només els últims n commits.
| `--since`, `--after`  | Limitar els commits als fets després de la data especificada.
| `--until`, `--before` | Limitar els commits als fets abans de la data especificada.
| `--author`            | Mostrar només els commits en els quals l'entrada d'autor coincideix amb la cadena especificada.
| `--committer`         | Mostrar només els commits en els quals l'entrada de committer coincideix amb la cadena especificada.
| `--grep`              | Mostrar només els commits amb un missatge de commit que conté la cadena.
| `-S`                  | Mostrar només els commits que afegeixen o eliminen codi que coincideix amb la cadena.
|================================

Per exemple, si voleu veure quins commits que modifiquen fitxers de prova al codi font de Git a l'historial van ser confirmats per Junio Hamano al mes d'octubre de 2008 i no són commits de fusió, podeu executar alguna cosa com això:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Corregir fallada de cas de prova quan els atributs estès estan en ús
acd3b9e - Millorar l'API hold_lock_file_for_{update,append}()
f563754 - demostrar trencament de checkout desvinculat amb enllaç simbòlic HEAD
d1a94af - reset --hard/read-tree --reset -u: eliminar camins nous no fusionats
51a94af - Corregir "checkout --track -b newbranch" en HEAD desvinculat
b0ad11e - pull: permetre "git pull origin $something:$current_branch" en una branca no nascuda
----

Dels gairebé 40.000 commits a l'historial del codi font de Git, aquesta comanda mostra els 6 que coincideixen amb aquests criteris.

[TIP]
.Prevenir la visualització de commits de fusió
====
Depenent del flux de treball utilitzat al vostre repositori, és possible que un percentatge considerable dels commits al vostre historial de log siguin només commits de fusió, que normalment no són molt informatius.
Per prevenir la visualització de commits de fusió que omplin el vostre historial de log, simplement afegiu l'opció de log `--no-merges`.
====