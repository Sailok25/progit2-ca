[[_undoing]]
=== Desfer Canvis

En qualsevol etapa, potser voldreu desfer alguna cosa.
Aquí, revisarem algunes eines bàsiques per desfer canvis que heu fet.
Tingueu cura, perquè no sempre podeu desfer alguns d'aquests desferiments.
Aquesta és una de les poques àrees a Git on podeu perdre alguna feina si ho feu malament.

Un dels desferiments comuns té lloc quan feu un commit massa aviat i possiblement us oblideu d'afegir alguns fitxers, o us equivoqueu en el missatge del commit.
Si voleu refaire aquest commit, feu els canvis addicionals que us vau oblidar, prepareu-los, i torneu a fer el commit utilitzant l'opció `--amend`:

[source,console]
----
$ git commit --amend
----

Aquesta comanda pren la vostra àrea d'staging i l'utilitza per al commit.
Si no heu fet cap canvi des del vostre últim commit (per exemple, executeu aquesta comanda immediatament després del vostre commit anterior), llavors la vostra instantània es veurà exactament igual, i tot el que canviareu serà el vostre missatge de commit.

El mateix editor de missatges de commit s'obre, però ja conté el missatge del vostre commit anterior.
Podeu editar el missatge com sempre, però sobreescriurà el vostre commit anterior.

Com a exemple, si feu un commit i després us adoneu que us vau oblidar de preparar els canvis en un fitxer que volíeu afegir a aquest commit, podeu fer alguna cosa com això:

[source,console]
----
$ git commit -m 'Commit inicial'
$ git add fitxer_oblidat
$ git commit --amend
----

Acabeu amb un únic commit: el segon commit substitueix els resultats del primer.

[NOTE]
====
És important entendre que quan esteu modificant el vostre últim commit, no esteu tant corregint-lo com _substituint-lo_ completament amb un nou commit millorat que empeny el vell commit fora del camí i posa el nou commit al seu lloc.
Efectivament, és com si el commit anterior mai hagués passat, i no es mostrarà a l'historial del vostre repositori.

El valor evident de modificar commits és fer millores menors al vostre últim commit, sense omplir l'historial del vostre repositori amb missatges de commit de la forma "`Ups, em vaig oblidar d'afegir un fitxer`" o "`Maleït, corregint un error tipogràfic al últim commit`".
====

[NOTE]
====
Només modifiqueu commits que encara són locals i no s'han enviat a cap lloc.
Modificar commits enviats prèviament i forçar l'enviament de la branca causarà problemes als vostres col·laboradors.
Per a més informació sobre el que passa quan feu això i com recuperar-vos si esteu al costat receptor, llegiu <<_rebase_peril>>.
====

[[_unstaging]]
==== Despreparar un Fitxer Preparat

Les dues següents seccions demostren com treballar amb la vostra àrea d'staging i els canvis del directori de treball.
La part bona és que la comanda que utilitzeu per determinar l'estat d'aquestes dues àrees també us recorda com desfer els canvis en elles.
Per exemple, suposem que heu canviat dos fitxers i voleu fer-ne commit com a dos canvis separats, però accidentalment escriviu `git add *` i prepareu tots dos.
Com podeu despreparar un dels dos?
La comanda `git status` us recorda:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

Just sota el text "`Changes to be committed`", diu que utilitzeu `git reset HEAD <file>...` per despreparar.
Així que, utilitzem aquest consell per despreparar el fitxer `CONTRIBUTING.md`:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

La comanda és una mica estranya, però funciona.
El fitxer `CONTRIBUTING.md` està modificat però una altra vegada despreparat.

[NOTE]
=====
És cert que `git reset` pot ser una comanda perillosa, especialment si proporcioneu la bandera `--hard`.
No obstant això, en l'escenari descrit anterior, el fitxer al vostre directori de treball no es toca, així que és relativament segur.
=====

Per ara, aquesta invocació màgica és tot el que necessiteu saber sobre la comanda `git reset`.
Entrarem en molt més detall sobre el que fa `reset` i com dominar-lo per fer coses realment interessants a <<ch07-git-tools#_git_reset>>.

==== Desmodificant un Fitxer Modificat

I si us adoneu que no voleu mantenir els vostres canvis al fitxer `CONTRIBUTING.md`?
Com podeu desmodificar-lo fàcilment: revertir-lo al que semblava quan vau fer l'últim commit (o inicialment clonar, o com sigui que el vau obtenir al vostre directori de treball)?
Afortunadament, `git status` també us diu com fer això.
A l'última sortida d'exemple, l'àrea despreparada sembla així:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Us diu bastant explícitament com descartar els canvis que heu fet.
Fem el que diu:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

Podeu veure que els canvis s'han revertit.

[IMPORTANT]
=====
És important entendre que `git checkout -- <file>` és una comanda perillosa.
Qualsevol canvi local que hàgiu fet a aquest fitxer ha desaparegut: Git simplement ha substituït aquest fitxer per l'última versió preparada o confirmada.
No utilitzeu mai aquesta comanda a menys que sàpigueu absolutament que no voleu aquests canvis locals no desats.
=====

Si voleu mantenir els canvis que heu fet a aquest fitxer però encara necessiteu treure'l del camí per ara, cobrirem l'emmagatzematge i les branques a <<ch03-git-branching#ch03-git-branching>>; aquestes són generalment maneres millors de fer-ho.

Recordeu, qualsevol cosa que està _confirmada_ a Git gairebé sempre es pot recuperar.
Fins i tot els commits que estaven en branques que van ser eliminades o commits que van ser sobreescrits amb un commit `--amend` es poden recuperar (vegeu <<ch10-git-internals#_data_recovery>> per a la recuperació de dades).
No obstant això, qualsevol cosa que perdeu que mai no va ser confirmada és probable que no es vegi mai més.

[[undoing_git_restore]]
==== Desfer coses amb git restore

La versió 2.23.0 de Git va introduir una nova comanda: `git restore`.
Bàsicament és una alternativa a `git reset` que acabem de cobrir.
A partir de la versió 2.23.0 de Git, Git utilitzarà `git restore` en lloc de `git reset` per a moltes operacions de desfer.

Retracem els nostres passos i desfem coses amb `git restore` en lloc de `git reset`.

===== Despreparar un Fitxer Preparat amb git restore

Les dues següents seccions demostren com treballar amb la vostra àrea d'staging i els canvis del directori de treball amb `git restore`.
La part bona és que la comanda que utilitzeu per determinar l'estat d'aquestes dues àrees també us recorda com desfer els canvis en elles.
Per exemple, suposem que heu canviat dos fitxers i voleu fer-ne commit com a dos canvis separats, però accidentalment escriviu `git add *` i prepareu tots dos.
Com podeu despreparar un dels dos?
La comanda `git status` us recorda:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   CONTRIBUTING.md
	renamed:    README.md -> README

----

Just sota el text "`Changes to be committed`", diu que utilitzeu `git restore --staged <file>...` per despreparar.
Així que, utilitzem aquest consell per despreparar el fitxer `CONTRIBUTING.md`:

[source,console]
----
$ git restore --staged CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   CONTRIBUTING.md

----

El fitxer `CONTRIBUTING.md` està modificat però una altra vegada despreparat.

===== Desmodificant un Fitxer Modificat amb git restore

I si us adoneu que no voleu mantenir els vostres canvis al fitxer `CONTRIBUTING.md`?
Com podeu desmodificar-lo fàcilment: revertir-lo al que semblava quan vau fer l'últim commit (o inicialment clonar, o com sigui que el vau obtenir al vostre directori de treball)?
Afortunadament, `git status` també us diu com fer això.
A l'última sortida d'exemple, l'àrea despreparada sembla així:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   CONTRIBUTING.md

----

Us diu bastant explícitament com descartar els canvis que heu fet.
Fem el que diu:

[source,console]
----
$ git restore CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	renamed:    README.md -> README

----

[IMPORTANT]
=====
És important entendre que `git restore <file>` és una comanda perillosa.
Qualsevol canvi local que hàgiu fet a aquest fitxer ha desaparegut: Git simplement ha substituït aquest fitxer per l'última versió preparada o confirmada.
No utilitzeu mai aquesta comanda a menys que sàpigueu absolutament que no voleu aquests canvis locals no desats.
=====
