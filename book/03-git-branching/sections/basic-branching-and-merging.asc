=== Branques Bàsiques i Fusió

Passem per un exemple senzill de branques i fusió amb un flux de treball que podríeu utilitzar al món real.
Seguireu aquests passos:

. Feu alguna feina en un lloc web.
. Creeu una branca per a una nova història d'usuari en la qual esteu treballant.
. Feu alguna feina en aquesta branca.

En aquest punt, rebreu una trucada que un altre problema és crític i necessiteu una correcció ràpida.
Fareu el següent:

. Canvieu a la vostra branca de producció.
. Creeu una branca per afegir la correcció ràpida.
. Després de ser provada, fusionar la branca de correcció ràpida, i enviar a producció.
. Torneu a la vostra història d'usuari original i continueu treballant.

[[_basic_branching]]
==== Branques Bàsiques

(((branques, flux de treball bàsic)))
Primer, suposem que esteu treballant en el vostre projecte i ja teniu un parell de commits al branch `master`.

.Un historial de commits senzill
image::images/basic-branching-1.png[Un historial de commits senzill]

Heu decidit que treballareu en el problema #53 en qualsevol sistema de seguiment de problemes que utilitzi la vostra empresa.
Per crear una nova branca i canviar-hi al mateix temps, podeu executar la comanda `git checkout` amb l'opció `-b`:

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

Això és una abreviatura de:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.Creant un nou punter de branca
image::images/basic-branching-2.png[Creant un nou punter de branca]

Treballareu en el vostre lloc web i fareu alguns commits.
Fer-ho mou la branca `iss53` endavant, perquè la teniu seleccionada (és a dir, el vostre `HEAD` està apuntant a ella):

[source,console]
----
$ vim index.html
$ git commit -a -m 'Crear nou peu de pàgina [problema 53]'
----

.La branca `iss53` ha avançat amb la vostra feina
image::images/basic-branching-3.png[La branca `iss53` ha avançat amb la vostra feina]

Ara rebeu la trucada que hi ha un problema amb el lloc web, i heu de corregir-lo immediatament.
Amb Git, no heu de desplegar la vostra correcció juntament amb els canvis `iss53` que heu fet, i no heu de fer un gran esforç per revertir aquests canvis abans de poder treballar en aplicar la vostra correcció al que està en producció.
Tot el que heu de fer és tornar a la vostra branca `master`.

No obstant això, abans de fer això, tingueu en compte que si el vostre directori de treball o àrea d'staging té canvis no confirmats que entren en conflicte amb la branca a la qual esteu canviant, Git no us deixarà canviar de branques.
És millor tenir un estat de treball net quan canvieu de branques.
Hi ha maneres de sortir d'això (concretament, emmagatzemar i modificar commits) que cobrirem més endavant, a <<ch07-git-tools#_git_stashing>>.
Per ara, suposem que heu confirmat tots els vostres canvis, així que podeu tornar a la vostra branca `master`:

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

En aquest punt, el vostre directori de treball del projecte és exactament com era abans de començar a treballar en el problema #53, i podeu concentrar-vos en la vostra correcció ràpida.
Aquest és un punt important a recordar: quan canvieu de branques, Git restableix el vostre directori de treball per semblar-se com ho feia l'última vegada que vau confirmar en aquesta branca.
Afegeix, elimina i modifica fitxers automàticament per assegurar-se que la vostra còpia de treball és com semblava la branca l'última vegada que vau confirmar-hi.

A continuació, teniu una correcció ràpida per fer.
Creem una branca `hotfix` en la qual treballar fins que estigui completada:

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'Corregir adreça de correu electrònic trencada'
[hotfix 1fb7853] Corregir adreça de correu electrònic trencada
 1 file changed, 2 insertions(+)
----

.Branca de correcció ràpida basada en `master`
image::images/basic-branching-4.png[Branca de correcció ràpida basada en `master`]

Podeu executar les vostres proves, assegurar-vos que la correcció ràpida és el que voleu, i finalment fusionar la branca `hotfix` de nou a la vostra branca `master` per desplegar a producció.
Ho feu amb la comanda `git merge`:(((git commands, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

Notareu la frase "`fast-forward`" en aquesta fusió.
Perquè el commit `C4` apuntat per la branca `hotfix` que heu fusionat estava directament per davant del commit `C2` en el qual esteu, Git simplement mou el punter endavant.
Per dir-ho d'una altra manera, quan intenteu fusionar un commit amb un commit que es pot arribar seguint l'historial del primer commit, Git simplifica les coses movent el punter endavant perquè no hi ha feina divergent per fusionar junts: això s'anomena un "`fast-forward`".

El vostre canvi està ara a l'instantània del commit apuntat per la branca `master`, i podeu desplegar la correcció.

.`master` es mou ràpidament cap a `hotfix`
image::images/basic-branching-5.png[`master` es mou ràpidament cap a `hotfix`]

Després que la vostra correcció super important s'ha desplegat, esteu llest per tornar a la feina que estàveu fent abans de ser interromputs.
No obstant això, primer eliminareu la branca `hotfix`, perquè ja no la necessiteu: la branca `master` apunta al mateix lloc.
Podeu eliminar-la amb l'opció `-d` a `git branch`:

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

Ara podeu tornar a la vostra branca de feina en procés en el problema #53 i continuar treballant-hi.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'Finalitzar el nou peu de pàgina [problema 53]'
[iss53 ad82d7a] Finalitzar el nou peu de pàgina [problema 53]
1 file changed, 1 insertion(+)
----

.La feina continua a `iss53`
image::images/basic-branching-6.png[La feina continua a `iss53`]

Val la pena assenyalar aquí que la feina que vau fer a la vostra branca `hotfix` no està continguda als fitxers a la vostra branca `iss53`.
Si necessiteu incorporar-la, podeu fusionar la vostra branca `master` a la vostra branca `iss53` executant `git merge master`, o podeu esperar a integrar aquests canvis fins que decideu tornar a incorporar la branca `iss53` a `master` més tard.

[[_basic_merging]]
==== Fusió Bàsica

(((branques, fusió)))(((fusió)))
Suposem que heu decidit que la vostra feina al problema #53 està completa i llesta per ser fusionada a la vostra branca `master`.
Per fer això, fusionareu la vostra branca `iss53` a `master`, molt com vau fusionar la vostra branca `hotfix` abans.
Tot el que heu de fer és seleccionar la branca en la qual voleu fusionar i després executar la comanda `git merge`:

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

Això sembla una mica diferent de la fusió `hotfix` que vau fer abans.
En aquest cas, el vostre historial de desenvolupament ha divergit d'algun punt més antic.
Perquè el commit a la branca en la qual esteu no és un avantpassat directe de la branca que esteu fusionant, Git ha de fer alguna feina.
En aquest cas, Git fa una fusió de tres vies senzilla, utilitzant les dues instantànies apuntades pels punters de branca i l'avantpassat comú dels dos.

.Tres instantànies utilitzades en una fusió típica
image::images/basic-merging-1.png[Tres instantànies utilitzades en una fusió típica]

En lloc de simplement moure el punter de branca endavant, Git crea una nova instantània que resulta d'aquesta fusió de tres vies i crea automàticament un nou commit que apunta a ella.
Això es refereix com un commit de fusió, i és especial en el sentit que té més d'un pare.

.Un commit de fusió
image::images/basic-merging-2.png[Un commit de fusió]

Ara que la vostra feina està fusionada, ja no teniu necessitat de la branca `iss53`.
Podeu tancar el problema al vostre sistema de seguiment de problemes, i eliminar la branca:

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
==== Conflictes Bàsics de Fusió

(((fusió, conflictes)))
De vegades, aquest procés no va tan suau.
Si heu canviat la mateixa part del mateix fitxer de manera diferent a les dues branques que esteu fusionant, Git no podrà fusionar-les netament.
Si la vostra correcció per al problema #53 va modificar la mateixa part d'un fitxer que la branca `hotfix`, obtindreu un conflicte de fusió que sembla alguna cosa com això:

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

Git no ha creat automàticament un nou commit de fusió.
Ha aturat el procés mentre resol el conflicte.
Si voleu veure quins fitxers no estan fusionats en qualsevol moment després d'un conflicte de fusió, podeu executar `git status`:

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

Qualsevol cosa que tingui conflictes de fusió i no s'hagi resolt es llista com a no fusionat.
Git afegeix marcadors de resolució de conflictes estàndard als fitxers que tenen conflictes, així que podeu obrir-los manualment i resoldre aquests conflictes.
El vostre fitxer conté una secció que sembla alguna cosa com això:

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

Això significa que la versió a `HEAD` (la vostra branca `master`, perquè això era el que teníeu seleccionat quan vau executar la vostra comanda de fusió) és la part superior d'aquest bloc (tot el que està per sobre de `=======`), mentre que la versió a la vostra branca `iss53` sembla tot el que està a la part inferior.
Per resoldre el conflicte, heu de triar un costat o l'altre o fusionar els continguts vosaltres mateixos.
Per exemple, podríeu resoldre aquest conflicte reemplaçant tot el bloc amb això:

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

Aquesta resolució té una mica de cada secció, i les línies `<<<<<<<`, `=======`, i `>>>>>>>` s'han eliminat completament.
Després d'haver resolt cadascuna d'aquestes seccions en cada fitxer en conflicte, executeu `git add` en cada fitxer per marcar-lo com a resolt.
Preparar el fitxer el marca com a resolt a Git.

Si voleu utilitzar una eina gràfica per resoldre aquests problemes, podeu executar `git mergetool`, que obre una eina de fusió visual adequada i us guia a través dels conflictes:(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

Si voleu utilitzar una eina de fusió diferent de la predeterminada (Git va triar `opendiff` en aquest cas perquè la comanda es va executar a macOS), podeu veure totes les eines suportades llistades a dalt després de "`one of the following tools.`"
Només escriviu el nom de l'eina que preferiu utilitzar.

[NOTE]
====
Si necessiteu eines més avançades per resoldre conflictes de fusió complicats, cobrirem més sobre fusió a <<ch07-git-tools#_advanced_merging>>.
====

Després de sortir de l'eina de fusió, Git us pregunta si la fusió va ser exitosa.
Si li dieu a l'script que ho va ser, prepara el fitxer per marcar-lo com a resolt per a vostè.
Podeu executar `git status` una altra vegada per verificar que tots els conflictes s'han resolt:

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

Si esteu contents amb això, i verifiqueu que tot el que tenia conflictes s'ha preparat, podeu escriure `git commit` per finalitzar el commit de fusió.
El missatge de commit per defecte sembla alguna cosa com això:

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

Si penseu que seria útil per a altres que mirin aquesta fusió en el futur, podeu modificar aquest missatge de commit amb detalls sobre com vau resoldre la fusió i explicar per què vau fer els canvis que vau fer si aquests no són òbvios.
