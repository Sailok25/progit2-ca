[[_remote_branches]]
=== Branques remotes

(((branches, remote)))(((references, remote)))
Les referències remotes són referències (punters) als vostres repositoris remots, incloent branques, etiquetes, i així successivament.
Podeu obtenir una llista completa de referències remotes explícitament amb `git ls-remote <remote>`, o `git remote show <remote>` per a branques remotes així com més informació.
No obstant això, una manera més comuna és aprofitar les branques de seguiment remot.

Les branques de seguiment remot són referències a l'estat de les branques remotes.
Són referències locals que no podeu moure; Git les mou per a vosaltres sempre que feu qualsevol comunicació de xarxa, per assegurar-se que representen amb precisió l'estat del repositori remot.
Penseu en elles com a marcadors, per recordar-vos on estaven les branques als vostres repositoris remots l'última vegada que us hi vau connectar.

Els noms de les branques de seguiment remot tenen la forma `<remote>/<branch>`.
Per exemple, si voleu veure com era la branca `master` al vostre remot `origin` l'última vegada que us hi vau connectar, hauríeu de comprovar la branca `origin/master`.
Si esteu treballant en un problema amb un company i han pujat una branca `iss53`, podríeu tenir la vostra pròpia branca local `iss53`, però la branca al servidor estaria representada per la branca de seguiment remot `origin/iss53`.

Això pot ser una mica confús, així que mirem un exemple.
Suposem que teniu un servidor Git a la vostra xarxa a `git.ourcompany.com`.
Si cloneu des d'aquí, l'ordre `clone` de Git l'anomena automàticament `origin` per a vosaltres, baixa totes les seves dades, crea un punter a on està la seva branca `master`, i l'anomena `origin/master` localment.
Git també us dona la vostra pròpia branca local `master` començant al mateix lloc que la branca `master` de l'origen, així que teniu alguna cosa amb què treballar.

[NOTE]
."`origin`" no és especial
====
Igual que el nom de la branca "`master`" no té cap significat especial a Git, tampoc ho té "`origin`".
Tot i que "`master`" és el nom per defecte per a una branca inicial quan executeu `git init`, que és l'única raó per la qual s'utilitza àmpliament, "`origin`" és el nom per defecte per a un remot quan executeu `git clone`.
Si executeu `git clone -o booyah` en lloc d'això, llavors tindreu `booyah/master` com a vostra branca remota per defecte.(((origin)))
====

.Server i repositoris locals després de clonar
image::images/remote-branches-1.png[Server i repositoris locals després de clonar]

Si feu alguna feina a la vostra branca local `master`, i, mentrestant, algú altre fa push a `git.ourcompany.com` i actualitza la seva branca `master`, llavors els vostres historials avancen de manera diferent.
A més, sempre que us mantingueu fora de contacte amb el vostre servidor `origin`, el vostre punter `origin/master` no es mou.

.La feina local i remota pot divergir
image::images/remote-branches-2.png[La feina local i remota pot divergir]

Per sincronitzar la vostra feina amb un remot donat, executeu una ordre `git fetch <remote>` (en el nostre cas, `git fetch origin`).
Aquesta ordre busca quin servidor és "`origin`" (en aquest cas, és `git.ourcompany.com`), obté qualsevol dada que no tingueu encara, i actualitza la vostra base de dades local, movent el vostre punter `origin/master` a la seva nova posició més actualitzada.

.`git fetch` actualitza les vostres branques de seguiment remot
image::images/remote-branches-3.png[`git fetch` actualitza les vostres branques de seguiment remot]

Per demostrar tenir múltiples servidors remots i com són les branques remotes per a aquests projectes remots, suposem que teniu un altre servidor Git intern que s'utilitza només per al desenvolupament per un dels vostres equips de sprint.
Aquest servidor està a `git.team1.ourcompany.com`.
Podeu afegir-lo com a nova referència remota al projecte en què esteu treballant actualment executant l'ordre `git remote add` com vam cobrir a <<ch02-git-basics-chapter#ch02-git-basics-chapter>>.
Anomeneu aquest remot `teamone`, que serà el vostre nom curt per a tota aquesta URL.

.Afegint un altre servidor com a remot
image::images/remote-branches-4.png[Afegint un altre servidor com a remot]

Ara, podeu executar `git fetch teamone` per obtenir tot el que el servidor remot `teamone` té i que vosaltres no teniu encara.
Com que aquest servidor té un subconjunt de les dades que el vostre servidor `origin` té ara, Git no obté cap dada però estableix una branca de seguiment remot anomenada `teamone/master` per apuntar al commit que `teamone` té com a branca `master`.

.Branca de seguiment remot per a `teamone/master`
image::images/remote-branches-5.png[Branca de seguiment remot per a `teamone/master`]

[[_pushing_branches]]
==== Pushing

(((pushing)))
Quan voleu compartir una branca amb el món, heu de pujar-la a un remot al qual tingueu accés d'escriptura.
Les vostres branques locals no es sincronitzen automàticament amb els remots als quals escriviu -- heu de pujar explícitament les branques que voleu compartir.
D'aquesta manera, podeu utilitzar branques privades per a la feina que no voleu compartir, i pujar només les branques temàtiques amb les quals voleu col·laborar.

Si teniu una branca anomenada `serverfix` amb la qual voleu treballar amb altres, podeu pujar-la de la mateixa manera que vau pujar la vostra primera branca.
Executeu `git push <remote> <branch>`:(((git commands, push)))

[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix
----

Això és una mica un dreç.
Git expandeix automàticament el nom de la branca `serverfix` a `refs/heads/serverfix:refs/heads/serverfix`, que significa, "`Pren la meva branca local `serverfix` i puja-la per actualitzar la branca `serverfix` del remot.`"
Veurem la part `refs/heads/` en detall a <<ch10-git-internals#ch10-git-internals>>, però generalment podeu deixar-la fora.
També podeu fer `git push origin serverfix:serverfix`, que fa el mateix -- diu, "`Pren el meu serverfix i fes que sigui el serverfix del remot.`"
Podeu utilitzar aquest format per pujar una branca local a una branca remota que tingui un nom diferent.
Si no voleu que es digui `serverfix` al remot, podríeu executar `git push origin serverfix:awesomebranch` per pujar la vostra branca local `serverfix` a la branca `awesomebranch` del projecte remot.

[NOTE]
.No escriviu la vostra contrasenya cada vegada
====
Si esteu utilitzant una URL HTTPS per pujar, el servidor Git us demanarà el vostre nom d'usuari i contrasenya per a l'autenticació.
Per defecte us demanarà aquesta informació al terminal perquè el servidor pugui saber si teniu permís per pujar.

Si no voleu escriure-la cada vegada que pugeu, podeu configurar una "`memòria cau de credencials`".
La més senzilla és simplement mantenir-la a la memòria durant uns minuts, que podeu configurar fàcilment executant `git config --global credential.helper cache`.

Per a més informació sobre les diverses opcions de memòria cau de credencials disponibles, vegeu <<ch07-git-tools#_credential_caching>>.
====

La propera vegada que un dels vostres col·laboradors obtingui del servidor, obtindran una referència a on està la versió del servidor de `serverfix` sota la branca remota `origin/serverfix`:

[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix
----

És important tenir en compte que quan feu un fetch que porta noves branques de seguiment remot, no obteniu automàticament còpies locals editables d'elles.
En altres paraules, en aquest cas, no teniu una nova branca `serverfix` -- només teniu un punter `origin/serverfix` que no podeu modificar.

Per fusionar aquesta feina a la vostra branca de treball actual, podeu executar `git merge origin/serverfix`.
Si voleu la vostra pròpia branca `serverfix` amb la qual treballar, podeu basar-la en la vostra branca de seguiment remot:

[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Això us dona una branca local amb la qual podeu treballar que comença on està `origin/serverfix`.

[[_tracking_branches]]
==== Branques de seguiment

(((branches, tracking)))(((branches, upstream)))
Comprovar una branca local des d'una branca de seguiment remot crea automàticament el que s'anomena una "`branca de seguiment`" (i la branca que segueix s'anomena una "`branca amunt`").
Les branques de seguiment són branques locals que tenen una relació directa amb una branca remota.
Si esteu en una branca de seguiment i escriviu `git pull`, Git sap automàticament de quin servidor obtenir i quina branca fusionar.

Quan cloneu un repositori, generalment crea automàticament una branca `master` que segueix `origin/master`.
No obstant això, podeu configurar altres branques de seguiment si ho desitgeu -- les que segueixen branques en altres remots, o que no segueixen la branca `master`.
El cas senzill és l'exemple que acabeu de veure, executant `git checkout -b <branch> <remote>/<branch>`.
Això és una operació prou comuna que Git proporciona la dreçera `--track`:

[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

De fet, això és tan comú que fins i tot hi ha una dreçera per a aquesta dreçera.
Si el nom de la branca que esteu intentant comprovar (a) no existeix i (b) coincideix exactament amb un nom en un únic remot, Git crearà una branca de seguiment per a vosaltres:

[source,console]
----
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Per configurar una branca local amb un nom diferent al de la branca remota, podeu utilitzar fàcilment la primera versió amb un nom de branca local diferent:

[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
----

Ara, la vostra branca local `sf` obtindrà automàticament de `origin/serverfix`.

Si ja teniu una branca local i voleu establir-la a una branca remota que acabeu de baixar, o voleu canviar la branca amunt que esteu seguint, podeu utilitzar l'opció `-u` o `--set-upstream-to` de `git branch` per establir-la explícitament en qualsevol moment.

[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
----

[NOTE]
.Dreçera amunt
====
Quan teniu configurada una branca de seguiment, podeu referenciar la seva branca amunt amb la dreçera `@{upstream}` o `@{u}`.
Així que si esteu a la branca `master` i està seguint `origin/master`, podeu dir alguna cosa com `git merge @{u}` en lloc de `git merge origin/master` si ho desitgeu.(((@{u})))(((@{upstream})))
====

Si voleu veure quines branques de seguiment heu configurat, podeu utilitzar l'opció `-vv` de `git branch`.
Això llistarà les vostres branques locals amb més informació incloent què està seguint cada branca i si la vostra branca local està per davant, per darrere o ambdues.

[source,console]
----
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] Add forgotten brackets
  master    1ae2a45 [origin/master] Deploy index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] This should do it
  testing   5ea463a Try something new
----

Així que aquí podem veure que la nostra branca `iss53` està seguint `origin/iss53` i està "`ahead`" per dos, cosa que significa que tenim dos commits locals que no s'han pujat al servidor.
També podem veure que la nostra branca `master` està seguint `origin/master` i està actualitzada.
A continuació podem veure que la nostra branca `serverfix` està seguint la branca `server-fix-good` al nostre servidor `teamone` i està per davant per tres i per darrere per un, cosa que significa que hi ha un commit al servidor que encara no hem fusionat i tres commits locals que encara no hem pujat.
Finalment podem veure que la nostra branca `testing` no està seguint cap branca remota.

És important tenir en compte que aquests números són només des de l'última vegada que vau obtenir de cada servidor.
Aquesta ordre no es comunica amb els servidors, us està informant del que té emmagatzemat d'aquests servidors localment.
Si voleu números totalment actualitzats de per davant i per darrere, haureu d'obtenir de tots els vostres remots just abans d'executar això.
Podeu fer-ho així:

[source,console]
----
$ git fetch --all; git branch -vv
----

==== Obtenir

(((pulling)))
Tot i que l'ordre `git fetch` obtindrà tots els canvis al servidor que encara no teniu, no modificarà el vostre directori de treball en absolut.
Simplement obtindrà les dades per a vosaltres i us deixarà fusionar-les vosaltres mateixos.
No obstant això, hi ha una ordre anomenada `git pull` que essencialment és un `git fetch` seguit immediatament d'un `git merge` en la majoria de casos.
Si teniu configurada una branca de seguiment com es va demostrar a l'última secció, ja sigui establint-la explícitament o fent que es creï per a vosaltres per les ordres `clone` o `checkout`, `git pull` buscarà quin servidor i branca està seguint la vostra branca actual, obtindrà d'aquest servidor i després intentarà fusionar aquesta branca remota.

[[_delete_branches]]
==== Eliminar branques remotes

(((branches, deleting remote)))
Suposem que heu acabat amb una branca remota -- diguem que vosaltres i els vostres col·laboradors heu acabat amb una característica i l'heu fusionat a la branca `master` del vostre remot (o la branca que sigui la vostra línia de codi estable).
Podeu eliminar una branca remota utilitzant l'opció `--delete` de `git push`.
Si voleu eliminar la vostra branca `serverfix` del servidor, executeu el següent:

[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix
----

Bàsicament tot el que fa és eliminar el punter del servidor.
El servidor Git generalment mantindrà les dades allà durant un temps fins que s'executi una recollida d'escombraries, així que si es va eliminar accidentalment, sovint és fàcil recuperar-la.