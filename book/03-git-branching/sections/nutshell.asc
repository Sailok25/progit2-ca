[[_git_branches_overview]]
=== Branques en Resum

Per entendre realment la manera com Git gestiona les branques, necessitem fer un pas enrere i examinar com Git emmagatzema les seves dades.

Com potser recordareu de <<ch01-getting-started#what_is_git_section>>, Git no emmagatzema les dades com una sèrie de canvis o diferències, sinó com una sèrie d'_instantànies_.

Quan feu un commit, Git emmagatzema un objecte de commit que conté un punter a l'instantània del contingut que heu preparat.
Aquest objecte també conté el nom i l'adreça de correu electrònic de l'autor, el missatge que heu escrit, i punters al commit o commits que van directament abans d'aquest commit (el seu pare o pares): zero pares per al commit inicial, un pare per a un commit normal, i múltiples pares per a un commit que resulta d'una fusió de dues o més branques.

Per visualitzar això, suposem que teniu un directori que conté tres fitxers, i els prepareu tots i feu un commit.
Preparar els fitxers calcula un checksum per a cadascun (el hash SHA-1 que vam esmentar a <<ch01-getting-started#what_is_git_section>>), emmagatzema aquesta versió del fitxer al repositori Git (Git es refereix a ells com a _blobs_), i afegeix aquest checksum a l'àrea d'staging:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'Commit inicial'
----

Quan creeu el commit executant `git commit`, Git calcula el checksum de cada subdirectori (en aquest cas, només el directori arrel del projecte) i els emmagatzema com a objecte d'arbre al repositori Git.
Git llavors crea un objecte de commit que té les metadades i un punter a l'arbre del projecte arrel perquè pugui recrear aquesta instantània quan sigui necessari.(((git commands, commit)))

El vostre repositori Git conté ara cinc objectes: tres _blobs_ (cada un representant el contingut d'un dels tres fitxers), un _arbre_ que llista el contingut del directori i especifica quins noms de fitxers s'emmagatzemen com a blobs, i un _commit_ amb el punter a aquest arbre arrel i totes les metadades del commit.

.Un commit i el seu arbre
image::images/commit-and-tree.png[Un commit i el seu arbre]

Si feu alguns canvis i feu un altre commit, el següent commit emmagatzema un punter al commit que va immediatament abans.

.Commits i els seus pares
image::images/commits-and-parents.png[Commits i els seus pares]

Una branca a Git és simplement un punter mòbil lleuger a un d'aquests commits.
El nom de branca predeterminat a Git és `master`.
A mesura que comenceu a fer commits, se us dona una branca `master` que apunta a l'últim commit que heu fet.
Cada vegada que feu un commit, el punter de la branca `master` avança automàticament.

[NOTE]
====
La branca "`master`" a Git no és una branca especial.(((master)))
És exactament com qualsevol altra branca.
L'única raó per la qual gairebé cada repositori en té una és que la comanda `git init` la crea per defecte i la majoria de la gent no es molesta a canviar-la.
====

.Una branca i el seu historial de commits
image::images/branch-and-history.png[Una branca i el seu historial de commits]

[[_create_new_branch]]
==== Creant una Branca Nova

(((branques, creant)))
Què passa quan creeu una branca nova?
Doncs, fer-ho crea un nou punter per a vostè per moure's.
Suposem que voleu crear una branca nova anomenada `testing`.
Ho feu amb la comanda `git branch`:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

Això crea un nou punter al mateix commit en el qual esteu actualment.

.Dues branques apuntant a la mateixa sèrie de commits
image::images/two-branches.png[Dues branques apuntant a la mateixa sèrie de commits]

Com sap Git en quina branca esteu actualment?
Manté un punter especial anomenat `HEAD`.
Noteu que això és molt diferent del concepte de `HEAD` en altres VCS que potser esteu acostumats, com Subversion o CVS.
A Git, això és un punter a la branca local en la qual esteu actualment.
En aquest cas, encara esteu a `master`.
La comanda `git branch` només _va crear_ una branca nova: no va canviar a aquesta branca.

.HEAD apuntant a una branca
image::images/head-to-master.png[HEAD apuntant a una branca]

Podeu veure això fàcilment executant una simple comanda `git log` que us mostra on apunten els punters de branca.
Aquesta opció s'anomena `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) Afegir característica #32 - capacitat d'afegir nous formats a la interfície central
34ac2 Corregir error #1328 - desbordament de pila sota certes condicions
98ca9 Commit inicial
----

Podeu veure les branques `master` i `testing` que estan just allà al costat del commit `f30ab`.

[[_switching_branches]]
==== Canviant de Branques

(((branques, canviant)))
Per canviar a una branca existent, executeu la comanda `git checkout`.(((git commands, checkout)))
Canviem a la nova branca `testing`:

[source,console]
----
$ git checkout testing
----

Això mou `HEAD` per apuntar a la branca `testing`.

.HEAD apunta a la branca actual
image::images/head-to-testing.png[HEAD apunta a la branca actual]

Quina és la importància d'això?
Doncs, fem un altre commit:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'Fer un canvi'
----

.La branca HEAD avança quan es fa un commit
image::images/advance-testing.png[La branca HEAD avança quan es fa un commit]

Això és interessant, perquè ara la vostra branca `testing` ha avançat, però la vostra branca `master` encara apunta al commit en el qual esteu quan vau executar `git checkout` per canviar de branques.
Canviem de nou a la branca `master`:

[source,console]
----
$ git checkout master
----

[NOTE]
.`git log` no mostra _totes_ les branques _tot_ el temps
====
Si executéssiu `git log` ara mateix, podríeu preguntar-vos on ha anat la branca "testing" que acabeu de crear, ja que no apareixeria a la sortida.

La branca no ha desaparegut; Git simplement no sap que esteu interessat en aquesta branca i està intentant mostrar-vos el que creu que us interessa.
En altres paraules, per defecte, `git log` només mostrarà l'historial de commits sota la branca que heu seleccionat.

Per mostrar l'historial de commits per a la branca desitjada heu d'especificar-la explícitament: `git log testing`.
Per mostrar totes les branques, afegiu `--all` a la vostra comanda `git log`.
====

.HEAD es mou quan feu checkout
image::images/checkout-master.png[HEAD es mou quan feu checkout]

Aquesta comanda va fer dues coses.
Va moure el punter HEAD per apuntar de nou a la branca `master`, i va revertir els fitxers al vostre directori de treball a l'instantània a la qual apunta `master`.
Això també significa que els canvis que feu a partir d'aquest punt endavant divergiran d'una versió més antiga del projecte.
Bàsicament, rebobina la feina que heu fet a la vostra branca `testing` perquè pugueu anar en una direcció diferent.

[NOTE]
.Canviar de branques canvia els fitxers al vostre directori de treball
====
És important tenir en compte que quan canvieu de branques a Git, els fitxers al vostre directori de treball canviaran.
Si canvieu a una branca més antiga, el vostre directori de treball es revertirà per semblar-se com ho feia l'última vegada que vau fer un commit a aquesta branca.
Si Git no pot fer-ho netament, no us deixarà canviar en absolut.
====

Fem alguns canvis i confirmem de nou:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'Fer altres canvis'
----

Ara l'historial del vostre projecte ha divergit (vegeu <<divergent_history>>).
Heu creat i canviat a una branca, heu fet alguna feina en ella, i després heu tornat a la vostra branca principal i heu fet una altra feina.
Tots dos canvis estan aïllats en branques separades: podeu canviar d'una a l'altra i fusionar-les quan esteu llest.
I ho heu fet tot amb simples comandes `branch`, `checkout`, i `commit`.

[[divergent_history]]
.Historial divergent
image::images/advance-master.png[Historial divergent]

També podeu veure això fàcilment amb la comanda `git log`.
Si executeu `git log --oneline --decorate --graph --all` imprimirà l'historial dels vostres commits, mostrant on són els punters de les vostres branques i com ha divergit el vostre historial.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) Fer altres canvis
| * 87ab2 (testing) Fer un canvi
|/
* f30ab Afegir característica #32 - capacitat d'afegir nous formats a la interfície central
* 34ac2 Corregir error #1328 - desbordament de pila sota certes condicions
* 98ca9 Commit inicial del meu projecte
----

Perquè una branca a Git és en realitat un fitxer senzill que conté el checksum SHA-1 de 40 caràcters del commit al qual apunta, les branques són barates de crear i destruir.
Crear una branca nova és tan ràpid i senzill com escriure 41 bytes en un fitxer (40 caràcters i un salt de línia).

Això està en contrast amb la manera com la majoria d'eines VCS més antigues fan branques, que implica copiar tots els fitxers del projecte en un segon directori.
Això pot trigar diversos segons o fins i tot minuts, depenent de la mida del projecte, mentre que a Git el procés és sempre instantani.
A més, perquè estem registrant els pares quan fem un commit, trobar una base de fusió adequada per a la fusió es fa automàticament per a nosaltres i generalment és molt fàcil de fer.
Aquestes característiques ajuden a animar els desenvolupadors a crear i utilitzar branques sovint.

Vegem per què hauríeu de fer-ho.

[NOTE]
.Crear una branca nova i canviar-hi al mateix temps
====
És típic crear una branca nova i voler canviar a aquesta branca nova al mateix temps: això es pot fer en una operació amb `git checkout -b <newbranchname>`.
====

[NOTE]
====
A partir de la versió 2.23 de Git podeu utilitzar `git switch` en lloc de `git checkout` per:

- Canviar a una branca existent: `git switch testing-branch`.
- Crear una branca nova i canviar-hi: `git switch -c new-branch`.
  La bandera `-c` significa crear, també podeu utilitzar la bandera completa: `--create`.
- Tornar a la vostra branca seleccionada anteriorment: `git switch -`.
====
