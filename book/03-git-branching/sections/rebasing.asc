[[_rebasing]]
=== Rebase

(((rebase)))
A Git, hi ha dues maneres principals d'integrar canvis d'una branca a una altra: la `merge` i la `rebase`.
En aquesta secció aprendràs què és el rebase, com fer-ho, per què és una eina bastant increïble, i en quins casos no voldràs utilitzar-la.

==== El Rebase Bàsic

Si tornem a un exemple anterior de <<_basic_merging>>, podeu veure que heu divergit la vostra feina i heu fet commits en dues branques diferents.

.Historial divergent senzill
image::images/basic-rebase-1.png[Historial divergent senzill]

La manera més fàcil d'integrar les branques, com ja hem cobert, és la comanda `merge`.
Realitza una fusió de tres vies entre les dues últimes instantànies de les branques (`C3` i `C4`) i l'avantpassat més recent de les dues (`C2`), creant una nova instantània (i commit).

[[rebasing-merging-example]]
.Fusionant per integrar l'historial de feina divergit
image::images/basic-rebase-2.png[Fusionant per integrar l'historial de feina divergit]

No obstant això, hi ha una altra manera: podeu prendre el patch del canvi que es va introduir a `C4` i tornar a aplicar-lo a sobre de `C3`.
A Git, això s'anomena _rebase_.
Amb la comanda `rebase`, podeu prendre tots els canvis que es van confirmar en una branca i reproduir-los en una branca diferent.(((git commands, rebase)))

Per a aquest exemple, seleccionaríeu la branca `experiment`, i després la rebasejaríeu a la branca `master` de la següent manera:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

Aquesta operació funciona anant a l'avantpassat comú de les dues branques (la en la qual esteu i la en la qual esteu rebasejant), obtenint el diff introduït per cada commit de la branca en la qual esteu, guardant aquests diffs en fitxers temporals, restablint la branca actual al mateix commit que la branca en la qual esteu rebasejant, i finalment aplicant cada canvi en ordre.

.Rebasejant el canvi introduït a `C4` a `C3`
image::images/basic-rebase-3.png[Rebasejant el canvi introduït a `C4` a `C3`]

En aquest punt, podeu tornar a la branca `master` i fer una fusió ràpida.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Avançant ràpidament la branca `master`
image::images/basic-rebase-4.png[Avançant ràpidament la branca `master`]

Ara, l'instantània apuntada per `C4'` és exactament la mateixa que la que estava apuntada per `C5` a <<rebasing-merging-example,l'exemple de fusió>>.
No hi ha diferència en el producte final de la integració, però el rebase fa un historial més net.
Si examineu el log d'una branca rebasejada, sembla un historial lineal: sembla que tota la feina va passar en sèrie, fins i tot quan originalment va passar en paral·lel.

Sovint, fareu això per assegurar-vos que els vostres commits s'apliquen netament en una branca remota: potser en un projecte al qual esteu intentant contribuir però que no manteniu.
En aquest cas, fareu la vostra feina en una branca i després rebasejareu la vostra feina a `origin/master` quan esteu llest per enviar els vostres patches al projecte principal.
D'aquesta manera, el mantenedor no ha de fer cap feina d'integració: només un avanç ràpid o una aplicació neta.

Noteu que l'instantània apuntada pel commit final que acabeu tenint, ja sigui l'últim dels commits rebasejats per a un rebase o el commit final de fusió després d'una fusió, és la mateixa instantània: només la història és diferent.
El rebase reprodueix els canvis d'una línia de feina a una altra en l'ordre en què van ser introduïts, mentre que la fusió pren els punts finals i els fusiona junts.

==== Rebases Més Interessants

També podeu fer que el vostre rebase reprodueixi en alguna cosa diferent de la branca objectiu del rebase.
Preneu una història com <<rbdiag_e>>, per exemple.
Heu creat una branca de tema (`server`) per afegir alguna funcionalitat del costat del servidor al vostre projecte, i heu fet un commit.
Llavors, heu creat una branca a partir d'aquesta per fer els canvis del costat del client (`client`) i heu fet alguns commits.
Finalment, heu tornat a la vostra branca `server` i heu fet alguns commits més.

[[rbdiag_e]]
.Una història amb una branca de tema a partir d'una altra branca de tema
image::images/interesting-rebase-1.png[Una història amb una branca de tema a partir d'una altra branca de tema]

Suposem que decideix que voleu fusionar els vostres canvis del costat del client a la vostra línia principal per a un llançament, però voleu esperar amb els canvis del costat del servidor fins que es provin més.
Podeu prendre els canvis a `client` que no estan a `server` (`C8` i `C9`) i reproduir-los a la vostra branca `master` utilitzant l'opció `--onto` de `git rebase`:

[source,console]
----
$ git rebase --onto master server client
----

Això bàsicament diu, "`Pren la branca `client`, descobreix els patches des que va divergir de la branca `server`, i reprodueix aquests patches a la branca `client` com si estigués basada directament de la branca `master` en lloc de la `server`._"
És una mica complex, però el resultat és bastant genial.

.Rebasejant una branca de tema a partir d'una altra branca de tema
image::images/interesting-rebase-2.png[Rebasejant una branca de tema a partir d'una altra branca de tema]

Ara podeu avançar ràpidament la vostra branca `master` (vegeu <<rbdiag_g>>):

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Avançant ràpidament la vostra branca `master` per incloure els canvis de la branca `client`
image::images/interesting-rebase-3.png[Avançant ràpidament la vostra branca `master` per incloure els canvis de la branca `client`]

Suposem que decideix incorporar també la vostra branca `server`.
Podeu rebasejar la branca `server` a la branca `master` sense haver de seleccionar-la primer executant `git rebase <basebranch> <topicbranch>`: que selecciona la branca de tema per a vostè (en aquest cas, `server`) i la reprodueix a la branca base (`master`):

[source,console]
----
$ git rebase master server
----

Això reprodueix la vostra feina de `server` a sobre de la vostra feina de `master`, com es mostra a <<rbdiag_h>>.

[[rbdiag_h]]
.Rebasejant la vostra branca `server` a sobre de la vostra branca `master`
image::images/interesting-rebase-4.png[Rebasejant la vostra branca `server` a sobre de la vostra branca `master`]

Llavors, podeu avançar ràpidament la branca base (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

Podeu eliminar les branques `client` i `server` perquè tota la feina està integrada i ja no les necessiteu, deixant la vostra història per a tot aquest procés semblant a <<rbdiag_i>>:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Historial de commits final
image::images/interesting-rebase-5.png[Historial de commits final]

[[_rebase_peril]]
==== Els Perills del Rebase

(((rebase, perills del)))
Ahh, però la felicitat del rebase no està exempta de desavantatges, que es poden resumir en una sola línia:

*No rebasegeu commits que existeixen fora del vostre repositori i en els quals la gent pot haver basat la seva feina.*

Si seguiu aquesta directriu, anireu bé.
Si no ho feu, la gent us odiarà, i sereu menyspreat per amics i família.

Quan rebasegeu coses, esteu abandonant commits existents i creant-ne de nous que són similars però diferents.
Si envieu commits a algun lloc i altres els descarreguen i basen la seva feina en ells, i després reescriviu aquests commits amb `git rebase` i els torneu a enviar, els vostres col·laboradors hauran de tornar a fusionar la seva feina i les coses es complicaran quan intenteu tornar a descarregar la seva feina a la vostra.

Vegem un exemple de com el rebase de feina que heu fet pública pot causar problemes.
Suposem que cloneu des d'un servidor central i després feu alguna feina a partir d'això.
El vostre historial de commits sembla així:

.Clonar un repositori, i basar alguna feina en ell
image::images/perils-of-rebasing-1.png[Clonar un repositori, i basar alguna feina en ell]

Ara, algú altre fa més feina que inclou una fusió, i envia aquesta feina al servidor central.
La descarregueu i fusionar la nova branca remota a la vostra feina, fent que la vostra història sembli alguna cosa com això:

.Descarregar més commits, i fusionar-los a la vostra feina
image::images/perils-of-rebasing-2.png[Descarregar més commits, i fusionar-los a la vostra feina]

A continuació, la persona que va enviar la feina fusionada decideix tornar enrere i rebasejar la seva feina; fan un `git push --force` per sobreescriure la història al servidor.
Llavors descarregueu d'aquest servidor, baixant els nous commits.

[[_pre_merge_rebase_work]]
.Algú envia commits rebasejats, abandonant commits en els quals heu basat la vostra feina
image::images/perils-of-rebasing-3.png[Algú envia commits rebasejats, abandonant commits en els quals heu basat la vostra feina]

Ara tots dos esteu en un embolic.
Si feu un `git pull`, creareu un commit de fusió que inclou ambdues línies d'història, i el vostre repositori semblarà així:

[[_merge_rebase_work]]
.Torneu a fusionar la mateixa feina en un nou commit de fusió
image::images/perils-of-rebasing-4.png[Torneu a fusionar la mateixa feina en un nou commit de fusió]

Si executeu un `git log` quan la vostra història sembla així, veureu dos commits que tenen el mateix autor, data, i missatge, el que serà confús.
A més, si envieu aquesta història de nou al servidor, reintroduïreu tots aquests commits rebasejats al servidor central, el que pot confondre encara més a la gent.
És bastant segur assumir que l'altre desenvolupador no vol que `C4` i `C6` estiguin a la història: per això van rebasejar en primer lloc.

[[_rebase_rebase]]
==== Rebase quan Rebasegeu

Si *us* trobeu en una situació com aquesta, Git té alguna màgia addicional que us pot ajudar.
Si algú del vostre equip fa un push forçat de canvis que sobreescriuen la feina en la qual heu basat la vostra feina, el vostre repte és descobrir què és vostre i què han reescrit.

Resulta que a més del checksum SHA-1 del commit, Git també calcula un checksum que es basa només en el patch introduït amb el commit.
Això s'anomena un "`patch-id`".

Si descarregueu feina que va ser reescrita i la rebasegeu a sobre dels nous commits del vostre company, Git sovint pot descobrir amb èxit què és únicament vostre i aplicar-los de nou a sobre de la nova branca.

Per exemple, en l'escenari anterior, si en lloc de fer una fusió quan estem a <<_pre_merge_rebase_work>> executem `git rebase teamone/master`, Git:

* Determinarà quina feina és única a la nostra branca (`C2`, `C3`, `C4`, `C6`, `C7`)
* Determinarà quins no són commits de fusió (`C2`, `C3`, `C4`)
* Determinarà quins no han estat reescrits a la branca objectiu (només `C2` i `C3`, ja que `C4` és el mateix patch que `C4'`)
* Aplicarà aquests commits a sobre de `teamone/master`

Així que en lloc del resultat que veiem a <<_merge_rebase_work>>, acabarem amb alguna cosa més semblant a <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.Rebase a sobre de la feina rebasejada enviada per força
image::images/perils-of-rebasing-5.png[Rebase a sobre de la feina rebasejada enviada per força]

Això només funciona si `C4` i `C4'` que el vostre company va fer són gairebé exactament el mateix patch.
D'altra manera, el rebase no podrà dir que és un duplicat i afegirà un altre patch semblant a `C4` (que probablement fallarà en aplicar-se netament, ja que els canvis ja estarien almenys en part allà).

També podeu simplificar això executant un `git pull --rebase` en lloc d'un `git pull` normal.
O podeu fer-ho manualment amb un `git fetch` seguit d'un `git rebase teamone/master` en aquest cas.

Si esteu utilitzant `git pull` i voleu fer que `--rebase` sigui el predeterminat, podeu establir el valor de configuració `pull.rebase` amb alguna cosa com `git config --global pull.rebase true`.

Si només rebasegeu commits que mai no han sortit del vostre propi ordinador, anireu bé.
Si rebasegeu commits que han estat enviats, però que ningú més ha basat commits en ells, també anireu bé.
Si rebasegeu commits que ja han estat enviats públicament, i la gent pot haver basat feina en aquests commits, llavors podríeu tenir alguns problemes frustrants, i el menyspreu dels vostres companys d'equip.

Si vostè o un company troben que és necessari en algun moment, assegureu-vos que tots ho sàpiguen per executar `git pull --rebase` per intentar fer el dolor després que passi una mica més simple.

==== Rebase vs. Fusió

(((rebase, vs. fusió)))(((fusió, vs. rebase)))
Ara que heu vist el rebase i la fusió en acció, potser us esteu preguntant quin és millor.
Abans de poder respondre això, fem un pas enrere i parlem del que significa la història.

Un punt de vista sobre això és que l'historial de commits del vostre repositori és un *registre del que realment va passar.*
És un document històric, valuós per si mateix, i no s'ha de manipular.
Des d'aquest angle, canviar l'historial de commits és gairebé blasfem: esteu *mentint* sobre el que realment va passar.
I què si hi havia una sèrie desordenada de commits de fusió?
Així és com va passar, i el repositori ha de preservar això per a la posteritat.

El punt de vista oposat és que l'historial de commits és la *història de com es va fer el vostre projecte.*
No publicaries el primer esborrany d'un llibre, així que per què mostrar la vostra feina desordenada?
Quan esteu treballant en un projecte, potser necessiteu un registre de tots els vostres errors i camins sense sortida, però quan és hora de mostrar la vostra feina al món, potser voleu contar una història més coherent de com arribar d'A a B.
Les persones en aquest camp utilitzen eines com `rebase` i `filter-branch` per reescriure els seus commits abans que es fusionin a la branca principal.
Utilitzen eines com `rebase` i `filter-branch`, per contar la història de la manera que és millor per als lectors futurs.

Ara, a la pregunta de si la fusió o el rebase és millor: esperem que veieu que no és tan senzill.
Git és una eina potent, i us permet fer moltes coses amb i a la vostra història, però cada equip i cada projecte són diferents.
Ara que sabeu com funcionen aquestes dues coses, és a vostè decidir quin és el millor per a la vostra situació particular.

Podeu obtenir el millor dels dos mons: rebasejar canvis locals abans d'enviar per netejar la vostra feina, però mai rebasejar res que hàgiu enviat a algun lloc.