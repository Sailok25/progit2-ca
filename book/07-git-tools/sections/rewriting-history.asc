[[_rewriting_history]]
=== Reescriure l'Historial

Moltes vegades, quan treballes amb Git, potser vulguis revisar el teu historial de commits local. Una de les grans coses de Git és que et permet prendre decisions en l'últim moment possible. Pots decidir quins fitxers van a cada commit just abans de fer el commit amb l'àrea de preparació, pots decidir que encara no volies estar treballant en alguna cosa amb `git stash`, i pots reescriure commits que ja han passat perquè semblin que van passar d'una manera diferent. Això pot implicar canviar l'ordre dels commits, canviar missatges o modificar fitxers en un commit, fusionar o dividir commits, o eliminar commits completament, tot abans de compartir el teu treball amb altres.

En aquesta secció, veuràs com aconseguir aquestes tasques perquè puguis fer que el teu historial de commits sembli com vulguis abans de compartir-lo amb altres.

[NOTE]
.No empenyis el teu treball fins que estiguis content amb ell
====
Una de les regles cardinals de Git és que, ja que tant de treball és local dins del teu clon, tens una gran llibertat per reescriure el teu historial localment. No obstant això, un cop empenyis el teu treball, és una història completament diferent, i hauries de considerar el treball empenyat com a final a menys que tingues una bona raó per canviar-lo. En resum, hauries d'evitar empenyar el teu treball fins que estiguis content amb ell i estiguis llest per compartir-lo amb la resta del món.
====

[[_git_amend]]
==== Canviar l'Últim Commit

Canviar el teu últim commit és probablement la reescriptura de l'historial més comuna que faràs. Sovint voldràs fer dues coses bàsiques al teu últim commit: simplement canviar el missatge del commit, o canviar el contingut real del commit afegint, eliminant i modificant fitxers.

Si simplement vols modificar el teu últim missatge de commit, això és fàcil:

[source,console]
----
$ git commit --amend
----

El comandament anterior carrega el missatge de commit anterior en una sessió de l'editor, on pots fer canvis al missatge, guardar aquests canvis i sortir. Quan guardis i tanquis l'editor, l'editor escriu un nou commit que conté aquell missatge de commit actualitzat i el fa el teu nou últim commit.

Si, d'altra banda, vols canviar el contingut real del teu últim commit, el procés funciona bàsicament de la mateixa manera: primer fes els canvis que creus que vas oblidar, prepara aquests canvis, i el posterior `git commit --amend` substitueix aquell últim commit amb el teu nou commit millorat.

Has de ser cuidadosa amb aquesta tècnica perquè modificar canvia el SHA-1 del commit. És com un rebase molt petit: no modifiquis el teu últim commit si ja l'has empenyat.

[TIP]
.Un commit modificat pot necessitar (o no) un missatge de commit modificat
====
Quan modifiques un commit, tens l'oportunitat de canviar tant el missatge del commit com el contingut del commit. Si modifiques el contingut del commit substancialment, gairebé segur que hauràs d'actualitzar el missatge del commit per reflectir aquest contingut modificat.

D'altra banda, si les teves modificacions són prou trivials (corregir una errada tonta o afegir un fitxer que vas oblidar de preparar) de manera que el missatge del commit anterior està bé, pots simplement fer els canvis, preparar-los, i evitar la sessió de l'editor completament amb:

[source,console]
----
$ git commit --amend --no-edit
----
====

[[_changing_multiple]]
==== Canviar Múltiples Missatges de Commit

Per modificar un commit que està més enrere al teu historial, has de passar a eines més complexes. Git no té una eina de modificar l'historial, però pots utilitzar l'eina de rebase per rebasejar una sèrie de commits al HEAD en què es basaven originalment en lloc de moure'ls a un altre. Amb l'eina de rebase interactiu, llavors pots aturar-te després de cada commit que vulguis modificar i canviar el missatge, afegir fitxers, o fer el que vulguis. Pots executar el rebase de manera interactiva afegint l'opció `-i` a `git rebase`. Has d'indicar fins a on enrere vols reescriure els commits dient-li al comandament a quin commit fer el rebase.

Per exemple, si vols canviar els últims tres missatges de commit, o qualsevol dels missatges de commit en aquell grup, proporciones com a argument a `git rebase -i` el pare de l'últim commit que vols editar, que és `HEAD~2^` o `HEAD~3`. Pot ser més fàcil recordar `~3` perquè estàs intentant editar els últims tres commits, però tingues en compte que estàs designant realment quatre commits enrere, el pare de l'últim commit que vols editar:

[source,console]
----
$ git rebase -i HEAD~3
----

Recorda una altra vegada que això és un comandament de rebase: cada commit al rang `HEAD~3..HEAD` amb un missatge canviat i tots els seus descendents seran reescrits. No incloguis cap commit que ja hàgis empenyat a un servidor central: fer-ho confundirà altres desenvolupadors proporcionant una versió alternativa del mateix canvi.

Executar aquest comandament et dona una llista de commits al teu editor de text que sembla alguna cosa com això:

[source,console]
----
pick f7f3f6d Change my name a bit
pick 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file

# Rebase 710f0f8..a5f4a0d onto 710f0f8
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like "squash", but discard this commit's log message
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c <commit> to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
----

És important notar que aquests commits es llisten en l'ordre oposat al que normalment els veus utilitzant el comandament `log`. Si executes un `log`, veuràs alguna cosa com això:

[source,console]
----
$ git log --pretty=format:"%h %s" HEAD~3..HEAD
a5f4a0d Add cat-file
310154e Update README formatting and add blame
f7f3f6d Change my name a bit
----

Nota l'ordre invers. El rebase interactiu et dona un script que executarà. Començarà al commit que especifiques a la línia de comandaments (`HEAD~3`) i reproduirà els canvis introduïts en cadascun d'aquests commits de dalt a baix. Llista el més antic a dalt, en lloc del més nou, perquè aquest és el primer que reproduirà.

Has d'editar el script perquè s'aturi al commit que vols editar. Per fer-ho, canvia la paraula "`pick`" per la paraula "`edit`" per a cadascun dels commits que vols que el script s'aturi després. Per exemple, per modificar només el tercer missatge de commit, canvies el fitxer perquè sembli així:

[source,console]
----
edit f7f3f6d Change my name a bit
pick 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file
----

Quan guardis i surtis de l'editor, Git et retrocedeix al últim commit d'aquella llista i et deixa a la línia de comandaments amb el següent missatge:

[source,console]
----
$ git rebase -i HEAD~3
Stopped at f7f3f6d... Change my name a bit
You can amend the commit now, with

       git commit --amend

Once you're satisfied with your changes, run

       git rebase --continue
----

Aquestes instruccions et diuen exactament què fer. Escriu:

[source,console]
----
$ git commit --amend
----

Canvia el missatge del commit, i surt de l'editor. Després, executa:

[source,console]
----
$ git rebase --continue
----

Aquest comandament aplicarà els altres dos commits automàticament, i llavors hauràs acabat. Si canvies "`pick`" a "`edit`" en més línies, pots repetir aquests passos per a cada commit que canvies a "`edit`". Cada vegada, Git s'aturarà, et permetrà modificar el commit, i continuarà quan hàgis acabat.

==== Reordenar Commits

També pots utilitzar els rebases interactius per reordenar o eliminar commits completament. Si vols eliminar el commit "`Add cat-file`" i canviar l'ordre en què es presenten els altres dos commits, pots canviar l'script de rebase d'aquest:

[source,console]
----
pick f7f3f6d Change my name a bit
pick 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file
----

a això:

[source,console]
----
pick 310154e Update README formatting and add blame
pick f7f3f6d Change my name a bit
----

Quan guardis i surtis de l'editor, Git retrocedeix la teva branca al pare del primer commit de la teva llista, aplica el primer commit (`310154e`) i després el segon (`f7f3f6d`), i llavors s'atura. Has canviat efectivament l'ordre d'aquests commits i eliminat el commit "`Add cat-file`" completament.

[[_squashing]]
==== Aplanar Commits

També és possible prendre una sèrie de commits i aplanar-los en un únic commit amb l'eina de rebase interactiu. L'script posa instruccions útils al missatge de rebase:

[source,console]
----
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like "squash", but discard this commit's log message
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c <commit> to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
----

Si, en lloc de "`pick`" o "`edit`", especifiques "`squash`", Git aplica tant aquell canvi com el canvi directament abans i et fa fusionar els missatges de commit. Així, si vols fer un únic commit a partir d'aquests tres commits, fas que l'script sembli així:

[source,console]
----
pick f7f3f6d Change my name a bit
squash 310154e Update README formatting and add blame
squash a5f4a0d Add cat-file
----

Quan guardis i surtis de l'editor, Git aplica els tres canvis i llavors et torna a posar a l'editor per fusionar els tres missatges de commit:

[source,console]
----
# This is a combination of 3 commits.
# The first commit's message is:
Change my name a bit

# This is the 2nd commit message:

Update README formatting and add blame

# This is the 3rd commit message:

Add cat-file
----

Quan guardis això, tens un únic commit que introdueix els canvis de tots tres commits anteriors.

==== Dividir un Commit

Dividir un commit desfa un commit i després prepara i confirma parcialment tantes vegades com commits que vulguis acabar. Per exemple, suposem que vols dividir el commit del mig dels teus tres commits. En lloc de "`Update README formatting and add blame`", el vols dividir en dos commits: "`Update README formatting`" per al primer, i "`Add blame`" per al segon. Pots fer això a l'script `rebase -i` canviant la instrucció al commit que vols dividir a "`edit`":

[source,console]
----
pick f7f3f6d Change my name a bit
edit 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file
----

Llavors, quan l'script et deixa a la línia de comandaments, reseteixes aquell commit, agafes els canvis que s'han resetejat, i crees múltiples commits a partir d'ells. Quan guardis i surtis de l'editor, Git retrocedeix al pare del primer commit de la teva llista, aplica el primer commit (`f7f3f6d`), aplica el segon (`310154e`), i et deixa a la consola. Allà, pots fer un reset mixt d'aquell commit amb `git reset HEAD^`, que efectivament desfa aquell commit i deixa els fitxers modificats sense preparar. Ara pots preparar i confirmar fitxers fins que tinguis diversos commits, i executar `git rebase --continue` quan hàgis acabat:

[source,console]
----
$ git reset HEAD^
$ git add README
$ git commit -m 'Update README formatting'
$ git add lib/simplegit.rb
$ git commit -m 'Add blame'
$ git rebase --continue
----

Git aplica l'últim commit (`a5f4a0d`) a l'script, i el teu historial sembla així:

[source,console]
----
$ git log -4 --pretty=format:"%h %s"
1c002dd Add cat-file
9b29157 Add blame
35cfb2b Update README formatting
f7f3f6d Change my name a bit
----

Això canvia els SHA-1 dels tres commits més recents a la teva llista, així que assegura't que cap commit canviat aparegui a la llista que ja hàgis empenyat a un repositori compartit. Nota que l'últim commit (`f7f3f6d`) a la llista no ha canviat. Malgrat que aquest commit es mostri a l'script, perquè estava marcat com a "`pick`" i es va aplicar abans de qualsevol canvi de rebase, Git deixa el commit sense modificar.

==== Eliminar un Commit

Si vols desfer-te d'un commit, pots eliminar-lo utilitzant l'script `rebase -i`. A la llista de commits, posa la paraula "`drop`" abans del commit que vols eliminar (o simplement elimina aquesta línia de l'script de rebase):

[source,console]
----
pick 461cb2a This commit is OK
drop 5aecc10 This commit is broken
----

A causa de la manera en què Git construeix els objectes commit, eliminar o alterar un commit causarà la reescriptura de tots els commits que el segueixen. Quants més enrere a l'historial del teu repositori vagis, més commits hauran de ser recreats. Això pot causar molts conflictes de fusió si tens molts commits més endavant a la seqüència que depenen del que acabes d'eliminar.

Si arribes a mitja camí d'un rebase com aquest i decides que no és una bona idea, sempre pots aturar-te. Escriu `git rebase --abort`, i el teu repositori serà retornat a l'estat en què estava abans de començar el rebase.

Si acabes un rebase i decides que no és el que vols, pots utilitzar `git reflog` per recuperar una versió anterior de la teva branca. Vegeu <<ch10-git-internals#_data_recovery>> per a més informació sobre el comandament `reflog`.

[NOTE]
====
Drew DeVault va fer una guia pràctica amb exercicis per aprendre a utilitzar `git rebase`. La pots trobar a: https://git-rebase.io/[^]
====

==== L'Opció Nuclear: filter-branch

Hi ha una altra opció de reescriptura de l'historial que pots utilitzar si necessites reescriure un gran nombre de commits d'alguna manera programable, per exemple, canviant la teva adreça de correu electrònic globalment o eliminant un fitxer de cada commit. El comandament és `filter-branch`, i pot reescriure grans parts del teu historial, així que probablement no hauries d'utilitzar-lo a menys que el teu projecte encara no sigui públic i altres persones no hagin basat el treball en els commits que estàs a punt de reescriure. No obstant això, pot ser molt útil. Aprendràs algunes de les seves utilitats comunes perquè puguis fer-te una idea de algunes de les coses que és capaç de fer.

[CAUTION]
====
`git filter-branch` té molts inconvenients, i ja no és la manera recomanada de reescriure l'historial. En lloc d'això, considera utilitzar `git-filter-repo`, que és un script de Python que fa una millor feina per a la majoria d'aplicacions on normalment recorreries a `filter-branch`. La seva documentació i codi font es poden trobar a https://github.com/newren/git-filter-repo[^].
====

[[_removing_file_every_commit]]
===== Eliminar un Fitxer de Cada Commit

Això passa força sovint. Algú accidentalment confirma un fitxer binari enorme amb un `git add .` sense pensar, i vols eliminar-lo de tot arreu. Potser has confirmat accidentalment un fitxer que contenia una contrasenya, i vols fer el teu projecte de codi obert. `filter-branch` és probablement l'eina que voldràs utilitzar per netejar tot el teu historial. Per eliminar un fitxer anomenat `passwords.txt` de tot el teu historial, pots utilitzar l'opció `--tree-filter` a `filter-branch`:

[source,console]
----
$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
Rewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)
Ref 'refs/heads/master' was rewritten
----

L'opció `--tree-filter` executa el comandament especificat després de cada checkout del projecte i després torna a confirmar els resultats. En aquest cas, elimines un fitxer anomenat `passwords.txt` de cada instantània, ja existeixi o no. Si vols eliminar tots els fitxers de còpia de seguretat de l'editor confirmats accidentalment, pots executar alguna cosa com `git filter-branch --tree-filter 'rm -f *~' HEAD`.

Podràs veure Git reescriure arbres i commits i després moure el punter de branca al final. Generalment és una bona idea fer això en una branca de prova i després fer un reset dur de la teva branca `master` després d'haver determinat que el resultat és el que realment vols. Per executar `filter-branch` en totes les teves branques, pots passar `--all` al comandament.

===== Fer que un Subdirectori sigui la Nova Arrel

Suposem que has fet una importació d'un altre sistema de control de versions i tens subdirectoris que no tenen sentit (`trunk`, `tags`, etc.). Si vols fer que el subdirectori `trunk` sigui la nova arrel del projecte per a cada commit, `filter-branch` també et pot ajudar a fer això:

[source,console]
----
$ git filter-branch --subdirectory-filter trunk HEAD
Rewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)
Ref 'refs/heads/master' was rewritten
----

Ara la teva nova arrel del projecte és el que estava al subdirectori `trunk` cada vegada. Git també eliminarà automàticament els commits que no van afectar el subdirectori.

===== Canviar Adreces de Correu Electrònic Globalment

Un altre cas comú és que vas oblidar d'executar `git config` per establir el teu nom i adreça de correu electrònic abans de començar a treballar, o potser vols obrir el codi d'un projecte al treball i canviar totes les teves adreces de correu electrònic laborals a la teva adreça personal. En qualsevol cas, també pots canviar les adreces de correu electrònic en múltiples commits en un lot amb `filter-branch`. Has de ser cuidadosa de canviar només les adreces de correu electrònic que són teves, així que utilitzes `--commit-filter`:

[source,console]
----
$ git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];
        then
                GIT_AUTHOR_NAME="Scott Chacon";
                GIT_AUTHOR_EMAIL="schacon@example.com";
                git commit-tree "$@";
        else
                git commit-tree "$@";
        fi' HEAD
----

Això passa i reescriu cada commit per tenir la teva nova adreça. Com que els commits contenen els valors SHA-1 dels seus pares, aquest comandament canvia cada SHA-1 de commit al teu historial, no només els que tenen l'adreça de correu electrònic coincident.
