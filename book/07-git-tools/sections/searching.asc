[[_searching]]
=== Cercant

Amb gairebé qualsevol mida de base de codi, sovint necessitaràs trobar on es crida o es defineix una funció, o mostrar l'historial d'un mètode. Git proporciona algunes eines útils per buscar a través del codi i els commits emmagatzemats a la seva base de dades de manera ràpida i fàcil. Passarem per algunes d'elles.

[[_git_grep]]
==== Git Grep

Git inclou un comandament anomenat `grep` que et permet buscar fàcilment a través de qualsevol arbre confirmat, el directori de treball, o fins i tot l'índex per una cadena o expressió regular. Per als exemples següents, buscarem a través del codi font de Git mateix.

Per defecte, `git grep` buscarà a través dels fitxers al teu directori de treball. Com a primera variant, pots utilitzar qualsevol de les opcions `-n` o `--line-number` per imprimir els números de línia on Git ha trobat coincidències:

[source,console]
----
$ git grep -n gmtime_r
compat/gmtime.c:3:#undef gmtime_r
compat/gmtime.c:8:      return git_gmtime_r(timep, &result);
compat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result)
compat/gmtime.c:16:     ret = gmtime_r(timep, result);
compat/mingw.c:826:struct tm *gmtime_r(const time_t *timep, struct tm *result)
compat/mingw.h:206:struct tm *gmtime_r(const time_t *timep, struct tm *result);
date.c:482:             if (gmtime_r(&now, &now_tm))
date.c:545:             if (gmtime_r(&time, tm)) {
date.c:758:             /* gmtime_r() in match_digit() may have clobbered it */
git-compat-util.h:1138:struct tm *git_gmtime_r(const time_t *, struct tm *);
git-compat-util.h:1140:#define gmtime_r git_gmtime_r
----

A més de la cerca bàsica mostrada anteriorment, `git grep` suporta una gran quantitat d'altres opcions interessants.

Per exemple, en lloc d'imprimir totes les coincidències, pots demanar a `git grep` que resumeixi la sortida mostrant-te només quins fitxers contenien la cadena de cerca i quantes coincidències hi havia a cada fitxer amb l'opció `-c` o `--count`:

[source,console]
----
$ git grep --count gmtime_r
compat/gmtime.c:4
compat/mingw.c:1
compat/mingw.h:1
date.c:3
git-compat-util.h:2
----

Si t'interessa el _context_ d'una cadena de cerca, pots mostrar el mètode o funció que l'envolta per a cada cadena que coincideixi amb qualsevol de les opcions `-p` o `--show-function`:

[source,console]
----
$ git grep -p gmtime_r *.c
date.c=static int match_multi_number(timestamp_t num, char c, const char *date,
date.c:         if (gmtime_r(&now, &now_tm))
date.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)
date.c:         if (gmtime_r(&time, tm)) {
date.c=int parse_date_basic(const char *date, timestamp_t *timestamp, int *offset)
date.c:         /* gmtime_r() in match_digit() may have clobbered it */
----

Com pots veure, la rutina `gmtime_r` és cridada des de les funcions `match_multi_number` i `match_digit` al fitxer `date.c` (la tercera coincidència mostrada representa només la cadena que apareix en un comentari).

També pots buscar combinacions complexes de cadenes amb la bandera `--and`, que assegura que múltiples coincidències han d'ocórrer a la mateixa línia de text. Per exemple, busquem qualsevol línia que defineixi una constant el nom de la qual contingui _o_ el substring "`LINK`" _o_ "`BUF_MAX`", específicament en una versió més antiga de la base de codi de Git representada per l'etiqueta `v1.8.0` (afegirem les opcions `--break` i `--heading` que ajuden a dividir la sortida en un format més llegible):

[source,console]
----
$ git grep --break --heading \
    -n -e '#define' --and \( -e LINK -e BUF_MAX \) v1.8.0
v1.8.0:builtin/index-pack.c
62:#define FLAG_LINK (1u<<20)

v1.8.0:cache.h
73:#define S_IFGITLINK  0160000
74:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)

v1.8.0:environment.c
54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS

v1.8.0:strbuf.c
326:#define STRBUF_MAXLINK (2*PATH_MAX)

v1.8.0:symlinks.c
53:#define FL_SYMLINK  (1 << 2)

v1.8.0:zlib.c
30:/* #define ZLIB_BUF_MAX ((uInt)-1) */
31:#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */
----

El comandament `git grep` té alguns avantatges sobre els comandaments de cerca normals com `grep` i `ack`. El primer és que és realment ràpid, el segon és que pots buscar a través de qualsevol arbre a Git, no només el directori de treball. Com vam veure a l'exemple anterior, vam buscar termes en una versió més antiga del codi font de Git, no la versió que estava actualment revisada.

==== Cercant a l'Historial de Git

Potser no estàs buscant _on_ existeix un terme, sinó _quan_ va existir o va ser introduït. El comandament `git log` té una sèrie d'eines poderoses per trobar commits específics pel contingut dels seus missatges o fins i tot pel contingut del diff que introdueixen.

Si, per exemple, volem descobrir quan es va introduir originalment la constant `ZLIB_BUF_MAX`, podem utilitzar l'opció `-S` (col·loquialment coneguda com l'opció "`pic`" de Git) per dir a Git que ens mostri només aquells commits que van canviar el nombre d'ocurrències d'aquesta cadena.

[source,console]
----
$ git log -S ZLIB_BUF_MAX --oneline
e01503b zlib: permet alimentar més de 4GB d'una vegada
ef49a7a zlib: zlib només pot processar 4GB cada vegada
----

Si mirem el diff d'aquests commits, podem veure que a `ef49a7a` es va introduir la constant i a `e01503b` es va modificar.

Si necessites ser més específic, pots proporcionar una expressió regular per buscar amb l'opció `-G`.

===== Cercant a l'Historial de Línies

Una altra cerca a l'historial força avançada que és increïblement útil és la cerca d'historial de línies. Simplement executa `git log` amb l'opció `-L`, i et mostrarà l'historial d'una funció o línia de codi a la teva base de codi.

Per exemple, si volem veure cada canvi realitzat a la funció `git_deflate_bound` al fitxer `zlib.c`, podríem executar `git log -L :git_deflate_bound:zlib.c`. Això intentarà esbrinar quins són els límits d'aquesta funció i després buscarà a través de l'historial i ens mostrarà cada canvi que es va fer a la funció com una sèrie de pegats fins a quan es va crear la funció.

[source,console]
----
$ git log -L :git_deflate_bound:zlib.c
commit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:52:15 2011 -0700

    zlib: zlib només pot processar 4GB cada vegada

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -85,5 +130,5 @@
-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size)
 {
-       return deflateBound(strm, size);
+       return deflateBound(&strm->z, size);
 }

commit 225a6f1068f71723a910e8565db4e252b3ca21fa
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:18:17 2011 -0700

    zlib: embolicar deflateBound() també

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -81,0 +85,5 @@
+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+{
+       return deflateBound(strm, size);
+}
+
----

Si Git no pot esbrinar com fer coincidir una funció o mètode al teu llenguatge de programació, també pots proporcionar-li una expressió regular (o _regex_). Per exemple, això hauria fet el mateix que l'exemple anterior: `git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c`. També podries donar-li un rang de línies o un número de línia i obtindries el mateix tipus de sortida.
