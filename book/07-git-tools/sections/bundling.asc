[[_bundling]]
=== Agrupació

Tot i que hem cobert les formes comunes de transferir dades de Git a través d'una xarxa (HTTP, SSH, etc.), en realitat hi ha una altra manera de fer-ho que no és comú però que pot ser molt útil.

Git és capaç d'"agrupar" les seves dades en un sol fitxer. Això pot ser útil en diversos escenaris. Potser la teva xarxa no funciona i vols enviar canvis als teus companys. Potser estàs treballant en un lloc fora de la xarxa i no tens accés a la xarxa local per raons de seguretat. Potser la teva targeta sense fils/Ethernet s'ha espatllat. Potser no tens accés a un servidor compartit en aquest moment, vols enviar actualitzacions a algú per correu electrònic i no vols transferir 40 confirmacions mitjançant `format-patch`.

Aquí és on la comanda `git bundle` pot ser útil. La comanda `bundle` empaquetarà tot el que normalment es transferiria mitjançant una comanda `git push` en un fitxer binari que pots enviar per correu electrònic a algú o posar en una unitat flash, i després desagrupar en un altre repositori.

Vegem un exemple senzill. Diguem que tens un repositori amb dues confirmacions:

[source,console]
----
$ git log
commit 9a466c572fe88b195efd356c3f2bbeccdb504102
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Mar 10 07:34:10 2010 -0800

    Segona confirmació

commit b1ec3248f39900d2a406049d762aa68e9641be25
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Mar 10 07:34:01 2010 -0800

    Primera confirmació
----

Si vols enviar aquest repositori a algú i no tens accés a un repositori per fer push, o simplement no vols configurar-ne un, pots agrupar-lo amb `git bundle create`.

[source,console]
----
$ git bundle create repo.bundle HEAD master
Counting objects: 6, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (6/6), 441 bytes, done.
Total 6 (delta 0), reused 0 (delta 0)
----

Ara tens un fitxer anomenat `repo.bundle` que conté totes les dades necessàries per recrear la branca `master` del repositori. Amb la comanda `bundle`, has de llistar cada referència o rang específic de confirmacions que vols incloure. Si tens la intenció que això es cloni en un altre lloc, hauries d'afegir HEAD com a referència així com hem fet aquí.

Pots enviar aquest fitxer `repo.bundle` a algú altre per correu electrònic, o posar-lo en una unitat USB i portar-lo.

A l'altra banda, diguem que se t'envia aquest fitxer `repo.bundle` i vols treballar en el projecte. Pots clonar des del fitxer binari en un directori, molt similar a com ho faries des d'una URL.

[source,console]
----
$ git clone repo.bundle repo
Cloning into 'repo'...
...
$ cd repo
$ git log --oneline
9a466c5 Segona confirmació
b1ec324 Primera confirmació
----

Si no inclous HEAD en les referències, també has de especificar `-b master` o qualsevol branca que estigui inclosa perquè, d'altra manera, no sabrà quina branca revisar.

Ara diguem que fas tres confirmacions i vols enviar les noves confirmacions de nou mitjançant un bundle en una unitat USB o correu electrònic.

[source,console]
----
$ git log --oneline
71b84da Última confirmació - segon repositori
c99cf5b Quarta confirmació - segon repositori
7011d3d Tercera confirmació - segon repositori
9a466c5 Segona confirmació
b1ec324 Primera confirmació
----

Primer hem de determinar el rang de confirmacions que volem incloure en el bundle. A diferència dels protocols de xarxa que determinen el conjunt mínim de dades a transferir per la xarxa per nosaltres, haurem de determinar això manualment. Ara, podríeu fer el mateix i agrupar tot el repositori, el que funcionaria, però és millor agrupar només la diferència, només les tres confirmacions que acabem de fer localment.

Per fer això, haureu de calcular la diferència. Com vam descriure en <<ch07-git-tools#_commit_ranges>>, podeu especificar un rang de confirmacions de diverses maneres. Per obtenir les tres confirmacions que tenim a la nostra branca `master` que no estaven a la branca que vam clonar originalment, podem utilitzar alguna cosa com `origin/master..master` o `master ^origin/master`. Podeu provar això amb la comanda `log`.

[source,console]
----
$ git log --oneline master ^origin/master
71b84da Última confirmació - segon repositori
c99cf5b Quarta confirmació - segon repositori
7011d3d Tercera confirmació - segon repositori
----

Ara que tenim la llista de confirmacions que volem incloure en el bundle, agrupem-les. Ho fem amb la comanda `git bundle create`, donant-li un nom de fitxer que volem per al nostre bundle i el rang de confirmacions que volem que hi entrin.

[source,console]
----
$ git bundle create commits.bundle master ^9a466c5
Counting objects: 11, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (9/9), 775 bytes, done.
Total 9 (delta 0), reused 0 (delta 0)
----

Ara tenim un fitxer `commits.bundle` al nostre directori. Si el prenem i l'enviem al nostre company, ella pot importar-lo al repositori original, fins i tot si s'ha fet més treball allà en el temps.

Quan ella rep el bundle, pot inspeccionar-lo per veure què conté abans d'importar-lo al seu repositori. La primera comanda és la comanda `bundle verify` que s'assegurarà que el fitxer sigui realment un bundle vàlid de Git i que tingueu tots els avantpassats necessaris per reconstituir-lo correctament.

[source,console]
----
$ git bundle verify ../commits.bundle
The bundle contains 1 ref
71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master
The bundle requires these 1 ref
9a466c572fe88b195efd356c3f2bbeccdb504102 second commit
../commits.bundle is okay
----

Si l'agrupador hagués creat un bundle només amb les dues últims confirmacions que havia fet, en lloc de les tres, el repositori original no hauria pogut importar-lo, ja que li falta l'historial requisit. La comanda `verify` hauria semblat així en lloc d'això:

[source,console]
----
$ git bundle verify ../commits-bad.bundle
error: Repository lacks these prerequisite commits:
error: 7011d3d8fc200abe0ad561c011c3852a4b7bbe95 Tercera confirmació - segon repositori
----

No obstant això, el nostre primer bundle és vàlid, així que podem obtenir confirmacions d'ell. Si vols veure quines branques hi ha al bundle que es poden importar, també hi ha una comanda per llistar només els caps:

[source,console]
----
$ git bundle list-heads ../commits.bundle
71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master
----

El subcomandament `verify` et dirà els caps també. El punt és veure què es pot importar, així que pots utilitzar les comandes `fetch` o `pull` per importar confirmacions d'aquest bundle. Aquí obtindrem la branca `master` del bundle a una branca anomenada `other-master` al nostre repositori:

[source,console]
----
$ git fetch ../commits.bundle master:other-master
From ../commits.bundle
 * [new branch]      master     -> other-master
----

Ara podem veure que tenim les confirmacions importades a la branca `other-master` així com qualsevol confirmació que hàgim fet en el temps al nostre propi branca `master`.

[source,console]
----
$ git log --oneline --decorate --graph --all
* 8255d41 (HEAD, master) Tercera confirmació - primer repositori
| * 71b84da (other-master) Última confirmació - segon repositori
| * c99cf5b Quarta confirmació - segon repositori
| * 7011d3d Tercera confirmació - segon repositori
|/
* 9a466c5 Segona confirmació
* b1ec324 Primera confirmació
----

Així que, `git bundle` pot ser realment útil per compartir o fer operacions de tipus xarxa quan no tens la xarxa adequada o el repositori compartit per fer-ho.
