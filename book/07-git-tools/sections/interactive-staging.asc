[[_interactive_staging]]
=== Preparació Interactiva

En aquesta secció, veureu algunes comandes interactives de Git que us poden ajudar a elaborar les vostres confirmacions per incloure només certes combinacions i parts de fitxers.
Aquestes eines són útils si modifiqueu una sèrie de fitxers de manera extensa i després decideu que voleu que aquests canvis es divideixin en diverses confirmacions enfocades en lloc d'una sola confirmació gran i desordenada.
D'aquesta manera, podeu assegurar-vos que les vostres confirmacions són conjunts de canvis lògicament separats i poden ser revisats fàcilment pels desenvolupadors que treballen amb vosaltres.

Si executeu `git add` amb l'opció `-i` o `--interactive`, Git entra en un mode de shell interactiu, mostrant alguna cosa com això:

[source,console]
----
$ git add -i
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb

*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now>
----

Podeu veure que aquesta comanda us mostra una vista molt diferent de la vostra àrea de preparació a la que probablement esteu acostumats, bàsicament la mateixa informació que obteniu amb `git status` però una mica més concisa i informativa.
Llista els canvis que heu preparat a l'esquerra i els canvis no preparats a la dreta.

Després d'això ve una secció de "`Commands`", que us permet fer diverses coses com preparar i despreparar fitxers, preparar parts de fitxers, afegir fitxers no seguits i mostrar difs del que s'ha preparat.

==== Preparació i Despreparació de Fitxers

Si escriviu `u` o `2` (per a update) a l'indicador `What now>`, se us demanarà quins fitxers voleu preparar:

[source,console]
----
What now> u
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>
----

Per preparar els fitxers `TODO` i `index.html`, podeu escriure els números:

[source,console]
----
Update>> 1,2
           staged     unstaged path
* 1:    unchanged        +0/-1 TODO
* 2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>
----

L'`*` al costat de cada fitxer significa que el fitxer està seleccionat per ser preparat.
Si premeu Enter després d'escriure res a l'indicador `Update>>`, Git agafa qualsevol cosa seleccionada i la prepara per a vosaltres:

[source,console]
----
Update>>
updated 2 paths

*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> s
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
----

Ara podeu veure que els fitxers `TODO` i `index.html` estan preparats i el fitxer `simplegit.rb` encara està sense preparar.
Si voleu despreparar el fitxer `TODO` en aquest moment, utilitzeu l'opció `r` o `3` (per a revert):

[source,console]
----
*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> r
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> 1
           staged     unstaged path
* 1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> [enter]
reverted one path
----

En tornar a mirar l'estat de Git, podeu veure que heu despreparat el fitxer `TODO`:

[source,console]
----
*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> s
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
----

Per veure el diff del que heu preparat, podeu utilitzar la comanda `d` o `6` (per a diff).
Us mostra una llista dels vostres fitxers preparats, i podeu seleccionar aquells per als quals voleu veure el diff preparat.
Això és molt similar a especificar `git diff --cached` a la línia de comandes:

[source,console]
----
*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> d
           staged     unstaged path
  1:        +1/-1      nothing index.html
Review diff>> 1
diff --git a/index.html b/index.html
index 4d07108..4335f49 100644
--- a/index.html
+++ b/index.html
@@ -16,7 +16,7 @@ Date Finder

 <p id="out">...</p>

-<div id="footer">contact : support@github.com</div>
+<div id="footer">contact : email.support@github.com</div>

 <script type="text/javascript">
----

Amb aquestes comandes bàsiques, podeu utilitzar el mode d'addició interactiu per gestionar la vostra àrea de preparació una mica més fàcilment.

==== Preparació de Parxels

També és possible que Git prepari certes _parts_ de fitxers i no la resta.
Per exemple, si feu dos canvis al vostre fitxer `simplegit.rb` i voleu preparar-ne un i no l'altre, fer-ho és molt fàcil a Git.
Des del mateix indicador interactiu explicat a la secció anterior, escriviu `p` o `5` (per a patch).
Git us demanarà quins fitxers voleu preparar parcialment; llavors, per a cada secció dels fitxers seleccionats, mostrarà trossos del diff del fitxer i us demanarà si voleu preparar-los, un per un:

[source,console]
----
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index dd5ecc4..57399e0 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -22,7 +22,7 @@ class SimpleGit
   end

   def log(treeish = 'master')
-    command("git log -n 25 #{treeish}")
+    command("git log -n 30 #{treeish}")
   end

   def blame(path)
Stage this hunk [y,n,a,d,/,j,J,g,e,?]?
----

Teniu moltes opcions en aquest punt.
Escriure `?` mostra una llista del que podeu fer:

[source,console]
----
Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ?
y - stage this hunk
n - do not stage this hunk
a - stage this and all the remaining hunks in the file
d - do not stage this hunk nor any of the remaining hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
----

Generalment, escrivireu `y` o `n` si voleu preparar cada tros, però preparar-los tots en certs fitxers o saltar una decisió de tros fins més tard també pot ser útil.
Si prepareu una part del fitxer i deixeu una altra part sense preparar, la sortida del vostre estat es veurà així:

[source,console]
----
What now> 1
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:        +1/-1        +4/-0 lib/simplegit.rb
----

L'estat del fitxer `simplegit.rb` és interessant.
Us mostra que algunes línies estan preparades i altres no.
Heu preparat parcialment aquest fitxer.
En aquest moment, podeu sortir de l'script d'addició interactiu i executar `git commit` per confirmar els fitxers preparats parcialment.

També no necessiteu estar en mode d'addició interactiu per fer la preparació parcial de fitxers, podeu iniciar el mateix script utilitzant `git add -p` o `git add --patch` a la línia de comandes.

A més, podeu utilitzar el mode de parxel per a restablir parcialment fitxers amb la comanda `git reset --patch`, per a comprovar parts de fitxers amb la comanda `git checkout --patch` i per a desar parts de fitxers amb la comanda `git stash save --patch`.
Entrarem en més detalls sobre cadascuna d'aquestes a mesura que arribem a usos més avançats d'aquestes comandes.