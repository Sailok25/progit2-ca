[[ref_rerere]]
=== Rerere

La funcionalitat `git rerere` és una mica una característica oculta.
El nom significa "`reuse recorded resolution`" (reutilitzar resolució registrada) i, com el nom implica, et permet demanar a Git que recordi com has resolt un conflicte de trossos de manera que la propera vegada que vegi el mateix conflicte, Git pugui resoldre'l automàticament per a tu.

Hi ha diversos escenaris en els quals aquesta funcionalitat pot ser molt útil.
Un dels exemples que es menciona a la documentació és quan vols assegurar-te que una branca temàtica de llarga durada finalment es fusionarà netament, però no vols tenir una sèrie de confirmacions de fusió intermèdies que desordenin el teu historial de confirmacions.
Amb `rerere` habilitat, pots intentar la fusió ocasional, resoldre els conflictes i després desfer la fusió.
Si ho fas contínuament, llavors la fusió final hauria de ser fàcil perquè `rerere` pot fer-ho tot automàticament per a tu.

Aquesta mateixa tàctica es pot utilitzar si vols mantenir una branca rebasejada per no haver de tractar amb els mateixos conflictes de rebase cada vegada que ho facis.
O si vols prendre una branca que has fusionat i has corregit una sèrie de conflictes i després decides rebasejar-la en lloc de fusionar-la, és probable que no hagis de tornar a fer tots els mateixos conflictes.

Una altra aplicació de `rerere` és quan fusiones una sèrie de branques temàtiques en evolució en un cap de prova ocasionalment, com sovint fa el mateix projecte Git.
Si les proves fallen, pots retrocedir les fusions i tornar a fer-les sense la branca temàtica que va fer fallar les proves sense haver de tornar a resoldre els conflictes.

Per habilitar la funcionalitat `rerere`, simplement has d'executar aquesta configuració:

[source,console]
----
$ git config --global rerere.enabled true
----

També pots activar-la creant el directori `.git/rr-cache` en un repositori específic, però la configuració és més clara i habilita aquesta característica globalment per a tu.

Ara veurem un exemple senzill, similar al nostre anterior.
Digues que tenim un fitxer anomenat `hello.rb` que sembla així:

[source,ruby]
----
#! /usr/bin/env ruby

def hello
  puts 'hello world'
end
----

En una branca canviem la paraula "`hello`" a "`hola`", i en una altra branca canviem "`world`" a "`mundo`", igual que abans.

.Dues branques canviant la mateixa part del mateix fitxer de manera diferent
image::images/rerere1.png[Dues branques canviant la mateixa part del mateix fitxer de manera diferent]

Quan fusionem les dues branques, obtindrem un conflicte de fusió:

[source,console]
----
$ git merge i18n-world
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Recorded preimage for 'hello.rb'
Automatic merge failed; fix conflicts and then commit the result.
----

Has de notar la nova línia `Recorded preimage for FILE` allà.
D'una altra manera, hauria de semblar exactament com un conflicte de fusió normal.
En aquest punt, `rerere` pot dir-nos algunes coses.
Normalment, podries executar `git status` en aquest moment per veure què està en conflicte:

[source,console]
----
$ git status
# On branch master
# Unmerged paths:
#   (use "git reset HEAD <file>..." to unstage)
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      hello.rb
#
----

No obstant això, `git rerere` també et dirà quins estats pre-fusió ha registrat amb `git rerere status`:

[source,console]
----
$ git rerere status
hello.rb
----

I `git rerere diff` mostrarà l'estat actual de la resolució: amb què vas començar a resoldre i com l'has resolt.

[source,console]
----
$ git rerere diff
--- a/hello.rb
+++ b/hello.rb
@@ -1,11 +1,11 @@
 #! /usr/bin/env ruby

 def hello
-<<<<<<<
-  puts 'hello mundo'
-=======
+<<<<<<< HEAD
   puts 'hola world'
->>>>>>>
+=======
+  puts 'hello mundo'
+>>>>>>> i18n-world
 end
----

A més (i això no està realment relacionat amb `rerere`), pots utilitzar `git ls-files -u` per veure els fitxers en conflicte i les versions abans, esquerra i dreta:

[source,console]
----
$ git ls-files -u
100644 39804c942a9c1f2c03dc7c5ebcd7f3e3a6b97519 1	hello.rb
100644 a440db6e8d1fd76ad438a49025a9ad9ce746f581 2	hello.rb
100644 54336ba847c3758ab604876419607e9443848474 3	hello.rb
----

Ara pots resoldre-ho perquè sigui simplement `puts 'hola mundo'` i pots executar `git rerere diff` una altra vegada per veure què recordarà rerere:

[source,console]
----
$ git rerere diff
--- a/hello.rb
+++ b/hello.rb
@@ -1,11 +1,7 @@
 #! /usr/bin/env ruby

 def hello
-<<<<<<<
-  puts 'hello mundo'
-=======
-  puts 'hola world'
->>>>>>>
+  puts 'hola mundo'
 end
----

Així que bàsicament diu que, quan Git vegi un conflicte de trossos en un fitxer `hello.rb` que té "`hello mundo`" en un costat i "`hola world`" en l'altre, el resoldrà a "`hola mundo`".

Ara podem marcar-lo com a resolt i confirmar-lo:

[source,console]
----
$ git add hello.rb
$ git commit
Recorded resolution for 'hello.rb'.
[master 68e16e5] Merge branch 'i18n'
----

Pots veure que ha "Recorded resolution for FILE".

.Resolució registrada per a FILE
image::images/rerere2.png[Resolució registrada per a FILE]

Ara, desfem aquesta fusió i després rebasegem-la sobre la nostra branca `master`.
Podem tornar la nostra branca enrere utilitzant `git reset` com vam veure a <<ch07-git-tools#_git_reset>>.

[source,console]
----
$ git reset --hard HEAD^
HEAD is now at ad63f15 i18n the hello
----

La nostra fusió està desfeta.
Ara rebasegem la branca temàtica.

[source,console]
----
$ git checkout i18n-world
Switched to branch 'i18n-world'

$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: i18n one word
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Resolved 'hello.rb' using previous resolution.
Failed to merge in the changes.
Patch failed at 0001 i18n one word
----

Ara, vam obtenir el mateix conflicte de fusió com esperàvem, però mira la línia `Resolved FILE using previous resolution`.
Si mirem el fitxer, veurem que ja ha estat resolt, no hi ha marcadors de conflicte de fusió.

[source,ruby]
----
#! /usr/bin/env ruby

def hello
  puts 'hola mundo'
end
----

A més, `git diff` et mostrarà com es va tornar a resoldre automàticament:

[source,console]
----
$ git diff
diff --cc hello.rb
index a440db6,54336ba..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end
----

.Conflicte de fusió resolt automàticament utilitzant la resolució prèvia
image::images/rerere3.png[Conflicte de fusió resolt automàticament utilitzant la resolució prèvia]

També pots recrear l'estat de conflicte del fitxer amb `git checkout`:

[source,console]
----
$ git checkout --conflict=merge hello.rb
$ cat hello.rb
#! /usr/bin/env ruby

def hello
<<<<<<< ours
  puts 'hola world'
=======
  puts 'hello mundo'
>>>>>>> theirs
end
----

Vam veure un exemple d'això a <<ch07-git-tools#_advanced_merging>>.
Per ara, però, tornem a resoldre-ho simplement executant `git rerere` una altra vegada:

[source,console]
----
$ git rerere
Resolved 'hello.rb' using previous resolution.
$ cat hello.rb
#! /usr/bin/env ruby

def hello
  puts 'hola mundo'
end
----

Hem tornat a resoldre el fitxer automàticament utilitzant la resolució en memòria cau de `rerere`.
Ara pots afegir i continuar el rebase per completar-lo.

[source,console]
----
$ git add hello.rb
$ git rebase --continue
Applying: i18n one word
----

Així que, si fas moltes re-fusions, o vols mantenir una branca temàtica actualitzada amb la teva branca `master` sense una muntanya de fusions, o rebaseges sovint, pots activar `rerere` per ajudar-te una mica en la teva vida.
