[[_replace]]
=== Reemplaçament

Com hem enfatitzat abans, els objectes a la base de dades d'objectes de Git són immutables, però Git proporciona una manera interessant de _fingir_ reemplaçar objectes a la seva base de dades amb altres objectes.

La comanda `replace` us permet especificar un objecte a Git i dir "cada vegada que us referiu a _aquest_ objecte, feu com si fos un _altre_ objecte".
Això és més comunament útil per reemplaçar una confirmació a la vostra història amb una altra sense haver de reconstruir tota la història amb, per exemple, `git filter-branch`.

Per exemple, suposem que teniu una història de codi enorme i voleu dividir el vostre repositori en una història curta per a nous desenvolupadors i una altra molt més llarga i gran per a persones interessades en la mineria de dades.
Podeu empeltar una història a l'altra "reemplaçant" la confirmació més antiga de la nova línia amb la confirmació més recent de l'antiga.
Això és útil perquè significa que no heu de reescriure cada confirmació a la nova història, com normalment hauríeu de fer per unir-les (perquè el parentatge afecta els SHA-1).

Provem això.
Prenguem un repositori existent, dividim-lo en dos repositoris, un recent i un històric, i després veurem com podem recombinar-los sense modificar els valors SHA-1 del repositori recent mitjançant `replace`.

Utilitzarem un repositori simple amb cinc confirmacions simples:

[source,console]
----
$ git log --oneline
ef989d8 Cinquena confirmació
c6e1e95 Quarta confirmació
9c68fdc Tercera confirmació
945704c Segona confirmació
c1822cf Primera confirmació
----

Volem dividir això en dues línies d'història.
Una línia va de la primera a la quarta confirmació: aquesta serà l'històrica.
La segona línia serà només les confirmacions quatre i cinc: aquesta serà la història recent.

.Exemple d'història de Git
image::images/replace1.png[Exemple d'història de Git]

Bé, crear l'història històrica és fàcil, simplement podem posar una branca a l'història i després enviar aquesta branca a la branca `master` d'un nou repositori remot.

[source,console]
----
$ git branch history c6e1e95
$ git log --oneline --decorate
ef989d8 (HEAD, master) Cinquena confirmació
c6e1e95 (history) Quarta confirmació
9c68fdc Tercera confirmació
945704c Segona confirmació
c1822cf Primera confirmació
----

.Creant una nova branca `history`
image::images/replace2.png[Creant una nova branca `history`]

Ara podem enviar la nova branca `history` a la branca `master` del nostre nou repositori:

[source,console]
----
$ git remote add project-history https://github.com/schacon/project-history
$ git push project-history history:master
Counting objects: 12, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (12/12), 907 bytes, done.
Total 12 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (12/12), done.
To git@github.com:schacon/project-history.git
 * [new branch]      history -> master
----

D'acord, així que la nostra història està publicada.
Ara la part més difícil és truncar la nostra història recent per fer-la més petita.
Necessitem una superposició per poder reemplaçar una confirmació en una amb una confirmació equivalent en l'altra, així que la truncarem només a les confirmacions quatre i cinc (així que la confirmació quatre es superposa).

[source,console]
----
$ git log --oneline --decorate
ef989d8 (HEAD, master) Cinquena confirmació
c6e1e95 (history) Quarta confirmació
9c68fdc Tercera confirmació
945704c Segona confirmació
c1822cf Primera confirmació
----

En aquest cas, és útil crear una confirmació base que contingui instruccions sobre com expandir la història, així que altres desenvolupadors sàpiguen què fer si arriben a la primera confirmació a la història truncada i necessiten més.
Així que, el que farem és crear un objecte de confirmació inicial com a punt base amb instruccions, després rebase les confirmacions restants (quatre i cinc) sobre aquest.

Per fer això, hem de triar un punt per dividir, que per a nosaltres és la tercera confirmació, que és `9c68fdc` en termes de SHA.
Així que, la nostra confirmació base es basarà en aquest arbre.
Podem crear la nostra confirmació base utilitzant la comanda `commit-tree`, que simplement pren un arbre i ens donarà un nou SHA-1 de confirmació sense pares.

[source,console]
----
\$ echo 'Obtenir història de blah blah blah' | git commit-tree 9c68fdc^{tree}
622e88e9cbfbacfb75b5279245b9fb38dfea10cf
----

[NOTE]
=====
La comanda `commit-tree` és una d'un conjunt de comandes que comunament es coneixen com a comandes de "plomería".
Aquestes són comandes que generalment no estan destinades a ser utilitzades directament, sinó que són utilitzades per *altres* comandes de Git per fer feines més petites.
En ocasions en què estem fent coses més estranyes com aquesta, ens permeten fer coses de molt baix nivell però no estan destinades a ús diari.
Podeu llegir més sobre les comandes de plomería a <<ch10-git-internals#_plumbing_porcelain>>.
=====

.Creant una confirmació base utilitzant `commit-tree`
image::images/replace3.png[Creant una confirmació base utilitzant `commit-tree`]

D'acord, ara que tenim una confirmació base, podem rebase la resta de la nostra història sobre aquesta amb `git rebase --onto`.
L'argument `--onto` serà el SHA-1 que acabem de rebre de `commit-tree` i el punt de rebase serà la tercera confirmació (el pare de la primera confirmació que volem mantenir, `9c68fdc`):

[source,console]
----
\$ git rebase --onto 622e88 9c68fdc
First, rewinding head to replay your work on top of it...
Applying: fourth commit
Applying: fifth commit
----

.Rebase la història sobre la confirmació base
image::images/replace4.png[Rebase la història sobre la confirmació base]

D'acord, així que ara hem reescrit la nostra història recent sobre una confirmació base provisional que ara conté instruccions sobre com reconstruir tota la història si volem.
Podem enviar aquesta nova història a un nou projecte i ara quan la gent cloni aquest repositori, només veuran les dues confirmacions més recents i després una confirmació base amb instruccions.

Canviem ara de rol a algú que clona el projecte per primera vegada i vol tota la història.
Per obtenir les dades de la història després de clonar aquest repositori truncat, algú hauria d'afegir un segon remot per al repositori històric i fer un fetch:

[source,console]
----
$ git clone https://github.com/schacon/project
$ cd project

$ git log --oneline master
e146b5f Cinquena confirmació
81a708d Quarta confirmació
622e88e Obtenir història de blah blah blah

$ git remote add project-history https://github.com/schacon/project-history
$ git fetch project-history
From https://github.com/schacon/project-history
 * [new branch]      master     -> project-history/master
----

Ara el col·laborador tindria les seves confirmacions recents a la branca `master` i les confirmacions històriques a la branca `project-history/master`.

[source,console]
----
$ git log --oneline master
e146b5f Cinquena confirmació
81a708d Quarta confirmació
622e88e Obtenir història de blah blah blah

$ git log --oneline project-history/master
c6e1e95 Quarta confirmació
9c68fdc Tercera confirmació
945704c Segona confirmació
c1822cf Primera confirmació
----

Per combinar-les, simplement podeu cridar `git replace` amb la confirmació que voleu reemplaçar i després la confirmació amb la qual voleu reemplaçar-la.
Així que volem reemplaçar la confirmació "quarta" a la branca `master` amb la confirmació "quarta" a la branca `project-history/master`:

[source,console]
----
$ git replace 81a708d c6e1e95
----

Ara, si mireu la història de la branca `master`, sembla que es veu així:

[source,console]
----
$ git log --oneline master
e146b5f Cinquena confirmació
81a708d Quarta confirmació
9c68fdc Tercera confirmació
945704c Segona confirmació
c1822cf Primera confirmació
----

Genial, oi? Sense haver de canviar tots els SHA-1 aigües amunt, vam poder reemplaçar una confirmació a la nostra història amb una confirmació completament diferent i totes les eines normals (`bisect`, `blame`, etc.) funcionaran com esperem que ho facin.

.Combinant les confirmacions amb `git replace`
image::images/replace5.png[Combinant les confirmacions amb `git replace`]

Curiosament, encara mostra `81a708d` com a SHA-1, tot i que en realitat està utilitzant les dades de confirmació `c6e1e95` amb les quals l'hem reemplaçat.
Fins i tot si executeu una comanda com `cat-file`, us mostrarà les dades reemplaçades:

[source,console]
----
$ git cat-file -p 81a708d
tree 7bc544cf438903b65ca9104a1e30345eee6c083d
parent 9c68fdceee073230f19ebb8b5e7fc71b479c0252
author Scott Chacon <schacon@gmail.com> 1268712581 -0700
committer Scott Chacon <schacon@gmail.com> 1268712581 -0700

fourth commit
----

Recordeu que el pare real de `81a708d` era la nostra confirmació provisional (`622e88e`), no `9c68fdce` com es diu aquí.

Una altra cosa interessant és que aquestes dades es mantenen a les nostres referències:

[source,console]
----
\$ git for-each-ref
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/heads/master
c6e1e95051d41771a649f3145423f8809d1a74d4 commit	refs/remotes/history/master
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/remotes/origin/HEAD
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/remotes/origin/master
c6e1e95051d41771a649f3145423f8809d1a74d4 commit	refs/replace/81a708dd0e167a3f691541c7a6463343bc457040
----

Això significa que és fàcil compartir el nostre reemplaçament amb altres, perquè podem enviar això al nostre servidor i altres persones poden descarregar-lo fàcilment.
Això no és gaire útil en l'escenari d'empelt d'història que hem cobert aquí (ja que tothom descarregaria ambdues històries de totes maneres, així que per què separar-les?) però pot ser útil en altres circumstàncies.