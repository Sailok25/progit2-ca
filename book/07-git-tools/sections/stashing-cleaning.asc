[[_git_stashing]]
=== Guardar i netejar

Sovint, quan heu estat treballant en una part del vostre projecte, les coses estan en un estat desordenat i voleu canviar de branca per treballar en una altra cosa. El problema és que no voleu fer un commit de treball a mitges només per poder tornar a aquest punt més tard. La solució a aquest problema és la comanda `git stash`.

Guardar canvis pren l'estat desordenat del vostre directori de treball, és a dir, els vostres fitxers modificats i els canvis preparats, i els guarda en una pila de canvis sense acabar que podeu tornar a aplicar en qualsevol moment (fins i tot en una branca diferent).

[NOTE]
.Migrant a `git stash push`
====
A finals d'octubre de 2017, hi ha hagut una extensa discussió a la llista de correu de Git, en la qual s'està deprecant la comanda `git stash save` en favor de l'alternativa existent `git stash push`. La raó principal d'això és que `git stash push` introdueix l'opció de guardar _pathspecs_ seleccionats, alguna cosa que `git stash save` no suporta.

`git stash save` no desapareixerà aviat, així que no us preocupeu per això. Però podríeu voler començar a migrar a l'alternativa `push` per a la nova funcionalitat.
====

==== Guardar el vostre treball

Per demostrar com guardar canvis, entrareu al vostre projecte i començareu a treballar en un parell de fitxers i possiblement prepareu un dels canvis. Si executeu `git status`, podeu veure el vostre estat desordenat:

[source,console]
----
$ git status
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   index.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lib/simplegit.rb
----

Ara voleu canviar de branca, però no voleu confirmar el que heu estat treballant encara, així que guardareu els canvis. Per a empènyer un nou stash a la vostra pila, executeu `git stash` o `git stash push`:

[source,console]
----
$ git stash
Saved working directory and index state \
  "WIP on master: 049d078 Create index file"
HEAD is now at 049d078 Create index file
(To restore them type "git stash apply")
----

Ara podeu veure que el vostre directori de treball està net:

[source,console]
----
$ git status
# On branch master
nothing to commit, working directory clean
----

En aquest punt, podeu canviar de branques i treballar en un altre lloc; els vostres canvis estan guardats a la vostra pila. Per veure quins stashes heu guardat, podeu utilitzar `git stash list`:

[source,console]
----
$ git stash list
stash@{0}: WIP on master: 049d078 Create index file
stash@{1}: WIP on master: c264051 Revert "Add file_size"
stash@{2}: WIP on master: 21d80a5 Add number to log
----

En aquest cas, dos stashes van ser guardats prèviament, així que teniu accés a tres treballs diferents guardats. Podeu tornar a aplicar el que acabeu de guardar utilitzant la comanda mostrada a la sortida d'ajuda de la comanda stash original: `git stash apply`. Si voleu aplicar un dels stashes més antics, podeu especificar-lo nomenant-lo, així: `git stash apply stash@{2}`. Si no especifiqueu un stash, Git assumeix el stash més recent i intenta aplicar-lo:

[source,console]
----
$ git stash apply
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   index.html
	modified:   lib/simplegit.rb

no changes added to commit (use "git add" and/or "git commit -a")
----

Podeu veure que Git ha tornat a modificar els fitxers que vau revertir quan vau guardar el stash. En aquest cas, teníeu un directori de treball net quan vau intentar aplicar el stash, i vau intentar aplicar-lo a la mateixa branca des de la qual el vau guardar. Tenir un directori de treball net i aplicar-lo a la mateixa branca no són necessaris per aplicar un stash amb èxit. Podeu guardar un stash en una branca, canviar a una altra branca més tard i intentar tornar a aplicar els canvis. També podeu tenir fitxers modificats i no confirmats al vostre directori de treball quan apliqueu un stash: Git us donarà conflictes de fusió si alguna cosa ja no s'aplica netament.

Els canvis als vostres fitxers s'han tornat a aplicar, però el fitxer que vau preparar abans no s'ha tornat a preparar. Per fer això, heu d'executar la comanda `git stash apply` amb una opció `--index` per dir-li a la comanda que intenti tornar a aplicar els canvis preparats. Si haguéssiu executat això en el seu lloc, hauríeu tornat a la vostra posició original:

[source,console]
----
$ git stash apply --index
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   index.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lib/simplegit.rb
----

L'opció `apply` només intenta aplicar el treball guardat: continueu tenint el stash a la vostra pila. Per eliminar-lo, podeu executar `git stash drop` amb el nom del stash a eliminar:

[source,console]
----
$ git stash list
stash@{0}: WIP on master: 049d078 Create index file
stash@{1}: WIP on master: c264051 Revert "Add file_size"
stash@{2}: WIP on master: 21d80a5 Add number to log
$ git stash drop stash@{0}
Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)
----

També podeu executar `git stash pop` per aplicar el stash i després eliminar-lo immediatament de la vostra pila.

==== Guardar de manera creativa

Hi ha algunes variants de stash que també poden ser útils. La primera opció que és bastant popular és l'opció `--keep-index` per a la comanda `git stash`. Això li diu a Git que no només inclogui tot el contingut preparat al stash que s'està creant, sinó que simultàniament el deixi a l'índex.

[source,console]
----
$ git status -s
M  index.html
 M lib/simplegit.rb

$ git stash --keep-index
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
M  index.html
----

Una altra cosa comuna que podríeu voler fer amb stash és guardar els fitxers no rastreados així com els rastreados. Per defecte, `git stash` només guardarà fitxers modificats i preparats que estan rastreados. Si especifiqueu `--include-untracked` o `-u`, Git inclourà fitxers no rastreados al stash que s'està creant. No obstant això, incloure fitxers no rastreados al stash encara no inclourà fitxers explícitament ignorats; per incloure a més fitxers ignorats, utilitzeu `--all` (o simplement `-a`).

[source,console]
----
$ git status -s
M  index.html
 M lib/simplegit.rb
?? new-file.txt

$ git stash -u
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
$
----

Finalment, si especifiqueu la bandera `--patch`, Git no guardarà tot el que està modificat, sinó que us preguntarà de manera interactiva quins canvis us agradaria guardar i quins us agradaria mantenir al vostre directori de treball.

[source,console]
----
$ git stash --patch
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index 66d332e..8bb5674 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -16,6 +16,10 @@ class SimpleGit
         return `#{git_cmd} 2>&1`.chomp
       end
     end
+
+    def show(treeish = 'master')
+      command("git show #{treeish}")
+    end

 end
 test
Stash this hunk [y,n,q,a,d,/,e,?]? y

Saved working directory and index state WIP on master: 1b65b17 added the index file
----

==== Crear una branca des d'un stash

Si guardes alguns canvis, els deixes allà per una estona i continues a la branca des de la qual vas guardar el treball, podries tenir un problema en tornar a aplicar el treball. Si l'intent d'aplicar intenta modificar un fitxer que has modificat des de llavors, obtindràs un conflicte de fusió i hauries de intentar resoldre'l. Si vols una manera més fàcil de provar els canvis guardats de nou, pots executar `git stash branch <nova_branca>`, que crea una nova branca per a tu amb el nom de branca seleccionat, revisa el commit en el qual estaves quan vas guardar el teu treball, torna a aplicar el teu treball allà i després elimina el stash si s'aplica amb èxit:

[source,console]
----
$ git stash branch testchanges
M index.html
M lib/simplegit.rb
Switched to a new branch 'testchanges'
On branch testchanges
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

 modified: index.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

 modified: lib/simplegit.rb

Dropped refs/stash@{0} (29d385a81d163dfd45a452a2ce816487a6b8b014)
----

Això és un bon atall per recuperar el treball guardat fàcilment i treballar-hi en una nova branca.

[[_git_clean]]
==== Netejar el vostre directori de treball

Finalment, és possible que no vulgueu guardar alguns treballs o fitxers al vostre directori de treball, sinó simplement desfer-vos-en; per a això és la comanda `git clean`.

Algunes raons comunes per netejar el vostre directori de treball podrien ser eliminar fitxers innecessaris que han estat generats per fusions o eines externes, o eliminar artefactes de construcció per executar una construcció neta.

Hauríeu de ser bastant cuidadosos amb aquesta comanda, ja que està dissenyada per eliminar fitxers del vostre directori de treball que no estan rastreados. Si canvieu d'opinió, sovint no hi ha manera de recuperar el contingut d'aquells fitxers. Una opció més segura és executar `git stash --all` per eliminar tot però guardar-ho en un stash.

Suposant que realment voleu eliminar fitxers innecessaris o netejar el vostre directori de treball, podeu fer-ho amb `git clean`. Per eliminar tots els fitxers no rastreados al vostre directori de treball, podeu executar `git clean -f -d`, que elimina qualsevol fitxer i també qualsevol subdirectori que es quedi buit com a resultat. El `-f` significa 'forçar' o "realment feu això", i és requerit si la variable de configuració de Git `clean.requireForce` no està explícitament establerta a fals.

Si alguna vegada voleu veure què faria, podeu executar la comanda amb l'opció `--dry-run` (o `-n`), que significa "feu una prova i digueu-me què _hauríeu_ eliminat".

[source,console]
----
$ git clean -d -n
Would remove test.o
Would remove tmp/
----

Per defecte, la comanda `git clean` només eliminarà fitxers no rastreados que no estan ignorats. Qualsevol fitxer que coincideixi amb un patró al vostre `.gitignore` o altres fitxers d'ignorar no serà eliminat. Si també voleu eliminar aquests fitxers, com per eliminar tots els fitxers `.o` generats des d'una construcció perquè pugueu fer una construcció completament neta, podeu afegir un `-x` a la comanda `clean`.

[source,console]
----
$ git status -s
 M lib/simplegit.rb
?? build.TMP
?? tmp/

$ git clean -n -d
Would remove build.TMP
Would remove tmp/

$ git clean -n -d -x
Would remove build.TMP
Would remove test.o
Would remove tmp/
----

Si no sabeu què farà la comanda `git clean`, sempre executeu-la amb un `-n` primer per verificar dues vegades abans de canviar el `-n` per un `-f` i fer-ho de debò. L'altra manera en què podeu ser cuidadosos amb el procés és executar-lo amb la bandera `-i` o "interactiu".

Això executarà la comanda `clean` en un mode interactiu.

[source,console]
----
$ git clean -x -i
Would remove the following items:
  build.TMP  test.o
*** Commands ***
    1: clean                2: filter by pattern    3: select by numbers    4: ask each             5: quit
    6: help
What now>
----

D'aquesta manera podeu passar per cada fitxer individualment o especificar patrons per a l'eliminació de manera interactiva.

[NOTE]
====
Hi ha una situació peculiar en la qual podríeu necessitar ser especialment insistents en demanar a Git que netegi el vostre directori de treball. Si us trobeu en un directori de treball sota el qual heu copiat o clonat altres repositoris Git (potser com a submòduls), fins i tot `git clean -fd` es negarà a eliminar aquests directoris. En casos com aquest, necessiteu afegir una segona opció `-f` per a enfatitzar.
====
