=== Graphical Interfaces

(((GUIs)))(((Eines gràfiques)))
L'entorn natiu de Git és al terminal.
Les noves característiques apareixen allà primer, i només a la línia de comandes està tot el poder de Git completament a la vostra disposició.
Però el text pla no és la millor opció per a totes les tasques; de vegades una representació visual és el que necessiteu, i alguns usuaris estan molt més còmodes amb una interfície de punter i clic.

És important tenir en compte que diferents interfícies estan dissenyades per a diferents fluxos de treball.
Alguns clients exposen només un subconjunt curat de la funcionalitat de Git, per donar suport a una manera específica de treballar que l'autor considera efectiva.
Quan es veuen en aquesta llum, cap d'aquestes eines pot ser anomenada "`millor`" que qualsevol altra, simplement són més adequades per al seu propòsit previst.
També cal tenir en compte que no hi ha res que aquests clients gràfics puguin fer que el client de línia de comandes no pugui; la línia de comandes encara és on tindreu més poder i control en treballar amb els vostres repositoris.

==== `gitk` and `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
Quan installeu Git, també obteniu les seves eines visuals, `gitk` i `git-gui`.

`gitk` és un visualitzador gràfic d'historial.
Penseu-hi com una potent shell GUI sobre `git log` i `git grep`.
Aquesta és l'eina a utilitzar quan esteu intentant trobar alguna cosa que va passar en el passat, o visualitzar l'historial del vostre projecte.

Gitk és més fàcil d'invocar des de la línia de comandes.
Simplement `cd` en un repositori Git, i escriviu:

[source,console]
----
$ gitk [git log options]
----

Gitk accepta moltes opcions de línia de comandes, la majoria de les quals es passen a l'acció subjacent `git log`.
Probablement una de les més útils és l'opció `--all`, que diu a `gitk` que mostri els commits accessibles des de qualsevol referència, no només HEAD.
La interfície de Gitk sembla així:

.The `gitk` history viewer
image::images/gitk.png[The `gitk` history viewer]

A dalt hi ha alguna cosa que sembla una mica com la sortida de `git log --graph`; cada punt representa un commit, les línies representen relacions de pare, i les referències es mostren com a caixes de colors.
El punt groc representa HEAD, i el punt vermell representa canvis que encara no són un commit.
A baix hi ha una vista del commit seleccionat; els comentaris i el patch a l'esquerra, i una vista de resum a la dreta.
Al mig hi ha una col·lecció de controls utilitzats per buscar a l'historial.

`git-gui`, d'altra banda, és principalment una eina per crear commits.
També és més fàcil d'invocar des de la línia de comandes:

[source,console]
----
$ git gui
----

I sembla una mica així:

.The `git-gui` commit tool
image::images/git-gui.png[The `git-gui` commit tool]

A l'esquerra hi ha l'índex; els canvis no preparats estan a dalt, els canvis preparats a baix.
Podeu moure fitxers sencers entre els dos estats fent clic a les seves icones, o podeu seleccionar un fitxer per veure'l fent clic al seu nom.

A la part superior dreta hi ha la vista de dif, que mostra els canvis per al fitxer seleccionat actualment.
Podeu preparar trossos individuals (o línies individuals) fent clic dret en aquesta àrea.

A la part inferior dreta hi ha l'àrea de missatge i acció.
Escriviu el vostre missatge a la caixa de text i feu clic a "`Commit`" per fer alguna cosa similar a `git commit`.
També podeu triar d'esmenar l'últim commit triant l'opció de ràdio "`Amend`", que actualitzarà l'àrea "`Staged Changes`" amb el contingut de l'últim commit.
Llavors podeu simplement preparar o desfer la preparació d'alguns canvis, alterar el missatge del commit, i fer clic a "`Commit`" de nou per reemplaçar l'antic commit amb un de nou.

`gitk` i `git-gui` són exemples d'eines orientades a tasques.
Cada una d'elles està dissenyada per a un propòsit específic (visualitzar l'historial i crear commits, respectivament), i ometen les característiques no necessàries per a aquesta tasca.

==== GitHub for macOS and Windows

(((GitHub for macOS)))(((GitHub for Windows)))
GitHub ha creat dos clients de Git orientats al flux de treball: un per a Windows, i un altre per a macOS.
Aquests clients són un bon exemple d'eines orientades al flux de treball: en lloc d'exposar tota la funcionalitat de Git, es centren en un conjunt curat de característiques d'ús comú que funcionen bé juntes.
S'assemblen a això:

.GitHub for macOS
image::images/github_mac.png[GitHub for macOS]

.GitHub for Windows
image::images/github_win.png[GitHub for Windows]

Estan dissenyats per semblar i funcionar molt semblants, així que els tractarem com un sol producte en aquest capítol.
No farem un repàs detallat d'aquestes eines (tenen la seva pròpia documentació), però un ràpid recorregut per la vista de "`canvis`" (on passareu la majoria del vostre temps) està en ordre.

* A l'esquerra hi ha la llista de repositoris que el client està seguint; podeu afegir un repositori (ja sigui clonant o adjuntant localment) fent clic a la icona "`+`" a la part superior d'aquesta àrea.
* Al centre hi ha una àrea d'entrada de commit, que us permet introduir un missatge de commit, i seleccionar quins fitxers s'han d'incloure.
  A Windows, l'historial de commits es mostra directament sota això; a macOS, està en una pestanya separada.
* A la dreta hi ha una vista de dif, que mostra el que ha canviat al vostre directori de treball, o quins canvis es van incloure al commit seleccionat.
* L'última cosa a tenir en compte és el botó "`Sync`" a la part superior dreta, que és la manera principal d'interactuar a través de la xarxa.

[NOTE]
====
No necessiteu un compte de GitHub per utilitzar aquestes eines.
Tot i que estan dissenyades per destacar el servei de GitHub i el flux de treball recomanat, funcionaran feliçment amb qualsevol repositori, i faran operacions de xarxa amb qualsevol host de Git.
====

===== Installation

GitHub per a Windows i macOS es pot descarregar des de https://desktop.github.com/[^].
Quan les aplicacions s'executen per primera vegada, us guien a través de tota la configuració inicial de Git, com configurar el vostre nom i adreça de correu electrònic, i tots dos configureu valors per defecte sans per a moltes opcions de configuració comunes, com ara les memòries cau de credencials i el comportament de CRLF.

Tots dos són "`evergreen`" – les actualitzacions es descarreguen i s'instal·len en segon pla mentre les aplicacions estan obertes.
Això inclou útilment una versió empaquetada de Git, cosa que significa que probablement no haureu de preocupar-vos per actualitzar-la manualment de nou.
A Windows, el client inclou una drecera per llançar PowerShell amb Posh-git, del qual parlarem més endavant en aquest capítol.

El següent pas és donar a l'eina alguns repositoris amb els quals treballar.
El client us mostra una llista dels repositoris als quals teniu accés a GitHub, i els pot clonar en un pas.
Si ja teniu un repositori local, simplement arrossegueu el seu directori des del Finder o l'Explorador de Windows a la finestra del client de GitHub, i s'inclourà a la llista de repositoris a l'esquerra.

===== Recommended Workflow

Un cop està instal·lat i configurat, podeu utilitzar el client de GitHub per a moltes tasques comunes de Git.
El flux de treball previst per a aquesta eina de vegades s'anomena "`GitHub Flow.`"
Ho cobrim amb més detall a <<ch06-github#ch06-github_flow>>, però l'essència general és que (a) esteu confirmant en una branca, i (b) esteu sincronitzant amb un repositori remot bastant regularment.

La gestió de branques és una de les àrees on les dues eines divergeixen.
A macOS, hi ha un botó a la part superior de la finestra per crear una nova branca:

."`Create Branch`" button on macOS
image::images/branch_widget_mac.png[“Create Branch” button on macOS]

A Windows, això es fa escrivint el nom de la nova branca al widget de canvi de branca:

.Creating a branch on Windows
image::images/branch_widget_win.png[Creating a branch on Windows]

Un cop la vostra branca està creada, fer nous commits és bastant senzill.
Feu alguns canvis al vostre directori de treball, i quan canvieu a la finestra del client de GitHub, us mostrarà quins fitxers han canviat.
Introduïu un missatge de commit, seleccioneu els fitxers que voleu incloure, i feu clic al botó "`Commit`" (ctrl-enter o ⌘-enter).

La manera principal d'interactuar amb altres repositoris a través de la xarxa és mitjançant la característica "`Sync`".
Git internament té operacions separades per a enviar, obtenir, fusionar i rebasejar, però els clients de GitHub col·lapsen totes aquestes en una característica de diversos passos.
Això és el que passa quan feu clic al botó Sync:

. `git pull --rebase`.
  Si això falla a causa d'un conflicte de fusió, torna a `git pull --no-rebase`.
. `git push`.

Aquesta és la seqüència més comuna d'operacions de xarxa quan es treballa d'aquesta manera, així que comprimir-les en una sola comanda estalvia molt de temps.

===== Summary

Aquestes eines estan molt ben adaptades per al flux de treball per al qual estan dissenyades.
Desenvolupadors i no desenvolupadors poden estar col·laborant en un projecte en qüestió de minuts, i moltes de les millors pràctiques per a aquest tipus de flux de treball estan integrades a les eines.
No obstant això, si el vostre flux de treball és diferent, o voleu més control sobre com i quan es fan les operacions de xarxa, us recomanem que utilitzeu un altre client o la línia de comandes.

==== Other GUIs

Hi ha una sèrie d'altres clients gràfics de Git, i van des d'eines especialitzades i de propòsit únic fins a aplicacions que intenten exposar tot el que Git pot fer.
El lloc web oficial de Git té una llista curada dels clients més populars a https://git-scm.com/downloads/guis[^].
Una llista més completa està disponible al lloc wiki de Git, a https://archive.kernel.org/oldwiki/git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools.html#Graphical_Interfaces[^].
