[[_objects]]
=== Objectes Git

Git és un sistema de fitxers adreçable per contingut. Genial. Què significa això? Significa que al nucli de Git hi ha un simple magatzem de dades clau-valor. Això significa que podeu inserir qualsevol tipus de contingut en un repositori Git, pel qual Git us retornarà una clau única que podeu utilitzar posteriorment per recuperar aquest contingut.

Com a demostració, veurem la comanda de fontaneria `git hash-object`, que pren algunes dades, les emmagatzema al vostre directori `.git/objects` (la base de dades d'objectes) i us retorna la clau única que ara es refereix a aquest objecte de dades.

Primer, inicialitzeu un nou repositori Git i verifiqueu que (com era de preveure) no hi ha res al directori `objects`:

[source,console]
----
$ git init test
Initialized empty Git repository in /tmp/test/.git/
$ cd test
$ find .git/objects
.git/objects
.git/objects/info
.git/objects/pack
$ find .git/objects -type f
----

Git ha inicialitzat el directori `objects` i ha creat els subdirectoris `pack` i `info` dins d'ell, però no hi ha fitxers regulars. Ara, utilitzem `git hash-object` per crear un nou objecte de dades i emmagatzemar-lo manualment a la vostra nova base de dades Git:

[source,console]
----
$ echo 'test content' | git hash-object -w --stdin
d670460b4b4aece5915caf5c68d12f560a9fe3e4
----

En la seva forma més simple, `git hash-object` prendria el contingut que li heu lliurat i simplement retornaria la clau única que s'utilitzaria per emmagatzemar-lo a la vostra base de dades Git. L'opció `-w` llavors indica a la comanda que no simplement retorni la clau, sinó que escrigui aquest objecte a la base de dades. Finalment, l'opció `--stdin` indica a `git hash-object` que obtingui el contingut a processar des de stdin; d'una altra manera, la comanda esperaria un argument de nom de fitxer al final de la comanda que contingui el contingut a utilitzar.

La sortida de la comanda anterior és un hash de resum de 40 caràcters. Aquest és el hash SHA-1: un resum del contingut que esteu emmagatzemant més una capçalera, de la qual en parlarem una mica més endavant. Ara podeu veure com Git ha emmagatzemat les vostres dades:

[source,console]
----
$ find .git/objects -type f
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
----

Si examineu de nou el vostre directori `objects`, podeu veure que ara conté un fitxer per a aquest nou contingut. Aquesta és la manera com Git emmagatzema inicialment el contingut: com un fitxer únic per cada peça de contingut, anomenat amb el resum SHA-1 del contingut i la seva capçalera. El subdirectori està anomenat amb els dos primers caràcters del SHA-1, i el nom del fitxer són els 38 caràcters restants.

Un cop tingueu contingut a la vostra base de dades d'objectes, podeu examinar aquest contingut amb la comanda `git cat-file`. Aquesta comanda és una mena de navalla suïssa per inspeccionar objectes Git. Passar `-p` a `cat-file` instruïa la comanda a determinar primer el tipus de contingut i després mostrar-lo de manera adequada:

[source,console]
----
$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
test content
----

Ara, podeu afegir contingut a Git i recuperar-lo de nou. També podeu fer això amb contingut en fitxers. Per exemple, podeu fer un control de versions simple en un fitxer. Primer, creeu un nou fitxer i deseu el seu contingut a la vostra base de dades:

[source,console]
----
$ echo 'version 1' > test.txt
$ git hash-object -w test.txt
83baae61804e65cc73a7201a7252750c76066a30
----

Llavors, escriviu algun contingut nou al fitxer i deseu-lo de nou:

[source,console]
----
$ echo 'version 2' > test.txt
$ git hash-object -w test.txt
1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
----

La vostra base de dades d'objectes ara conté totes dues versions d'aquest nou fitxer (a més del primer contingut que hi vau emmagatzemar):

[source,console]
----
$ find .git/objects -type f
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
----

En aquest punt, podeu eliminar la vostra còpia local d'aquest fitxer `test.txt` i després utilitzar Git per recuperar, des de la base de dades d'objectes, ja sigui la primera versió que vau desar:

[source,console]
----
$ git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 > test.txt
$ cat test.txt
version 1
----

o la segona versió:

[source,console]
----
$ git cat-file -p 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a > test.txt
$ cat test.txt
version 2
----

Però recordar la clau SHA-1 per a cada versió del vostre fitxer no és pràctic; a més, no esteu emmagatzemant el nom del fitxer al vostre sistema, només el contingut. Aquest tipus d'objecte s'anomena un blob. Podeu fer que Git us digui el tipus d'objecte de qualsevol objecte a Git, donat el seu SHA-1, amb `git cat-file -t`:

[source,console]
----
$ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
blob
----

[[_tree_objects]]
==== Objectes Arbre

El següent tipus d'objecte Git que examinarem és l'arbre, que resol el problema d'emmagatzemar el nom del fitxer i també us permet emmagatzemar un grup de fitxers junts. Git emmagatzema el contingut d'una manera similar a un sistema de fitxers UNIX, però una mica simplificat. Tot el contingut s'emmagatzema com a objectes arbre i blob, amb els arbres que corresponen a les entrades del directori UNIX i els blobs que corresponen més o menys als inodes o continguts dels fitxers. Un únic objecte arbre conté una o més entrades, cadascuna de les quals és el hash SHA-1 d'un blob o subarbre amb el seu mode, tipus i nom de fitxer associats. Per exemple, suposem que teniu un projecte on l'arbre més recent sembla alguna cosa com això:

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob a906cb2a4a904a152e80877d4088654daad0c859 README
100644 blob 8f94139338f9404f26296befa88755fc2598c289 Rakefile
040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0 lib
----

La sintaxi `master^{tree}` especifica l'objecte arbre al qual apunta l'última confirmació a la vostra branca `master`. Observeu que el subdirectori `lib` no és un blob sinó un punter a un altre arbre:

[source,console]
----
$ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0
100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b simplegit.rb
----

[NOTE]
====
Segons la shell que utilitzeu, podeu trobar errors en utilitzar la sintaxi `master^{tree}`.

A CMD a Windows, el caràcter `^` s'utilitza per a l'escapament, així que heu de doblar-lo per evitar això: `git cat-file -p master^^{tree}`. En utilitzar PowerShell, els paràmetres que utilitzen caràcters `{}` han de ser entre cometes per evitar que el paràmetre es parsegi incorrectament: `git cat-file -p 'master^{tree}'`.

Si esteu utilitzant ZSH, el caràcter `^` s'utilitza per a la coincidència de patrons, així que heu d'envoltar tota l'expressió entre cometes: `git cat-file -p "master^{tree}"`.
====

Conceptualment, les dades que Git està emmagatzemant semblen alguna cosa com això:

.Simple version of the Git data model
image::images/data-model-1.png[Simple version of the Git data model]

Podeu crear fàcilment el vostre propi arbre. Git normalment crea un arbre prenent l'estat de la vostra àrea d'ensamblatge o índex i escrivint una sèrie d'objectes arbre a partir d'ell. Així que, per crear un objecte arbre, primer heu de configurar un índex indexant alguns fitxers. Per crear un índex amb una única entrada: la primera versió del vostre fitxer `test.txt`, podeu utilitzar la comanda de fontaneria `git update-index`. Utilitzeu aquesta comanda per afegir artificialment la versió anterior del fitxer `test.txt` a una nova àrea d'ensamblatge. Heu de passar-li l'opció `--add` perquè el fitxer encara no existeix a la vostra àrea d'ensamblatge (encara no teniu configurada cap àrea d'ensamblatge) i `--cacheinfo` perquè el fitxer que esteu afegint no està al vostre directori sinó a la vostra base de dades. Llavors, especifiqueu el mode, SHA-1 i nom de fitxer:

[source,console]
----
$ git update-index --add --cacheinfo 100644 83baae61804e65cc73a7201a7252750c76066a30 test.txt
----

En aquest cas, esteu especificant un mode de `100644`, que significa que és un fitxer normal. Altres opcions són `100755`, que significa que és un fitxer executable; i `120000`, que especifica un enllaç simbòlic. El mode es pren dels modes UNIX normals però és molt menys flexible: aquests tres modes són els únics que són vàlids per a fitxers (blobs) a Git (tot i que altres modes s'utilitzen per a directoris i submòduls).

Ara, podeu utilitzar `git write-tree` per escriure l'àrea d'ensamblatge en un objecte arbre. No es necessita l'opció `-w`: trucar a aquesta comanda crea automàticament un objecte arbre a partir de l'estat de l'índex si aquest arbre encara no existeix:

[source,console]
----
$ git write-tree
d8329fc1cc938780ffdd9f94e0d364e0ea74f579
$ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579
100644 blob 83baae61804e65cc73a7201a7252750c76066a30 test.txt
----

També podeu verificar que això és un objecte arbre utilitzant la mateixa comanda `git cat-file` que vau veure abans:

[source,console]
----
$ git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579
tree
----

Ara creareu un nou arbre amb la segona versió de `test.txt` i un nou fitxer també:

[source,console]
----
$ echo 'new file' > new.txt
$ git update-index --cacheinfo 100644 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt
$ git update-index --add new.txt
----

La vostra àrea d'ensamblatge ara té la nova versió de `test.txt` així com el nou fitxer `new.txt`. Escriviu aquest arbre (registrant l'estat de l'àrea d'ensamblatge o índex en un objecte arbre) i vegeu com es veu:

[source,console]
----
$ git write-tree
0155eb4229851634a0f03eb265b69f5a2d56f341
$ git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341
100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt
100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt
----

Observeu que aquest arbre té totes dues entrades de fitxer i també que el SHA-1 de `test.txt` és el SHA-1 de la "versió 2" anterior (`1f7a7a`). Només per diversió, afegireu el primer arbre com a subdirectori en aquest. Podeu llegir arbres a la vostra àrea d'ensamblatge trucant a `git read-tree`. En aquest cas, podeu llegir un arbre existent a la vostra àrea d'ensamblatge com a subarbre utilitzant l'opció `--prefix` amb aquesta comanda:

[source,console]
----
$ git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579
$ git write-tree
3c4e9cd789d88d8d89c1073707c3585e41b0e614
$ git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614
040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579 bak
100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt
100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt
----

Si haguéssiu creat un directori de treball a partir del nou arbre que acabeu d'escriure, obtindríeu els dos fitxers al nivell superior del directori de treball i un subdirectori anomenat `bak` que contindria la primera versió del fitxer `test.txt`. Podeu pensar en les dades que Git conté per a aquestes estructures com alguna cosa així:

.The content structure of your current Git data
image::images/data-model-2.png[The content structure of your current Git data]

[[_git_commit_objects]]
==== Objectes de Confirmació

Si heu fet tot l'anterior, ara teniu tres arbres que representen les diferents instantànies del vostre projecte que voleu seguir, però el problema anterior persisteix: heu de recordar els tres valors SHA-1 per recordar les instantànies. Tampoc teniu cap informació sobre qui va desar les instantànies, quan es van desar o per què es van desar. Aquesta és la informació bàsica que l'objecte de confirmació emmagatzema per a vosaltres.

Per crear un objecte de confirmació, truqueu a `commit-tree` i especifiqueu un únic SHA-1 d'arbre i quins objectes de confirmació, si n'hi ha, el van precedir directament. Comenceu amb el primer arbre que vau escriure:

[source,console]
----
$ echo 'First commit' | git commit-tree d8329f
fdf4fc3344e67ab068f836878b6c4951e3b15f3d
----

[NOTE]
====
Obtindreu un valor de hash diferent a causa de la diferent hora de creació i dades de l'autor. A més, tot i que en principi qualsevol objecte de confirmació es pot reproduir amb precisió donades aquestes dades, els detalls històrics de la construcció d'aquest llibre signifiquen que els hashes de confirmació impresos poden no correspondre's amb les confirmacions donades. Substituïu els hashes de confirmació i etiqueta amb els vostres propis resum de verificació més endavant en aquest capítol.
====

Ara podeu veure el vostre nou objecte de confirmació amb `git cat-file`:

[source,console]
----
$ git cat-file -p fdf4fc3
tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579
author Scott Chacon <schacon@gmail.com> 1243040974 -0700
committer Scott Chacon <schacon@gmail.com> 1243040974 -0700

First commit
----

El format per a un objecte de confirmació és simple: especifica l'arbre de nivell superior per a l'instantània del projecte en aquell moment; les confirmacions pare si n'hi ha (l'objecte de confirmació descrit anteriorment no té pares); la informació d'autor/confirmador (que utilitza la vostra configuració `user.name` i `user.email` i una marca de temps); una línia en blanc, i després el missatge de confirmació.

A continuació, escrivireu els altres dos objectes de confirmació, cadascun referint-se a la confirmació que va venir directament abans:

[source,console]
----
$ echo 'Second commit' | git commit-tree 0155eb -p fdf4fc3
cac0cab538b970a37ea1e769cbbde608743bc96d
$ echo 'Third commit' | git commit-tree 3c4e9c -p cac0cab
1a410efbd13591db07496601ebc7a059dd55cfe9
----

Cadascun dels tres objectes de confirmació apunta a un dels tres arbres d'instantànies que vau crear. Curiosament, ara teniu una història real de Git que podeu veure amb la comanda `git log`, si l'executeu a l'últim SHA-1 de confirmació:

[source,console]
----
$ git log --stat 1a410e
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Author: Scott Chacon <schacon@gmail.com>
Date: Fri May 22 18:15:24 2009 -0700

Third commit

bak/test.txt | 1 +
1 file changed, 1 insertion(+)

commit cac0cab538b970a37ea1e769cbbde608743bc96d
Author: Scott Chacon <schacon@gmail.com>
Date: Fri May 22 18:14:29 2009 -0700

Second commit

new.txt | 1 +
test.txt | 2 +-
2 files changed, 2 insertions(+), 1 deletion(-)

commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d
Author: Scott Chacon <schacon@gmail.com>
Date: Fri May 22 18:09:34 2009 -0700

First commit

test.txt | 1 +
1 file changed, 1 insertion(+)
----

Increïble. Acabeu de fer les operacions de baix nivell per construir una història de Git sense utilitzar cap de les comandes front-end. Això és essencialment el que fa Git quan executeu les comandes `git add` i `git commit`: emmagatzema blobs per als fitxers que han canviat, actualitza l'índex, escriu arbres i escriu objectes de confirmació que referencien els arbres de nivell superior i les confirmacions que van venir immediatament abans d'ells. Aquests tres objectes principals de Git: el blob, l'arbre i la confirmació, s'emmagatzemen inicialment com a fitxers separats al vostre directori `.git/objects`. Aquí teniu tots els objectes al directori d'exemple ara, comentats amb el que emmagatzemen:

[source,console]
----
$ find .git/objects -type f
.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1
----

Si seguiu tots els punters interns, obteniu un gràfic d'objectes com aquest:

.All the reachable objects in your Git directory
image::images/data-model-3.png[All the reachable objects in your Git directory]

==== Emmagatzematge d'Objectes

Vam esmentar abans que hi ha una capçalera emmagatzemada amb cada objecte que confirmeu a la vostra base de dades d'objectes Git. Dediquem un minut a veure com Git emmagatzema els seus objectes. Veurem com emmagatzemar un objecte blob, en aquest cas, la cadena "`what is up, doc?`", de manera interactiva en el llenguatge de script Ruby.

Podeu iniciar el mode interactiu de Ruby amb la comanda `irb`:

[source,console]
----
$ irb
>> content = "what is up, doc?"
=> "what is up, doc?"
----

Git primer construeix una capçalera que comença identificant el tipus d'objecte, en aquest cas, un blob. A aquesta primera part de la capçalera, Git afegeix un espai seguit de la mida en bytes del contingut, i afegeix un byte nul final:

[source,console]
----
>> header = "blob #{content.bytesize}\0"
=> "blob 16\u0000"
----

Git concatena la capçalera i el contingut original i després calcula el resum SHA-1 d'aquest nou contingut. Podeu calcular el valor SHA-1 d'una cadena a Ruby incloent la biblioteca de resum SHA1 amb la comanda `require` i després trucant a `Digest::SHA1.hexdigest()` amb la cadena:

[source,console]
----
>> store = header + content
=> "blob 16\u0000what is up, doc?"
>> require 'digest/sha1'
=> true
>> sha1 = Digest::SHA1.hexdigest(store)
=> "bd9dbf5aae1a3862dd1526723246b20206e5fc37"
----

Comparem això amb la sortida de `git hash-object`. Aquí utilitzem `echo -n` per evitar afegir un salt de línia a l'entrada.

[source,console]
----
$ echo -n "what is up, doc?" | git hash-object --stdin
bd9dbf5aae1a3862dd1526723246b20206e5fc37
----

Git comprimeix el nou contingut amb zlib, que podeu fer a Ruby amb la biblioteca zlib. Primer, heu de requerir la biblioteca i després executar `Zlib::Deflate.deflate()` al contingut:

[source,console]
----
>> require 'zlib'
=> true
>> zlib_content = Zlib::Deflate.deflate(store)
=> "x\x9CK\xCA\xC9OR04c(\xCFH,Q\xC8,V(-\xD0QH\xC9O\xB6\a\x00_\x1C\a\x9D"
----

Finalment, escrivireu el vostre contingut desinflat amb zlib a un objecte al disc. Heu de determinar la ruta de l'objecte que voleu escriure (els dos primers caràcters del valor SHA-1 són el nom del subdirectori, i els últims 38 caràcters són el nom del fitxer dins d'aquest directori). A Ruby, podeu utilitzar la funció `FileUtils.mkdir_p()` per crear el subdirectori si no existeix. Llavors, obriu el fitxer amb `File.open()` i escriviu el contingut prèviament comprimit amb zlib al fitxer amb una trucada `write()` al gestor de fitxer resultant:

[source,console]
----
>> path = '.git/objects/' + sha1[0,2] + '/' + sha1[2,38]
=> ".git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37"
>> require 'fileutils'
=> true
>> FileUtils.mkdir_p(File.dirname(path))
=> ".git/objects/bd"
>> File.open(path, 'w') { |f| f.write zlib_content }
=> 32
----

Comprovem el contingut de l'objecte utilitzant `git cat-file`:

[source,console]
---
$ git cat-file -p bd9dbf5aae1a3862dd1526723246b20206e5fc37
what is up, doc?
---

Això és tot: heu creat un objecte blob de Git vàlid.

Tots els objectes Git s'emmagatzemen de la mateixa manera, només amb diferents tipus: en lloc de la cadena blob, la capçalera començarà amb commit o tree. A més, tot i que el contingut del blob pot ser gairebé qualsevol cosa, el contingut de commit i tree està molt específicament formatat.
