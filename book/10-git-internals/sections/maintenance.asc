=== Manteniment i Recuperació de Dades

De vegades, potser heu de fer alguna neteja: fer un repositori més compacte, netejar un repositori importat o recuperar treball perdut. Aquesta secció cobrirà alguns d'aquests escenaris.

[[_git_gc]]
==== Manteniment

De vegades, Git executa automàticament una comanda anomenada "`auto gc`". La majoria de les vegades, aquesta comanda no fa res. No obstant això, si hi ha massa objectes solts (objectes no en un packfile) o massa packfiles, Git llança una comanda `git gc` completa. El "`gc`" significa recollida de brossa, i la comanda fa diverses coses: recull tots els objectes solts i els col·loca en packfiles, consolida els packfiles en un gran packfile i elimina els objectes que no són accessibles des de cap confirmació i tenen alguns mesos d'antiguitat.

Podeu executar `auto gc` manualment de la següent manera:

[source,console]
----
$ git gc --auto
----

Un cop més, això generalment no fa res. Heu de tenir uns 7.000 objectes solts o més de 50 packfiles perquè Git iniciï una comanda `gc` real. Podeu modificar aquests límits amb els paràmetres de configuració `gc.auto` i `gc.autopacklimit`, respectivament.

L'altra cosa que farà `gc` és empaquetar les vostres referències en un sol fitxer. Suposem que el vostre repositori conté les següents branques i etiquetes:

[source,console]
----
$ find .git/refs -type f
.git/refs/heads/experiment
.git/refs/heads/master
.git/refs/tags/v1.0
.git/refs/tags/v1.1
----

Si executeu `git gc`, ja no tindreu aquests fitxers al directori `refs`. Git els mourà per raons d'eficiència a un fitxer anomenat `.git/packed-refs` que semblarà així:

[source,console]
----
$ cat .git/packed-refs
# pack-refs with: peeled fully-peeled
cac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment
ab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master
cac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0
9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1
^1a410efbd13591db07496601ebc7a059dd55cfe9
----

Si actualitzeu una referència, Git no edita aquest fitxer sinó que escriu un nou fitxer a `refs/heads`. Per obtenir el SHA-1 adequat per a una referència donada, Git busca aquesta referència al directori `refs` i després busca al fitxer `packed-refs` com a recurs. Així que si no podeu trobar una referència al directori `refs`, probablement està al vostre fitxer `packed-refs`.

Observeu l'última línia del fitxer, que comença amb un `^`. Això significa que l'etiqueta just a sobre és una etiqueta anotada i aquesta línia és la confirmació a la qual apunta l'etiqueta anotada.

[[_data_recovery]]
==== Recuperació de Dades

En algun moment del vostre viatge amb Git, podríeu perdre accidentalment una confirmació. Generalment, això passa perquè forceu l'eliminació d'una branca que tenia treball, i resulta que volíeu la branca després de tot; o feu un reinici dur d'una branca, abandonant així confirmacions de les quals volíeu alguna cosa. Suposant que això passi, com podeu recuperar les vostres confirmacions?

Aquí teniu un exemple que fa un reinici dur de la branca `master` al vostre repositori de prova a una confirmació més antiga i després recupera les confirmacions perdudes. Primer, revisem on es troba el vostre repositori en aquest moment:

[source,console]
----
$ git log --pretty=oneline
ab1afef80fac8e34258ff41fc1b867c702daa24b Modify repo.rb a bit
484a59275031909e19aadb7c92262719cfcdf19a Create repo.rb
1a410efbd13591db07496601ebc7a059dd55cfe9 Third commit
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit
----

Ara, mou la branca `master` a la confirmació del mig:

[source,console]
----
$ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9
HEAD is now at 1a410ef Third commit
$ git log --pretty=oneline
1a410efbd13591db07496601ebc7a059dd55cfe9 Third commit
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit
----

Heu perdut efectivament les dues confirmacions superiors: no teniu cap branca des de la qual aquestes confirmacions siguin accessibles. Heu de trobar l'última confirmació SHA-1 i després afegir una branca que apunti a ella. El truc és trobar aquesta última confirmació SHA-1: no és que l'hàgiu memoritzada, oi?

Sovint, la manera més ràpida és utilitzar una eina anomenada `git reflog`. A mesura que esteu treballant, Git registra en silenci quina és la vostra capçalera cada cop que la canvieu. Cada cop que confirmeu o canvieu de branca, el reflog s'actualitza. El reflog també s'actualitza amb la comanda `git update-ref`, que és una altra raó per utilitzar-la en lloc d'escriure simplement el valor SHA-1 als vostres fitxers de referència, com vam cobrir a <<ch10-git-internals#_git_refs>>. Podeu veure on heu estat en qualsevol moment executant `git reflog`:

[source,console]
----
$ git reflog
1a410ef HEAD@{0}: reset: moving to 1a410ef
ab1afef HEAD@{1}: commit: Modify repo.rb a bit
484a592 HEAD@{2}: commit: Create repo.rb
----

Aquí podem veure les dues confirmacions que hem tingut, però no hi ha molta informació aquí. Per veure la mateixa informació d'una manera molt més útil, podem executar `git log -g`, que us donarà una sortida de registre normal per al vostre reflog.

[source,console]
----
$ git log -g
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Reflog: HEAD@{0} (Scott Chacon <schacon@gmail.com>)
Reflog message: updating HEAD
Author: Scott Chacon <schacon@gmail.com>
Date: Fri May 22 18:22:37 2009 -0700

Third commit

commit ab1afef80fac8e34258ff41fc1b867c702daa24b
Reflog: HEAD@{1} (Scott Chacon <schacon@gmail.com>)
Reflog message: updating HEAD
Author: Scott Chacon <schacon@gmail.com>
Date: Fri May 22 18:15:24 2009 -0700

Modify repo.rb a bit
----

Sembla que la confirmació inferior és la que heu perdut, així que podeu recuperar-la creant una nova branca en aquesta confirmació. Per exemple, podeu iniciar una branca anomenada `recover-branch` en aquesta confirmació (ab1afef):

[source,console]
----
$ git branch recover-branch ab1afef
$ git log --pretty=oneline recover-branch
ab1afef80fac8e34258ff41fc1b867c702daa24b Modify repo.rb a bit
484a59275031909e19aadb7c92262719cfcdf19a Create repo.rb
1a410efbd13591db07496601ebc7a059dd55cfe9 Third commit
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit
----

Genial: ara teniu una branca anomenada `recover-branch` que està on estava abans la vostra branca `master`, fent que les dues primeres confirmacions siguin accessibles de nou. A continuació, suposem que la vostra pèrdua per alguna raó no estava al reflog: podeu simular això eliminant `recover-branch` i esborrant el reflog. Ara les dues primeres confirmacions no són accessibles per res:

[source,console]
----
$ git branch -D recover-branch
$ rm -Rf .git/logs/
----

Com que les dades del reflog es mantenen al directori `.git/logs/`, efectivament no teniu cap reflog. Com podeu recuperar aquesta confirmació en aquest punt? Una manera és utilitzar l'utilitat `git fsck`, que comprova la vostra base de dades per a la integritat. Si l'executeu amb l'opció `--full`, us mostra tots els objectes que no estan apuntats per un altre objecte:

[source,console]
----
$ git fsck --full
Checking object directories: 100% (256/256), done.
Checking objects: 100% (18/18), done.
dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4
dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b
dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9
dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293
----

En aquest cas, podeu veure la vostra confirmació perduda després de la cadena "`dangling commit`". Podeu recuperar-la de la mateixa manera, afegint una branca que apunti a aquest SHA-1.

[[_removing_objects]]
==== Eliminació d'Objectes

Hi ha moltes coses bones sobre Git, però una característica que pot causar problemes és el fet que un `git clone` descarrega tota la història del projecte, incloent cada versió de cada fitxer. Això està bé si tot és codi font, perquè Git està altament optimitzat per comprimir aquestes dades de manera eficient. No obstant això, si algú en algun moment de la història del vostre projecte va afegir un fitxer enorme, cada clon per a sempre es veurà obligat a descarregar aquest fitxer gran, fins i tot si es va eliminar del projecte en la següent confirmació. Com que és accessible des de la història, sempre estarà allà.

Això pot ser un gran problema quan esteu convertint repositoris Subversion o Perforce a Git. Com que no descarregueu tota la història en aquests sistemes, aquest tipus d'addició porta poques conseqüències. Si vau fer una importació d'un altre sistema o d'alguna altra manera descobriu que el vostre repositori és molt més gran del que hauria de ser, aquí us explico com podeu trobar i eliminar objectes grans.

*Advertència: aquesta tècnica és destructiva per al vostre historial de confirmacions.* Reescriu cada objecte de confirmació des de l'arbre més antic que heu de modificar per eliminar una referència a un fitxer gran. Si ho feu immediatament després d'una importació, abans que algú comenci a basar el treball en la confirmació, esteu bé; d'una altra manera, heu de notificar a tots els col·laboradors que han de tornar a basar el seu treball en les vostres noves confirmacions.

Per demostrar-ho, afegireu un fitxer gran a l'historial del vostre repositori de prova, l'eliminareu a la següent confirmació, el trobareu i l'eliminareu permanentment del repositori. Primer, afegiu un objecte gran a la vostra història:

[source,console]
----
$ curl -L https://www.kernel.org/pub/software/scm/git/git-2.1.0.tar.gz > git.tgz
$ git add git.tgz
$ git commit -m 'Add git tarball'
[master 7b30847] Add git tarball
1 file changed, 0 insertions(+), 0 deletions(-)
create mode 100644 git.tgz
----

Oops: no volíeu afegir un tarball enorme al vostre projecte. Millor desfer-se'n:

[source,console]
----
$ git rm git.tgz
rm 'git.tgz'
$ git commit -m 'Oops - remove large tarball'
[master dadf725] Oops - remove large tarball
1 file changed, 0 insertions(+), 0 deletions(-)
delete mode 100644 git.tgz
----

Ara, feu `gc` a la vostra base de dades i vegeu quant d'espai esteu utilitzant:

[source,console]
----
$ git gc
Counting objects: 17, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (13/13), done.
Writing objects: 100% (17/17), done.
Total 17 (delta 1), reused 10 (delta 0)
----

Podeu executar la comanda `count-objects` per veure ràpidament quant d'espai esteu utilitzant:

[source,console]
----
$ git count-objects -v
count: 7
size: 32
in-pack: 17
packs: 1
size-pack: 4868
prune-packable: 0
garbage: 0
size-garbage: 0
----

L'entrada `size-pack` és la mida dels vostres packfiles en kilobytes, així que esteu utilitzant gairebé 5MB. Abans de l'última confirmació, esteu utilitzant més a prop de 2K: clarament, eliminar el fitxer de la confirmació anterior no l'ha eliminat de la vostra història. Cada vegada que algú clona aquest repositori, hauran de clonar tots els 5MB només per obtenir aquest projecte minúscul, perquè vau afegir accidentalment un fitxer gran. Desfem-nos-en.

Primer heu de trobar-lo. En aquest cas, ja sabeu quin fitxer és. Però suposem que no ho sabeu: com identificaríeu quin fitxer o fitxers ocupen tant d'espai? Si executeu `git gc`, tots els objectes estan en un packfile; podeu identificar els objectes grans executant una altra comanda de fontaneria anomenada `git verify-pack` i ordenant pel tercer camp de la sortida, que és la mida del fitxer. També podeu canalitzar-lo a través de la comanda `tail` perquè només us interessen els últims pocs fitxers més grans:

[source,console]
----
$ git verify-pack -v .git/objects/pack/pack-29…69.idx | sort -k 3 -n | tail -3
dadf7258d699da2c8d89b09ef6670edb7d5f91b4 commit 229 159 12
033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob 22044 5792 4977696
82c99a3e86bb1267b236a4b6eff7868d97489af1 blob 4975916 4976258 1438
----

L'objecte gran està a la part inferior: 5MB. Per descobrir quin fitxer és, utilitzareu la comanda `rev-list`, que vau utilitzar breument a <<ch08-customizing-git#_enforcing_commit_message_format>>. Si passeu `--objects` a `rev-list`, llista tots els SHA-1 de confirmació i també els SHA-1 de blob amb les rutes de fitxer associades. Podeu utilitzar això per trobar el nom del vostre blob:

[source,console]
----
$ git rev-list --objects --all | grep 82c99a3
82c99a3e86bb1267b236a4b6eff7868d97489af1 git.tgz
----

Ara, heu d'eliminar aquest fitxer de tots els arbres del vostre passat. Podeu veure fàcilment quines confirmacions van modificar aquest fitxer:

[source,console]
----
$ git log --oneline --branches -- git.tgz
dadf725 Oops - remove large tarball
7b30847 Add git tarball
----

Heu de reescriure totes les confirmacions descendents de `7b30847` per eliminar completament aquest fitxer de la vostra història de Git. Per fer-ho, utilizeu `filter-branch`, que vau utilitzar a <<ch07-git-tools#_rewriting_history>>:

[source,console]
----
$ git filter-branch --index-filter 'git rm --ignore-unmatch --cached git.tgz' -- 7b30847^..
Rewrite 7b30847d080183a1ab7d18fb202473b3096e9f34 (1/2)rm 'git.tgz'
Rewrite dadf7258d699da2c8d89b09ef6670edb7d5f91b4 (2/2)
Ref 'refs/heads/master' was rewritten
----

L'opció `--index-filter` és similar a l'opció `--tree-filter` utilitzada a <<ch07-git-tools#_rewriting_history>>, excepte que en lloc de passar una comanda que modifica fitxers desats al disc, esteu modificant la vostra àrea d'ensamblatge o índex cada vegada.

En lloc d'eliminar un fitxer específic amb alguna cosa com `rm file`, heu d'eliminar-lo amb `git rm --cached`: heu d'eliminar-lo de l'índex, no del disc. La raó per fer-ho d'aquesta manera és la velocitat: perquè Git no ha de desar cada revisió al disc abans d'executar el vostre filtre, el procés pot ser molt, molt més ràpid. Podeu aconseguir la mateixa tasca amb `--tree-filter` si voleu. L'opció `--ignore-unmatch` a `git rm` li diu que no doni un error si el patró que esteu intentant eliminar no hi és. Finalment, demaneu a `filter-branch` que reescrigui la vostra història només des de la confirmació `7b30847` cap amunt, perquè sabeu que és on va començar aquest problema. D'una altra manera, començarà des del principi i trigarà innecessàriament més temps.

La vostra història ja no conté una referència a aquest fitxer. No obstant això, el vostre reflog i un nou conjunt de referències que Git va afegir quan vau fer el `filter-branch` sota `.git/refs/original` encara ho fan, així que heu d'eliminar-los i després tornar a empaquetar la base de dades. Heu d'eliminar qualsevol cosa que tingui un punter a aquestes velles confirmacions abans de tornar a empaquetar:

[source,console]
----
$ rm -Rf .git/refs/original
$ rm -Rf .git/logs/
$ git gc
Counting objects: 15, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (15/15), done.
Total 15 (delta 1), reused 12 (delta 0)
----

Vegem quant d'espai heu estalviat.

[source,console]
----
$ git count-objects -v
count: 11
size: 4904
in-pack: 15
packs: 1
size-pack: 8
prune-packable: 0
garbage: 0
size-garbage: 0
----

La mida del repositori empaquetat s'ha reduït a 8K, cosa que és molt millor que 5MB. Podeu veure pel valor de la mida que l'objecte gran encara està als vostres objectes solts, així que no ha desaparegut; però no es transferirà en un push o clonació posterior, cosa que és el que importa. Si realment ho volguéssiu, podríeu eliminar l'objecte completament executant `git prune` amb l'opció `--expire`:

[source,console]
----
$ git prune --expire now
$ git count-objects -v
count: 0
size: 0
in-pack: 15
packs: 1
size-pack: 8
prune-packable: 0
garbage: 0
size-garbage: 0
----
