=== Protocols de Transferència

Git pot transferir dades entre dos repositoris de dues maneres principals: el protocol "dumb" i el protocol "smart". Aquesta secció cobrirà ràpidament com operen aquests dos protocols principals.

==== El Protocol Dumb

Si esteu configurant un repositori per ser servit només de lectura a través d'HTTP, el protocol dumb és probablement el que s'utilitzarà. Aquest protocol s'anomena "dumb" perquè no requereix cap codi específic de Git al costat del servidor durant el procés de transport; el procés de recuperació és una sèrie de sol·licituds HTTP `GET`, on el client pot assumir la disposició del repositori Git al servidor.

[NOTE]
====
El protocol dumb és bastant rarament utilitzat avui en dia. És difícil de protegir o fer privat, així que la majoria d'amfitrions Git (tant basats en núvol com locals) es negaran a utilitzar-lo. Generalment es recomana utilitzar el protocol smart, que describim una mica més endavant.
====

Seguim el procés `http-fetch` per a la biblioteca simplegit:

[source,console]
----
$ git clone http://server/simplegit-progit.git
----

La primera cosa que fa aquesta comanda és baixar el fitxer `info/refs`. Aquest fitxer és escrit per la comanda `update-server-info`, que és per això que necessiteu habilitar això com un ganxo `post-receive` per tal que el transport HTTP funcioni correctament:

[source]
----
=> GET info/refs
ca82a6dff817ec66f44342007202690a93763949 refs/heads/master
----

Ara teniu una llista de les referències remotes i els seus SHA-1. A continuació, mireu què és la referència HEAD per saber què heu de comprovar quan hàgiu acabat:

[source]
----
=> GET HEAD
ref: refs/heads/master
----

Heu de comprovar la branca `master` quan hàgiu completat el procés. En aquest punt, esteu llest per començar el procés de caminar. Com que el vostre punt de partida és l'objecte de confirmació `ca82a6` que vau veure al fitxer `info/refs`, comenceu obtenint això:

[source]
----
=> GET objects/ca/82a6dff817ec66f44342007202690a93763949
(179 bytes de dades binàries)
----

Obteniu un objecte de tornada: aquest objecte està en format solt al servidor, i l'heu recuperat mitjançant una sol·licitud HTTP GET estàtica. Podeu descomprimir-lo amb zlib, treure la capçalera i mirar el contingut de la confirmació:

[source,console]
----
$ git cat-file -p ca82a6dff817ec66f44342007202690a93763949
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
author Scott Chacon <schacon@gmail.com> 1205815931 -0700
committer Scott Chacon <schacon@gmail.com> 1240030591 -0700

Change version number
----

A continuació, teniu dos objectes més per recuperar: `cfda3b`, que és l'arbre de contingut al qual apunta la confirmació que acabem de recuperar, i `085bb3`, que és la confirmació pare:

[source]
----
=> GET objects/08/5bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
(179 bytes de dades)
----

Això us dona el vostre següent objecte de confirmació. Agafeu l'objecte arbre:

[source]
----
=> GET objects/cf/da3bf379e4f8dba8717dee55aab78aef7f4daf
(404 - No trobat)
----

Oops: sembla que aquest objecte arbre no està en format solt al servidor, així que obteniu una resposta 404. Hi ha un parell de raons per això: l'objecte podria estar en un repositori alternatiu, o podria estar en un packfile en aquest repositori. Git comprova qualsevol alternatiu llistat primer:

[source]
----
=> GET objects/info/http-alternates
(fitxer buit)
----

Si això torna amb una llista d'URLs alternatives, Git comprova fitxers solts i packfiles allà: aquest és un bon mecanisme per a projectes que són forks l'un de l'altre per compartir objectes al disc. No obstant això, com que no hi ha alternatius llistats en aquest cas, el vostre objecte ha de ser en un packfile. Per veure quins packfiles estan disponibles en aquest servidor, heu de obtenir el fitxer `objects/info/packs`, que conté un llistat d'ells (també generat per `update-server-info`):

[source]
----
=> GET objects/info/packs
P pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack
----

Hi ha només un packfile al servidor, així que el vostre objecte està òbviament allà, però comprovareu el fitxer índex per assegurar-vos. Això també és útil si teniu múltiples packfiles al servidor, així que podeu veure quin packfile conté l'objecte que necessiteu:

[source]
----
=> GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.idx
(4k de dades binàries)
----

Ara que teniu l'índex del packfile, podeu veure si el vostre objecte hi és: perquè l'índex llista els SHA-1 dels objectes continguts al packfile i els desplaçaments a aquests objectes. El vostre objecte hi és, així que aneu endavant i obteniu tot el packfile:

[source]
----
=> GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack
(13k de dades binàries)
----

Teniu el vostre objecte arbre, així que continueu caminant pels vostres commits. Tots també estan dins del packfile que acabeu de baixar, així que no heu de fer més sol·licituds al vostre servidor. Git comprova una còpia de treball de la branca `master` a la qual apuntava la referència HEAD que vau baixar al principi.

==== El Protocol Smart

El protocol dumb és simple però una mica ineficient, i no pot manejar l'escriptura de dades des del client al servidor. El protocol smart és un mètode més comú de transferència de dades, però requereix un procés al costat remot que sigui intel·ligent sobre Git: pot llegir dades locals, esbrinar què té el client i què necessita, i generar un packfile personalitzat per a això. Hi ha dos conjunts de processos per transferir dades: un parell per pujar dades i un altre per baixar dades.

===== Pujant Dades

Per pujar dades a un procés remot, Git utilitza els processos `send-pack` i `receive-pack`. El procés `send-pack` s'executa al client i es connecta a un procés `receive-pack` al costat remot.

====== SSH

Per exemple, suposem que executeu `git push origin master` al vostre projecte, i `origin` està definit com una URL que utilitza el protocol SSH. Git inicia el procés `send-pack`, que inicia una connexió a través de SSH al vostre servidor. Intenta executar una comanda al servidor remot mitjançant una trucada SSH que sembla alguna cosa com això:

[source,console]
----
$ ssh -x git@server "git-receive-pack 'simplegit-progit.git'"
00a5ca82a6dff817ec66f4437202690a93763949 refs/heads/master□report-status \
delete-refs side-band-64k quiet ofs-delta \
agent=git/2:2.1.1+github-607-gfba4028 delete-refs
0000
----

La comanda `git-receive-pack` respon immediatament amb una línia per a cada referència que té actualment: en aquest cas, només la branca `master` i el seu SHA-1. La primera línia també té una llista de les capacitats del servidor (aquí, `report-status`, `delete-refs`, i algunes altres, incloent l'identificador del client).

Les dades es transmeten en trossos. Cada tros comença amb un valor hexadecimal de 4 caràcters que especifica quant de llarg és el tros (incloent els 4 bytes de la longitud en si). Els trossos solen contenir una única línia de dades i un salt de línia final. El vostre primer tros comença amb 00a5, que és hexadecimal per a 165, cosa que significa que el tros és de 165 bytes de llarg. El següent tros és 0000, cosa que significa que el servidor ha acabat amb la seva llista de referències.

Ara que coneix l'estat del servidor, el vostre procés `send-pack` determina quines confirmacions té que el servidor no. Per a cada referència que aquesta operació de push actualitzarà, el procés `send-pack` diu al procés `receive-pack` aquesta informació. Per exemple, si esteu actualitzant la branca `master` i afegint una branca `experiment`, la resposta de `send-pack` podria semblar alguna cosa com això:

[source]
----
0076ca82a6dff817ec66f44342007202690a93763949 15027957951b64cf874c3557a0f3547bd83b3ff6 \
refs/heads/master report-status
006c0000000000000000000000000000000000000000 cdfdb42577e2506715f8cfeacdbabc092bf63e8d \
refs/heads/experiment
0000
----

Git envia una línia per a cada referència que esteu actualitzant amb la longitud de la línia, el SHA-1 antic, el nou SHA-1 i la referència que s'està actualitzant. La primera línia també té les capacitats del client. El valor SHA-1 de tots '0's significa que no hi havia res abans: perquè esteu afegint la referència `experiment`. Si esteu eliminant una referència, veuríeu el contrari: tots '0's al costat dret.

A continuació, el client envia un packfile de tots els objectes que el servidor encara no té. Finalment, el servidor respon amb una indicació d'èxit (o fracàs):

[source]
----
000eunpack ok
----

====== HTTP(S)

Aquest procés és majoritàriament el mateix a través d'HTTP, tot i que l'establiment de la connexió és una mica diferent. La connexió s'inicia amb aquesta sol·licitud:

[source]
----
=> GET http://server/simplegit-progit.git/info/refs?service=git-receive-pack
001f# service=git-receive-pack
00ab6c5f0e45abd7832bf23074a333f739977c9e8188 refs/heads/master□report-status \
delete-refs side-band-64k quiet ofs-delta \
agent=git/2:2.1.1~vmg-bitmaps-bugaloo-608-g116744e
0000
----

Això és el final del primer intercanvi client-servidor. El client llavors fa una altra sol·licitud, aquesta vegada un `POST`, amb les dades que `send-pack` proporciona.

[source]
----
=> POST http://server/simplegit-progit.git/git-receive-pack
----

La sol·licitud `POST` inclou la sortida de `send-pack` i el packfile com a la seva càrrega útil. El servidor llavors indica èxit o fracàs amb la seva resposta HTTP.

Tingueu en compte que el protocol HTTP pot encapsular encara més aquestes dades dins d'una codificació de transferència fragmentada.

===== Baixant Dades

Quan baixeu dades, els processos `fetch-pack` i `upload-pack` estan involucrats. El client inicia un procés `fetch-pack` que es connecta a un procés `upload-pack` al costat remot per negociar quines dades es transferiran.

====== SSH

Si esteu fent la descàrrega a través de SSH, `fetch-pack` executa alguna cosa com això:

[source,console]
----
$ ssh -x git@server "git-upload-pack 'simplegit-progit.git'"
----

Després que `fetch-pack` es connecti, `upload-pack` envia alguna cosa com això:

[source]
----
00dfca82a6dff817ec66f44342007202690a93763949 HEAD□multi_ack thin-pack \
side-band side-band-64k ofs-delta shallow no-progress include-tag \
multi_ack_detailed symref=HEAD:refs/heads/master \
agent=git/2:2.1.1+github-607-gfba4028
003fe2409a098dc3e53539a9028a94b6224db9d6a6b6 refs/heads/master
0000
----

Això és molt similar al que `receive-pack` respon, però les capacitats són diferents. A més, envia de tornada a què apunta HEAD (`symref=HEAD:refs/heads/master`) perquè el client sàpiga què comprovar si això és un clon.

En aquest punt, el procés `fetch-pack` mira quins objectes té i respon amb els objectes que necessita enviant "want" i després el SHA-1 que vol. Envia tots els objectes que ja té amb "have" i després el SHA-1. Al final d'aquesta llista, escriu "done" per iniciar el procés `upload-pack` per començar a enviar el packfile de les dades que necessita:

[source]
----
003cwant ca82a6dff817ec66f44342007202690a93763949 ofs-delta
0032have 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
0009done
0000
----

====== HTTP(S)

L'establiment de connexió per a una operació de descàrrega requereix dues sol·licituds HTTP. La primera és una sol·licitud `GET` al mateix endpoint utilitzat en el protocol dumb:

[source]
----
=> GET $GIT_URL/info/refs?service=git-upload-pack
001e# service=git-upload-pack
00e7ca82a6dff817ec66f44342007202690a93763949 HEAD□multi_ack thin-pack \
side-band side-band-64k ofs-delta shallow no-progress include-tag \
multi_ack_detailed no-done symref=HEAD:refs/heads/master \
agent=git/2:2.1.1+github-607-gfba4028
003fca82a6dff817ec66f44342007202690a93763949 refs/heads/master
0000
----

Això és molt similar a invocar `git-upload-pack` a través d'una connexió SSH, però el segon intercanvi es realitza com una sol·licitud separada:

[source]
----
=> POST $GIT_URL/git-upload-pack HTTP/1.0
0032want 0a53e9ddeaddad63ad106860237bbf53411d11a7
0032have 441b40d833fdfa93eb2908e52742248faf0ee993
0000
----

Un cop més, aquest és el mateix format que l'anterior. La resposta a aquesta sol·licitud indica èxit o fracàs, i inclou el packfile.

==== Resum de Protocols

Aquesta secció conté una visió general molt bàsica dels protocols de transferència. El protocol inclou moltes altres característiques, com les capacitats `multi_ack` o `side-band`, però cobrir-les està fora de l'abast d'aquest llibre. Hem intentat donar-vos una idea general de l'intercanvi entre client i servidor; si necessiteu més coneixement que això, probablement voldreu donar un cop d'ull al codi font de Git.
