=== Packfiles

Si has seguido todas las instrucciones en el ejemplo de la sección anterior, ahora deberías tener un repositorio de prueba Git con 11 objetos: cuatro blobs, tres árboles, tres commits y una etiqueta:

[source,console]
----
$ find .git/objects -type f
.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
.git/objects/95/85191f37f7b0fb9444f35a9bf50de191beadc2 # tag
.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1
----

Git comprimeix el contingut d'aquests fitxers amb zlib, i no esteu emmagatzemant gaire, així que tots aquests fitxers junts ocupen només 925 bytes. Ara afegireu contingut una mica més gran al repositori per demostrar una característica interessant de Git. Per demostrar-ho, afegirem el fitxer `repo.rb` de la biblioteca Grit: aquest és un fitxer de codi font d'uns 22K:

[source,console]
----
$ curl https://raw.githubusercontent.com/mojombo/grit/master/lib/grit/repo.rb > repo.rb
$ git checkout master
$ git add repo.rb
$ git commit -m 'Create repo.rb'
[master 484a592] Create repo.rb
3 files changed, 709 insertions(+), 2 deletions(-)
delete mode 100644 bak/test.txt
create mode 100644 repo.rb
rewrite test.txt (100%)
----

Si mires l'arbre resultant, pots veure el valor SHA-1 que es va calcular per al teu nou objecte blob `repo.rb`:

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt
100644 blob 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 repo.rb
100644 blob e3f094f522629ae358806b17daf78246c27c007b test.txt
----

Aleshores podeu utilitzar `git cat-file` per veure quina és la mida d'aquest objecte:

[source,console]
----
$ git cat-file -s 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5
22044
----

En aquest punt, modifiqueu aquest fitxer una mica i vegeu què passa:

[source,console]
----
$ echo '# testing' >> repo.rb
$ git commit -am 'Modify repo.rb a bit'
[master 2431da6] Modify repo.rb a bit
1 file changed, 1 insertion(+)
----

Comproveu l'arbre creat per aquesta última confirmació, i veureu alguna cosa interessant:

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt
100644 blob b042a60ef7dff760008df33cee372b945b6e884e repo.rb
100644 blob e3f094f522629ae358806b17daf78246c27c007b test.txt
----

El blob ara és un blob diferent, cosa que significa que, tot i que només heu afegit una única línia al final d'un fitxer de 400 línies, Git ha emmagatzemat aquest nou contingut com un objecte completament nou:

[source,console]
----
$ git cat-file -s b042a60ef7dff760008df33cee372b945b6e884e
22054
----

Teniu dos objectes de gairebé 22K al vostre disc (cada un comprimit a aproximadament 7K). No seria bo si Git pogués emmagatzemar un d'ells completament però l'altre objecte només com la delta entre ell i el primer?

Resulta que pot fer-ho. El format inicial en què Git guarda els objectes al disc s'anomena format d'objecte "solt". No obstant això, de vegades Git empaqueta diversos d'aquests objectes en un sol fitxer binari anomenat "packfile" per estalviar espai i ser més eficient. Git fa això si teniu massa objectes solts, si executeu manualment la comanda `git gc`, o si feu un push a un servidor remot. Per veure què passa, podeu demanar manualment a Git que empaqueti els objectes trucant a la comanda `git gc`:

[source,console]
----
$ git gc
Counting objects: 18, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (14/14), done.
Writing objects: 100% (18/18), done.
Total 18 (delta 3), reused 0 (delta 0)
----

Si mires al teu directori `objects`, trobaràs que la majoria dels teus objectes han desaparegut, i ha aparegut una nova parella de fitxers:

[source,console]
----
$ find .git/objects -type f
.git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
.git/objects/info/packs
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack
----

Els objectes que queden són els blobs als quals no apunta cap confirmació: en aquest cas, els blobs d'exemple "what is up, doc?" i "test content" que vau crear abans. Com que mai no els vau afegir a cap confirmació, es consideren penjants i no s'empaqueten al vostre nou packfile.

Els altres fitxers són el vostre nou packfile i un índex. El packfile és un sol fitxer que conté el contingut de tots els objectes que es van eliminar del vostre sistema de fitxers. L'índex és un fitxer que conté desplaçaments dins d'aquest packfile perquè podeu buscar ràpidament un objecte específic. El que és genial és que, tot i que els objectes al disc abans d'executar la comanda `gc` ocupaven col·lectivament uns 15K de mida, el nou packfile només ocupa 7K. Heu reduït l'ús del disc a la meitat empaquetant els vostres objectes.

Com ho fa Git? Quan Git empaqueta objectes, busca fitxers que tenen noms i mides similars, i emmagatzema només les deltes d'una versió del fitxer a la següent. Podeu mirar dins del packfile i veure què va fer Git per estalviar espai. La comanda de fontaneria `git verify-pack` us permet veure què s'ha empaquetat:

[source,console]
----
$ git verify-pack -v .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx
2431da676938450a4d72e260db3bf7b0f587bbc1 commit 223 155 12
69bcdaff5328278ab1c0812ce0e07fa7d26a96d7 commit 214 152 167
80d02664cb23ed55b226516648c7ad5d0a3deb90 commit 214 145 319
43168a18b7613d1281e5560855a83eb8fde3d687 commit 213 146 464
092917823486a802e94d727c820a9024e14a1fc2 commit 214 146 610
702470739ce72005e2edff522fde85d52a65df9b commit 165 118 756
d368d0ac0678cbe6cce505be58126d3526706e54 tag 130 122 874
fe879577cb8cffcdf25441725141e310dd7d239b tree 136 136 996
d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree 36 46 1132
deef2e1b793907545e50a2ea2ddb5ba6c58c4506 tree 136 136 1178
d982c7cb2c2a972ee391a85da481fc1f9127a01d tree 6 17 1314 1 \
deef2e1b793907545e50a2ea2ddb5ba6c58c4506
3c4e9cd789d88d8d89c1073707c3585e41b0e614 tree 8 19 1331 1 \
deef2e1b793907545e50a2ea2ddb5ba6c58c4506
0155eb4229851634a0f03eb265b69f5a2d56f341 tree 71 76 1350
83baae61804e65cc73a7201a7252750c76066a30 blob 10 19 1426
fa49b077972391ad58037050f2a75f74e3671e92 blob 9 18 1445
b042a60ef7dff760008df33cee372b945b6e884e blob 22054 5799 1463
033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob 9 20 7262 1 \
b042a60ef7dff760008df33cee372b945b6e884e
1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob 10 19 7282
non delta: 15 objects
chain length = 1: 3 objects
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack: ok
----

Aquí, el blob `033b4`, que si recordes era la primera versió del teu fitxer `repo.rb`, està referenciant el blob `b042a`, que era la segona versió del fitxer. La tercera columna de la sortida és la mida de l'objecte al pack, així que podeu veure que `b042a` ocupa 22K del fitxer, però que `033b4` només ocupa 9 bytes. També és interessant que la segona versió del fitxer és la que s'emmagatzema intacta, mentre que la versió original s'emmagatzema com una delta: això és perquè és més probable que necessiteu un accés més ràpid a la versió més recent del fitxer.

El que realment és bo d'això és que es pot tornar a empaquetar en qualsevol moment. Git de vegades torna a empaquetar la vostra base de dades automàticament, sempre intentant estalviar més espai, però també podeu tornar a empaquetar manualment en qualsevol moment executant `git gc` manualment.
